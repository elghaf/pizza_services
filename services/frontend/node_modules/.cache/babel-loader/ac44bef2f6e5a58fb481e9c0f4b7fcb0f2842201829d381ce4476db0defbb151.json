{"ast":null,"code":"/**\n * Database Client for Pizza Store Violation Detection\n * Handles all database operations from the frontend\n */\n\nclass DatabaseClient {\n  constructor(baseUrl = 'http://localhost:8004') {\n    this.baseUrl = baseUrl;\n  }\n\n  // Helper method for API calls\n  async apiCall(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(`API Error: ${response.status} - ${errorData.detail || response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Database API call failed: ${endpoint}`, error);\n      throw error;\n    }\n  }\n\n  // Session Operations\n  async createSession(sessionData) {\n    console.log('üìä Creating database session:', sessionData);\n    return await this.apiCall('/sessions', {\n      method: 'POST',\n      body: JSON.stringify(sessionData)\n    });\n  }\n  async getSession(sessionId) {\n    return await this.apiCall(`/sessions/${sessionId}`);\n  }\n  async updateSession(sessionId, updateData) {\n    console.log('üìä Updating database session:', sessionId, updateData);\n    return await this.apiCall(`/sessions/${sessionId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updateData)\n    });\n  }\n  async getSessionStats(sessionId) {\n    return await this.apiCall(`/sessions/${sessionId}/stats`);\n  }\n\n  // ROI Zone Operations\n  async createROIZone(zoneData) {\n    console.log('üéØ Creating database ROI zone:', zoneData);\n    return await this.apiCall('/roi-zones', {\n      method: 'POST',\n      body: JSON.stringify(zoneData)\n    });\n  }\n  async getROIZones(sessionId) {\n    return await this.apiCall(`/sessions/${sessionId}/roi-zones`);\n  }\n  async saveROIZones(sessionId, zones) {\n    console.log('üéØ Saving ROI zones to database:', zones.length, 'zones');\n    const results = [];\n    for (const zone of zones) {\n      try {\n        const zoneData = {\n          id: zone.id,\n          session_id: sessionId,\n          name: zone.name,\n          zone_type: zone.type || 'sauce_area',\n          shape: zone.shape,\n          points: zone.points,\n          requires_scooper: zone.requiresScooper || zone.requires_scooper || true\n        };\n        const result = await this.createROIZone(zoneData);\n        results.push(result);\n      } catch (error) {\n        console.error('Failed to save ROI zone:', zone.id, error);\n      }\n    }\n    return results;\n  }\n\n  // Violation Operations\n  async createViolation(violationData) {\n    console.log('üö® Creating database violation:', violationData);\n    return await this.apiCall('/violations', {\n      method: 'POST',\n      body: JSON.stringify(violationData)\n    });\n  }\n  async getViolations(sessionId, limit = 100) {\n    return await this.apiCall(`/sessions/${sessionId}/violations?limit=${limit}`);\n  }\n  async saveViolation(sessionId, violation) {\n    const violationData = {\n      session_id: sessionId,\n      worker_id: violation.workerId || null,\n      roi_zone_id: violation.zoneId || null,\n      frame_number: violation.frameNumber || 0,\n      frame_path: violation.framePath || null,\n      frame_base64: violation.frameBase64 || null,\n      violation_type: violation.type || 'HAND_WITHOUT_SCOOPER',\n      confidence: violation.confidence || 0.8,\n      severity: violation.severity || 'medium',\n      description: violation.description || '',\n      bounding_boxes: violation.boundingBoxes || [],\n      hand_position: violation.handPosition || null,\n      scooper_present: violation.scooperPresent || false,\n      scooper_distance: violation.scooperDistance || null,\n      movement_pattern: violation.movementPattern || null\n    };\n    return await this.createViolation(violationData);\n  }\n\n  // Detection Operations\n  async createDetection(detectionData) {\n    return await this.apiCall('/detections', {\n      method: 'POST',\n      body: JSON.stringify(detectionData)\n    });\n  }\n  async saveDetections(sessionId, frameNumber, detections) {\n    console.log('üîç Saving detections to database:', detections.length, 'detections');\n    const results = [];\n    for (const detection of detections) {\n      try {\n        var _detection$bbox, _detection$bbox2, _detection$bbox3, _detection$bbox4;\n        const detectionData = {\n          session_id: sessionId,\n          frame_number: frameNumber,\n          object_class: detection.class_name || detection.className,\n          confidence: detection.confidence,\n          bbox_x1: ((_detection$bbox = detection.bbox) === null || _detection$bbox === void 0 ? void 0 : _detection$bbox.x1) || detection.x1,\n          bbox_y1: ((_detection$bbox2 = detection.bbox) === null || _detection$bbox2 === void 0 ? void 0 : _detection$bbox2.y1) || detection.y1,\n          bbox_x2: ((_detection$bbox3 = detection.bbox) === null || _detection$bbox3 === void 0 ? void 0 : _detection$bbox3.x2) || detection.x2,\n          bbox_y2: ((_detection$bbox4 = detection.bbox) === null || _detection$bbox4 === void 0 ? void 0 : _detection$bbox4.y2) || detection.y2,\n          metadata: {\n            original_detection: detection\n          }\n        };\n        const result = await this.createDetection(detectionData);\n        results.push(result);\n      } catch (error) {\n        console.error('Failed to save detection:', detection, error);\n      }\n    }\n    return results;\n  }\n\n  // Worker Operations\n  async createWorker(workerData) {\n    return await this.apiCall('/workers', {\n      method: 'POST',\n      body: JSON.stringify(workerData)\n    });\n  }\n\n  // Frame Analysis Operations\n  async saveFrameAnalysis(sessionId, frameNumber, analysisData) {\n    const frameAnalysis = {\n      session_id: sessionId,\n      frame_number: frameNumber,\n      total_detections: analysisData.totalDetections || 0,\n      hands_count: analysisData.handsCount || 0,\n      persons_count: analysisData.personsCount || 0,\n      scoopers_count: analysisData.scoopersCount || 0,\n      pizzas_count: analysisData.pizzasCount || 0,\n      violations_count: analysisData.violationsCount || 0,\n      processing_time_ms: analysisData.processingTimeMs || null,\n      frame_size_bytes: analysisData.frameSizeBytes || null,\n      analysis_metadata: analysisData.metadata || null\n    };\n    return await this.apiCall('/frame-analysis', {\n      method: 'POST',\n      body: JSON.stringify(frameAnalysis)\n    });\n  }\n\n  // Health Check\n  async healthCheck() {\n    try {\n      const result = await this.apiCall('/health');\n      console.log('‚úÖ Database health check passed:', result);\n      return result;\n    } catch (error) {\n      console.error('‚ùå Database health check failed:', error);\n      throw error;\n    }\n  }\n\n  // Utility Methods\n  generateSessionId() {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  generateZoneId() {\n    return `zone_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  generateWorkerId() {\n    return `worker_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Batch Operations\n  async saveBatchData(sessionId, frameNumber, data) {\n    const promises = [];\n\n    // Save detections\n    if (data.detections && data.detections.length > 0) {\n      promises.push(this.saveDetections(sessionId, frameNumber, data.detections));\n    }\n\n    // Save violations\n    if (data.violations && data.violations.length > 0) {\n      for (const violation of data.violations) {\n        violation.frameNumber = frameNumber;\n        promises.push(this.saveViolation(sessionId, violation));\n      }\n    }\n\n    // Save frame analysis\n    if (data.frameAnalysis) {\n      promises.push(this.saveFrameAnalysis(sessionId, frameNumber, data.frameAnalysis));\n    }\n    try {\n      const results = await Promise.allSettled(promises);\n      console.log('üìä Batch data saved:', results.length, 'operations');\n      return results;\n    } catch (error) {\n      console.error('‚ùå Batch save failed:', error);\n      throw error;\n    }\n  }\n}\n\n// Create singleton instance\nconst databaseClient = new DatabaseClient();\nexport default databaseClient;","map":{"version":3,"names":["DatabaseClient","constructor","baseUrl","apiCall","endpoint","options","url","config","headers","response","fetch","ok","errorData","json","catch","Error","status","detail","statusText","error","console","createSession","sessionData","log","method","body","JSON","stringify","getSession","sessionId","updateSession","updateData","getSessionStats","createROIZone","zoneData","getROIZones","saveROIZones","zones","length","results","zone","id","session_id","name","zone_type","type","shape","points","requires_scooper","requiresScooper","result","push","createViolation","violationData","getViolations","limit","saveViolation","violation","worker_id","workerId","roi_zone_id","zoneId","frame_number","frameNumber","frame_path","framePath","frame_base64","frameBase64","violation_type","confidence","severity","description","bounding_boxes","boundingBoxes","hand_position","handPosition","scooper_present","scooperPresent","scooper_distance","scooperDistance","movement_pattern","movementPattern","createDetection","detectionData","saveDetections","detections","detection","_detection$bbox","_detection$bbox2","_detection$bbox3","_detection$bbox4","object_class","class_name","className","bbox_x1","bbox","x1","bbox_y1","y1","bbox_x2","x2","bbox_y2","y2","metadata","original_detection","createWorker","workerData","saveFrameAnalysis","analysisData","frameAnalysis","total_detections","totalDetections","hands_count","handsCount","persons_count","personsCount","scoopers_count","scoopersCount","pizzas_count","pizzasCount","violations_count","violationsCount","processing_time_ms","processingTimeMs","frame_size_bytes","frameSizeBytes","analysis_metadata","healthCheck","generateSessionId","Date","now","Math","random","toString","substr","generateZoneId","generateWorkerId","saveBatchData","data","promises","violations","Promise","allSettled","databaseClient"],"sources":["C:/Users/ayoub/OneDrive/Desktop/eagleAI/pizza_store_detection/services/frontend/src/utils/DatabaseClient.js"],"sourcesContent":["/**\n * Database Client for Pizza Store Violation Detection\n * Handles all database operations from the frontend\n */\n\nclass DatabaseClient {\n  constructor(baseUrl = 'http://localhost:8004') {\n    this.baseUrl = baseUrl;\n  }\n\n  // Helper method for API calls\n  async apiCall(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(`API Error: ${response.status} - ${errorData.detail || response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(`Database API call failed: ${endpoint}`, error);\n      throw error;\n    }\n  }\n\n  // Session Operations\n  async createSession(sessionData) {\n    console.log('üìä Creating database session:', sessionData);\n    return await this.apiCall('/sessions', {\n      method: 'POST',\n      body: JSON.stringify(sessionData)\n    });\n  }\n\n  async getSession(sessionId) {\n    return await this.apiCall(`/sessions/${sessionId}`);\n  }\n\n  async updateSession(sessionId, updateData) {\n    console.log('üìä Updating database session:', sessionId, updateData);\n    return await this.apiCall(`/sessions/${sessionId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updateData)\n    });\n  }\n\n  async getSessionStats(sessionId) {\n    return await this.apiCall(`/sessions/${sessionId}/stats`);\n  }\n\n  // ROI Zone Operations\n  async createROIZone(zoneData) {\n    console.log('üéØ Creating database ROI zone:', zoneData);\n    return await this.apiCall('/roi-zones', {\n      method: 'POST',\n      body: JSON.stringify(zoneData)\n    });\n  }\n\n  async getROIZones(sessionId) {\n    return await this.apiCall(`/sessions/${sessionId}/roi-zones`);\n  }\n\n  async saveROIZones(sessionId, zones) {\n    console.log('üéØ Saving ROI zones to database:', zones.length, 'zones');\n    const results = [];\n    \n    for (const zone of zones) {\n      try {\n        const zoneData = {\n          id: zone.id,\n          session_id: sessionId,\n          name: zone.name,\n          zone_type: zone.type || 'sauce_area',\n          shape: zone.shape,\n          points: zone.points,\n          requires_scooper: zone.requiresScooper || zone.requires_scooper || true\n        };\n        \n        const result = await this.createROIZone(zoneData);\n        results.push(result);\n      } catch (error) {\n        console.error('Failed to save ROI zone:', zone.id, error);\n      }\n    }\n    \n    return results;\n  }\n\n  // Violation Operations\n  async createViolation(violationData) {\n    console.log('üö® Creating database violation:', violationData);\n    return await this.apiCall('/violations', {\n      method: 'POST',\n      body: JSON.stringify(violationData)\n    });\n  }\n\n  async getViolations(sessionId, limit = 100) {\n    return await this.apiCall(`/sessions/${sessionId}/violations?limit=${limit}`);\n  }\n\n  async saveViolation(sessionId, violation) {\n    const violationData = {\n      session_id: sessionId,\n      worker_id: violation.workerId || null,\n      roi_zone_id: violation.zoneId || null,\n      frame_number: violation.frameNumber || 0,\n      frame_path: violation.framePath || null,\n      frame_base64: violation.frameBase64 || null,\n      violation_type: violation.type || 'HAND_WITHOUT_SCOOPER',\n      confidence: violation.confidence || 0.8,\n      severity: violation.severity || 'medium',\n      description: violation.description || '',\n      bounding_boxes: violation.boundingBoxes || [],\n      hand_position: violation.handPosition || null,\n      scooper_present: violation.scooperPresent || false,\n      scooper_distance: violation.scooperDistance || null,\n      movement_pattern: violation.movementPattern || null\n    };\n\n    return await this.createViolation(violationData);\n  }\n\n  // Detection Operations\n  async createDetection(detectionData) {\n    return await this.apiCall('/detections', {\n      method: 'POST',\n      body: JSON.stringify(detectionData)\n    });\n  }\n\n  async saveDetections(sessionId, frameNumber, detections) {\n    console.log('üîç Saving detections to database:', detections.length, 'detections');\n    const results = [];\n    \n    for (const detection of detections) {\n      try {\n        const detectionData = {\n          session_id: sessionId,\n          frame_number: frameNumber,\n          object_class: detection.class_name || detection.className,\n          confidence: detection.confidence,\n          bbox_x1: detection.bbox?.x1 || detection.x1,\n          bbox_y1: detection.bbox?.y1 || detection.y1,\n          bbox_x2: detection.bbox?.x2 || detection.x2,\n          bbox_y2: detection.bbox?.y2 || detection.y2,\n          metadata: {\n            original_detection: detection\n          }\n        };\n        \n        const result = await this.createDetection(detectionData);\n        results.push(result);\n      } catch (error) {\n        console.error('Failed to save detection:', detection, error);\n      }\n    }\n    \n    return results;\n  }\n\n  // Worker Operations\n  async createWorker(workerData) {\n    return await this.apiCall('/workers', {\n      method: 'POST',\n      body: JSON.stringify(workerData)\n    });\n  }\n\n  // Frame Analysis Operations\n  async saveFrameAnalysis(sessionId, frameNumber, analysisData) {\n    const frameAnalysis = {\n      session_id: sessionId,\n      frame_number: frameNumber,\n      total_detections: analysisData.totalDetections || 0,\n      hands_count: analysisData.handsCount || 0,\n      persons_count: analysisData.personsCount || 0,\n      scoopers_count: analysisData.scoopersCount || 0,\n      pizzas_count: analysisData.pizzasCount || 0,\n      violations_count: analysisData.violationsCount || 0,\n      processing_time_ms: analysisData.processingTimeMs || null,\n      frame_size_bytes: analysisData.frameSizeBytes || null,\n      analysis_metadata: analysisData.metadata || null\n    };\n\n    return await this.apiCall('/frame-analysis', {\n      method: 'POST',\n      body: JSON.stringify(frameAnalysis)\n    });\n  }\n\n  // Health Check\n  async healthCheck() {\n    try {\n      const result = await this.apiCall('/health');\n      console.log('‚úÖ Database health check passed:', result);\n      return result;\n    } catch (error) {\n      console.error('‚ùå Database health check failed:', error);\n      throw error;\n    }\n  }\n\n  // Utility Methods\n  generateSessionId() {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  generateZoneId() {\n    return `zone_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  generateWorkerId() {\n    return `worker_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Batch Operations\n  async saveBatchData(sessionId, frameNumber, data) {\n    const promises = [];\n\n    // Save detections\n    if (data.detections && data.detections.length > 0) {\n      promises.push(this.saveDetections(sessionId, frameNumber, data.detections));\n    }\n\n    // Save violations\n    if (data.violations && data.violations.length > 0) {\n      for (const violation of data.violations) {\n        violation.frameNumber = frameNumber;\n        promises.push(this.saveViolation(sessionId, violation));\n      }\n    }\n\n    // Save frame analysis\n    if (data.frameAnalysis) {\n      promises.push(this.saveFrameAnalysis(sessionId, frameNumber, data.frameAnalysis));\n    }\n\n    try {\n      const results = await Promise.allSettled(promises);\n      console.log('üìä Batch data saved:', results.length, 'operations');\n      return results;\n    } catch (error) {\n      console.error('‚ùå Batch save failed:', error);\n      throw error;\n    }\n  }\n}\n\n// Create singleton instance\nconst databaseClient = new DatabaseClient();\n\nexport default databaseClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}