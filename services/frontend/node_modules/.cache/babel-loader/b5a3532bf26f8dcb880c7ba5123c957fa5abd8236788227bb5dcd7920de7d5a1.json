{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayoub\\\\OneDrive\\\\Desktop\\\\eagleAI\\\\pizza_store_detection\\\\services\\\\frontend\\\\src\\\\components\\\\ROIZoneManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROIZoneManager = ({\n  currentFrame,\n  onZonesUpdate,\n  existingZones = [],\n  isEnabled = true,\n  frameWidth = 640,\n  frameHeight = 480\n}) => {\n  _s();\n  var _zoneTypes$selectedZo;\n  const canvasRef = useRef(null);\n  const [zones, setZones] = useState(existingZones);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentZone, setCurrentZone] = useState(null);\n  const [selectedZoneType, setSelectedZoneType] = useState('sauce_area');\n  const [editingZone, setEditingZone] = useState(null);\n  const [showZones, setShowZones] = useState(true);\n\n  // Professional polygon drawing states\n  const [drawingMode, setDrawingMode] = useState('polygon'); // Start with polygon for sauce areas\n  const [polygonPoints, setPolygonPoints] = useState([]);\n  const [previewPoint, setPreviewPoint] = useState(null);\n\n  // Advanced polygon editing states\n  const [editingPolygon, setEditingPolygon] = useState(null); // Which polygon is being edited\n  const [selectedPointIndex, setSelectedPointIndex] = useState(-1); // Which point is selected\n  const [hoveredPointIndex, setHoveredPointIndex] = useState(-1); // Which point is hovered\n  const [hoveredEdgeIndex, setHoveredEdgeIndex] = useState(-1); // Which edge is hovered\n  const [isDraggingPoint, setIsDraggingPoint] = useState(false); // Is dragging a point\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  }); // Drag offset for smooth dragging\n  const [snapToGrid, setSnapToGrid] = useState(false); // Grid snapping\n  const [gridSize, setGridSize] = useState(20); // Grid size for snapping\n  const [undoStack, setUndoStack] = useState([]); // Undo history\n  const [redoStack, setRedoStack] = useState([]); // Redo history\n\n  // Zone types with professional configuration\n  const zoneTypes = {\n    sauce_area: {\n      name: 'Sauce Area',\n      color: '#FF6B35',\n      fillColor: 'rgba(255, 107, 53, 0.2)',\n      requiresScooper: true,\n      icon: '🍅',\n      description: 'Sauce dispensing and handling area',\n      preferredShape: 'polygon' // Sauce areas work better with polygons\n    },\n    cheese_area: {\n      name: 'Cheese Area',\n      color: '#FFD23F',\n      fillColor: 'rgba(255, 210, 63, 0.2)',\n      requiresScooper: true,\n      icon: '🧀',\n      description: 'Cheese container and handling area',\n      preferredShape: 'rectangle' // Cheese containers are usually rectangular\n    },\n    meat_area: {\n      name: 'Meat/Protein Area',\n      color: '#FF4757',\n      fillColor: 'rgba(255, 71, 87, 0.2)',\n      requiresScooper: true,\n      icon: '🥓',\n      description: 'Meat and protein ingredient area'\n    },\n    vegetable_area: {\n      name: 'Vegetable Area',\n      color: '#2ED573',\n      fillColor: 'rgba(46, 213, 115, 0.2)',\n      requiresScooper: true,\n      icon: '🥬',\n      description: 'Vegetable and fresh ingredient area'\n    },\n    prep_surface: {\n      name: 'Prep Surface',\n      color: '#5352ED',\n      fillColor: 'rgba(83, 82, 237, 0.2)',\n      requiresScooper: false,\n      icon: '🍕',\n      description: 'Pizza preparation surface (no scooper required)'\n    },\n    cleaning_area: {\n      name: 'Cleaning Area',\n      color: '#00D2D3',\n      fillColor: 'rgba(0, 210, 211, 0.2)',\n      requiresScooper: false,\n      icon: '🧽',\n      description: 'Cleaning and sanitization area'\n    }\n  };\n\n  // Function definitions (moved to top to avoid hoisting issues)\n  const findZoneAtPoint = (x, y) => {\n    // x, y are in natural coordinates, zones are stored in natural coordinates\n    return zones.find(zone => {\n      if (zone.shape === 'polygon' && zone.points.length >= 3) {\n        return isPointInPolygon(x, y, zone.points);\n      } else if (zone.points.length === 2) {\n        const [p1, p2] = zone.points;\n        const inZone = x >= Math.min(p1.x, p2.x) && x <= Math.max(p1.x, p2.x) && y >= Math.min(p1.y, p2.y) && y <= Math.max(p1.y, p2.y);\n        console.log(`🔍 Checking zone ${zone.name}:`, {\n          point: {\n            x,\n            y\n          },\n          zone: {\n            p1,\n            p2\n          },\n          inZone\n        });\n        return inZone;\n      }\n      return false;\n    });\n  };\n\n  // Professional polygon editing utilities\n  const snapToGridIfEnabled = point => {\n    if (!snapToGrid) return point;\n    return {\n      x: Math.round(point.x / gridSize) * gridSize,\n      y: Math.round(point.y / gridSize) * gridSize\n    };\n  };\n  const getPointDistance = (p1, p2) => {\n    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n  };\n  const findPointAtPosition = (points, position, threshold = 8) => {\n    for (let i = 0; i < points.length; i++) {\n      if (getPointDistance(points[i], position) <= threshold) {\n        return i;\n      }\n    }\n    return -1;\n  };\n  const findEdgeAtPosition = (points, position, threshold = 5) => {\n    for (let i = 0; i < points.length; i++) {\n      const p1 = points[i];\n      const p2 = points[(i + 1) % points.length];\n      const distanceToEdge = distancePointToLine(position, p1, p2);\n      if (distanceToEdge <= threshold) {\n        return i;\n      }\n    }\n    return -1;\n  };\n  const distancePointToLine = (point, lineStart, lineEnd) => {\n    const A = point.x - lineStart.x;\n    const B = point.y - lineStart.y;\n    const C = lineEnd.x - lineStart.x;\n    const D = lineEnd.y - lineStart.y;\n    const dot = A * C + B * D;\n    const lenSq = C * C + D * D;\n    if (lenSq === 0) return getPointDistance(point, lineStart);\n    let param = dot / lenSq;\n    param = Math.max(0, Math.min(1, param));\n    const xx = lineStart.x + param * C;\n    const yy = lineStart.y + param * D;\n    return getPointDistance(point, {\n      x: xx,\n      y: yy\n    });\n  };\n  const addPointToHistory = (action, data) => {\n    const historyEntry = {\n      action,\n      data: JSON.parse(JSON.stringify(data)),\n      timestamp: Date.now()\n    };\n    setUndoStack(prev => [...prev.slice(-19), historyEntry]); // Keep last 20 actions\n    setRedoStack([]); // Clear redo stack when new action is performed\n  };\n  const isPointInPolygon = (x, y, polygon) => {\n    let inside = false;\n    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n      if (polygon[i].y > y !== polygon[j].y > y && x < (polygon[j].x - polygon[i].x) * (y - polygon[i].y) / (polygon[j].y - polygon[i].y) + polygon[i].x) {\n        inside = !inside;\n      }\n    }\n    return inside;\n  };\n  const undo = () => {\n    if (undoStack.length === 0) return;\n    const lastAction = undoStack[undoStack.length - 1];\n    setRedoStack(prev => [...prev, lastAction]);\n    setUndoStack(prev => prev.slice(0, -1));\n\n    // Apply undo logic based on action type\n    switch (lastAction.action) {\n      case 'addPoint':\n        setPolygonPoints(lastAction.data.previousPoints);\n        break;\n      case 'movePoint':\n        // Restore previous point position\n        break;\n      case 'deletePoint':\n        // Restore deleted point\n        break;\n    }\n    toast.info('↶ Undone');\n  };\n  const redo = () => {\n    if (redoStack.length === 0) return;\n    const actionToRedo = redoStack[redoStack.length - 1];\n    setUndoStack(prev => [...prev, actionToRedo]);\n    setRedoStack(prev => prev.slice(0, -1));\n\n    // Apply redo logic\n    toast.info('↷ Redone');\n  };\n  const drawZones = (zonesToDraw = zones) => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      // Canvas might not be ready yet, skip drawing\n      return;\n    }\n    const ctx = canvas.getContext('2d');\n\n    // Get the background image to match its size\n    const backgroundImg = document.getElementById('roi-background-image');\n    let displayWidth, displayHeight, naturalWidth, naturalHeight;\n    if (backgroundImg) {\n      const rect = backgroundImg.getBoundingClientRect();\n      displayWidth = rect.width;\n      displayHeight = rect.height;\n      naturalWidth = backgroundImg.naturalWidth || frameWidth;\n      naturalHeight = backgroundImg.naturalHeight || frameHeight;\n      canvas.width = displayWidth;\n      canvas.height = displayHeight;\n      canvas.style.width = displayWidth + 'px';\n      canvas.style.height = displayHeight + 'px';\n    } else {\n      // Fallback to provided dimensions\n      displayWidth = frameWidth;\n      displayHeight = frameHeight;\n      naturalWidth = frameWidth;\n      naturalHeight = frameHeight;\n      canvas.width = displayWidth;\n      canvas.height = displayHeight;\n    }\n\n    // Calculate scaling factors from natural to display size\n    const scaleX = displayWidth / naturalWidth;\n    const scaleY = displayHeight / naturalHeight;\n    console.log('🎨 Drawing zones on canvas:', {\n      canvasSize: `${canvas.width}x${canvas.height}`,\n      frameSize: `${frameWidth}x${frameHeight}`,\n      naturalSize: `${naturalWidth}x${naturalHeight}`,\n      displaySize: `${displayWidth}x${displayHeight}`,\n      scale: `${scaleX.toFixed(3)}x${scaleY.toFixed(3)}`,\n      zones: zonesToDraw.length,\n      backgroundImg: !!backgroundImg\n    });\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    if (!showZones) return;\n\n    // Draw each zone with proper coordinate scaling\n    zonesToDraw.forEach((zone, index) => {\n      const zoneConfig = zoneTypes[zone.type];\n      if (zone.shape === 'polygon' && zone.points.length >= 3) {\n        drawPolygonZone(ctx, zone, zoneConfig, scaleX, scaleY);\n      } else if (zone.points.length >= 2) {\n        drawRectangleZone(ctx, zone, zoneConfig, scaleX, scaleY);\n      }\n    });\n\n    // Draw current polygon being drawn\n    if (drawingMode === 'polygon' && polygonPoints.length > 0) {\n      console.log('🎨 Drawing polygon preview with', polygonPoints.length, 'points');\n      drawPolygonPreview(ctx, polygonPoints, previewPoint, zoneTypes[selectedZoneType]);\n    }\n\n    // Draw current zone being drawn (rectangle mode)\n    if (drawingMode === 'rectangle' && currentZone && currentZone.points.length === 2) {\n      const zoneConfig = zoneTypes[currentZone.type];\n      const [p1, p2] = currentZone.points;\n      ctx.strokeStyle = zoneConfig.color;\n      ctx.lineWidth = 3;\n      ctx.setLineDash([10, 5]);\n      ctx.strokeRect(Math.min(p1.x, p2.x), Math.min(p1.y, p2.y), Math.abs(p2.x - p1.x), Math.abs(p2.y - p1.y));\n    }\n  };\n  const drawPolygonZone = (ctx, zone, zoneConfig, scaleX, scaleY) => {\n    const isPreviewZone = zone.isPreview === true;\n\n    // Scale points from natural to display coordinates (unless it's a preview)\n    const scaledPoints = zone.points.map(point => {\n      if (isPreviewZone) {\n        return point; // Already in display coordinates\n      } else {\n        return {\n          x: point.x * scaleX,\n          y: point.y * scaleY\n        };\n      }\n    });\n\n    // Draw polygon\n    ctx.save();\n    ctx.strokeStyle = zoneConfig.color;\n    ctx.fillStyle = zoneConfig.fillColor;\n    ctx.lineWidth = isPreviewZone ? 3 : 2;\n    ctx.setLineDash(isPreviewZone ? [5, 5] : []);\n    ctx.beginPath();\n    ctx.moveTo(scaledPoints[0].x, scaledPoints[0].y);\n    for (let i = 1; i < scaledPoints.length; i++) {\n      ctx.lineTo(scaledPoints[i].x, scaledPoints[i].y);\n    }\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n\n    // Draw points\n    scaledPoints.forEach((point, index) => {\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, 4, 0, 2 * Math.PI);\n      ctx.fillStyle = zoneConfig.color;\n      ctx.fill();\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    });\n\n    // Draw zone label\n    const centerX = scaledPoints.reduce((sum, p) => sum + p.x, 0) / scaledPoints.length;\n    const centerY = scaledPoints.reduce((sum, p) => sum + p.y, 0) / scaledPoints.length;\n    ctx.fillStyle = '#fff';\n    ctx.font = 'bold 12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(`${zoneConfig.icon} ${zone.name}`, centerX, centerY);\n    ctx.restore();\n  };\n  const drawPolygonPreview = (ctx, points, previewPoint, zoneConfig) => {\n    console.log('🔺 drawPolygonPreview called with', points.length, 'points', points);\n    if (points.length === 0) return;\n    ctx.save();\n\n    // Draw grid if enabled\n    if (snapToGrid) {\n      drawGrid(ctx);\n    }\n    ctx.strokeStyle = zoneConfig.color;\n    ctx.lineWidth = 3;\n    ctx.setLineDash([5, 5]);\n\n    // Draw lines between points\n    ctx.beginPath();\n    ctx.moveTo(points[0].x, points[0].y);\n    for (let i = 1; i < points.length; i++) {\n      ctx.lineTo(points[i].x, points[i].y);\n    }\n\n    // Draw preview line to mouse\n    if (previewPoint) {\n      ctx.lineTo(previewPoint.x, previewPoint.y);\n\n      // Highlight edge if hovering over it for point insertion\n      if (hoveredEdgeIndex >= 0) {\n        ctx.strokeStyle = '#FFD700';\n        ctx.lineWidth = 5;\n        ctx.setLineDash([]);\n        const edgeStart = points[hoveredEdgeIndex];\n        const edgeEnd = points[(hoveredEdgeIndex + 1) % points.length];\n        ctx.beginPath();\n        ctx.moveTo(edgeStart.x, edgeStart.y);\n        ctx.lineTo(edgeEnd.x, edgeEnd.y);\n        ctx.stroke();\n\n        // Reset style\n        ctx.strokeStyle = zoneConfig.color;\n        ctx.lineWidth = 3;\n        ctx.setLineDash([5, 5]);\n      }\n    }\n    ctx.stroke();\n\n    // Draw points with professional styling\n    points.forEach((point, index) => {\n      const isFirstPoint = index === 0;\n      const isSelected = index === selectedPointIndex;\n      const isHovered = index === hoveredPointIndex;\n      let radius = 6;\n      let fillColor = zoneConfig.color;\n      let strokeColor = '#fff';\n      let strokeWidth = 2;\n      if (isFirstPoint && points.length > 2) {\n        radius = 8;\n        fillColor = '#00FF88';\n        strokeWidth = 3;\n      }\n      if (isSelected) {\n        radius = 10;\n        fillColor = '#FF6B6B';\n        strokeWidth = 3;\n      } else if (isHovered) {\n        radius = 8;\n        fillColor = '#FFD700';\n        strokeWidth = 3;\n      }\n\n      // Draw point handle\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = fillColor;\n      ctx.fill();\n      ctx.strokeStyle = strokeColor;\n      ctx.lineWidth = strokeWidth;\n      ctx.stroke();\n\n      // Draw point number\n      ctx.fillStyle = '#fff';\n      ctx.font = isFirstPoint ? 'bold 11px Arial' : '10px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText((index + 1).toString(), point.x, point.y + 3);\n\n      // Add \"CLOSE\" text near first point when polygon can be closed\n      if (isFirstPoint && points.length > 2) {\n        ctx.fillStyle = '#00FF88';\n        ctx.font = 'bold 9px Arial';\n        ctx.fillText('CLOSE', point.x, point.y - 15);\n      }\n\n      // Show coordinates for selected point\n      if (isSelected) {\n        ctx.fillStyle = '#FF6B6B';\n        ctx.font = 'bold 10px Arial';\n        ctx.fillText(`(${Math.round(point.x)}, ${Math.round(point.y)})`, point.x, point.y - 20);\n      }\n    });\n    ctx.restore();\n  };\n  const drawGrid = ctx => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    ctx.save();\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n\n    // Draw vertical lines\n    for (let x = 0; x < canvas.width; x += gridSize) {\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, canvas.height);\n      ctx.stroke();\n    }\n\n    // Draw horizontal lines\n    for (let y = 0; y < canvas.height; y += gridSize) {\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(canvas.width, y);\n      ctx.stroke();\n    }\n    ctx.restore();\n  };\n  const drawRectangleZone = (ctx, zone, zoneConfig, scaleX, scaleY) => {\n    const [p1, p2] = zone.points;\n    const isPreviewZone = zone.isPreview === true;\n\n    // Scale coordinates from natural to display (unless it's a preview)\n    let x1, y1, x2, y2;\n    if (isPreviewZone) {\n      x1 = p1.x;\n      y1 = p1.y;\n      x2 = p2.x;\n      y2 = p2.y;\n    } else {\n      x1 = p1.x * scaleX;\n      y1 = p1.y * scaleY;\n      x2 = p2.x * scaleX;\n      y2 = p2.y * scaleY;\n    }\n    const width = Math.abs(x2 - x1);\n    const height = Math.abs(y2 - y1);\n    const startX = Math.min(x1, x2);\n    const startY = Math.min(y1, y2);\n\n    // Draw rectangle\n    ctx.save();\n    ctx.fillStyle = zoneConfig.fillColor;\n    ctx.fillRect(startX, startY, width, height);\n    ctx.strokeStyle = zoneConfig.color;\n    ctx.lineWidth = isPreviewZone ? 3 : 2;\n    ctx.setLineDash(isPreviewZone ? [10, 5] : []);\n    ctx.strokeRect(startX, startY, width, height);\n\n    // Draw zone label\n    const labelX = startX + width / 2;\n    const labelY = startY + height / 2;\n    ctx.fillStyle = '#fff';\n    ctx.font = 'bold 14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(`${zoneConfig.icon} ${zone.name || zoneConfig.name}`, labelX, labelY);\n\n    // Draw requirement text\n    const reqText = zone.requiresScooper ? 'Scooper Required' : 'No Scooper Required';\n    ctx.font = '12px Arial';\n    ctx.fillStyle = zone.requiresScooper ? '#FF4757' : '#2ED573';\n    ctx.fillText(reqText, labelX, labelY + 18);\n    ctx.restore();\n  };\n  useEffect(() => {\n    if (onZonesUpdate) {\n      onZonesUpdate(zones);\n    }\n  }, [zones, onZonesUpdate]);\n\n  // Auto-switch drawing mode based on zone type preference\n  useEffect(() => {\n    const zoneConfig = zoneTypes[selectedZoneType];\n    if (zoneConfig && zoneConfig.preferredShape) {\n      setDrawingMode(zoneConfig.preferredShape);\n      console.log(`🎯 Auto-switched to ${zoneConfig.preferredShape} mode for ${zoneConfig.name}`);\n    }\n  }, [selectedZoneType]);\n\n  // Keyboard shortcuts for polygon drawing\n  useEffect(() => {\n    const handleKeyPress = event => {\n      if (!isEnabled || drawingMode !== 'polygon') return;\n\n      // Enter key to complete polygon\n      if (event.key === 'Enter' && polygonPoints.length >= 3) {\n        event.preventDefault();\n        completePolygon();\n        toast.success('🔺 Polygon completed with Enter key!');\n      }\n\n      // Escape key to cancel polygon drawing\n      if (event.key === 'Escape' && polygonPoints.length > 0) {\n        event.preventDefault();\n        setPolygonPoints([]);\n        setIsDrawing(false);\n        setPreviewPoint(null);\n        toast.info('🔺 Polygon drawing cancelled');\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isEnabled, drawingMode, polygonPoints.length]);\n\n  // Auto-test polygon drawing when frame is available\n  useEffect(() => {\n    if (currentFrame && drawingMode === 'polygon' && polygonPoints.length === 0) {\n      console.log('🧪 AUTO-TEST: Frame available, testing polygon drawing setup');\n      console.log('🧪 AUTO-TEST: Frame size from props:', `${frameWidth}x${frameHeight}`);\n\n      // Get actual frame size from background image\n      const backgroundImg = document.getElementById('roi-background-image');\n      if (backgroundImg) {\n        const actualSize = {\n          natural: `${backgroundImg.naturalWidth}x${backgroundImg.naturalHeight}`,\n          display: `${backgroundImg.clientWidth}x${backgroundImg.clientHeight}`\n        };\n        console.log('🧪 AUTO-TEST: Actual image size:', actualSize);\n\n        // Test canvas setup\n        const canvas = canvasRef.current;\n        if (canvas) {\n          console.log('🧪 AUTO-TEST: Canvas size:', `${canvas.width}x${canvas.height}`);\n          console.log('🧪 AUTO-TEST: Canvas style:', `${canvas.style.width}x${canvas.style.height}`);\n        } else {\n          console.log('🧪 AUTO-TEST: ❌ No canvas reference');\n        }\n\n        // Simulate a test click in the center\n        setTimeout(() => {\n          const testCoords = {\n            display: {\n              x: backgroundImg.clientWidth / 2,\n              y: backgroundImg.clientHeight / 2\n            },\n            natural: {\n              x: backgroundImg.naturalWidth / 2,\n              y: backgroundImg.naturalHeight / 2\n            }\n          };\n          console.log('🧪 AUTO-TEST: Simulating polygon click at center:', testCoords);\n          handlePolygonClick(testCoords.display, testCoords.natural);\n        }, 1000);\n      }\n    }\n  }, [currentFrame, drawingMode, polygonPoints.length]);\n  useEffect(() => {\n    console.log('🎯 ROI Zone Manager useEffect triggered:', {\n      currentFrame: !!currentFrame,\n      currentFrameType: typeof currentFrame,\n      currentFrameLength: (currentFrame === null || currentFrame === void 0 ? void 0 : currentFrame.length) || 0,\n      frameSize: `${frameWidth}x${frameHeight}`,\n      zones: zones.length,\n      showZones,\n      drawingMode,\n      polygonPoints: polygonPoints.length\n    });\n    if (currentFrame) {\n      console.log('✅ ROI Manager has frame data - length:', currentFrame.length);\n      console.log('🔍 Frame data preview:', currentFrame.substring(0, 50) + '...');\n    } else {\n      console.log('❌ ROI Manager - No frame data received');\n    }\n    drawZones();\n  }, [zones, currentFrame, showZones, frameWidth, frameHeight]);\n  const getCanvasCoordinates = event => {\n    const canvas = canvasRef.current;\n    if (!canvas) return {\n      x: 0,\n      y: 0\n    };\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    // Get display coordinates\n    const displayCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n\n    // Convert to natural frame coordinates for storage\n    const backgroundImg = document.getElementById('roi-background-image');\n    let naturalCoords = displayCoords;\n    if (backgroundImg) {\n      const naturalWidth = backgroundImg.naturalWidth || frameWidth;\n      const naturalHeight = backgroundImg.naturalHeight || frameHeight;\n      const displayWidth = canvas.width;\n      const displayHeight = canvas.height;\n      const naturalScaleX = naturalWidth / displayWidth;\n      const naturalScaleY = naturalHeight / displayHeight;\n      naturalCoords = {\n        x: displayCoords.x * naturalScaleX,\n        y: displayCoords.y * naturalScaleY\n      };\n    }\n    console.log('🖱️ Mouse coordinates:', {\n      client: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      display: displayCoords,\n      natural: naturalCoords,\n      canvas: {\n        width: canvas.width,\n        height: canvas.height\n      },\n      frame: {\n        width: frameWidth,\n        height: frameHeight\n      }\n    });\n    return naturalCoords;\n  };\n  const handleMouseDown = event => {\n    console.log('🖱️ MOUSE DOWN DETECTED on canvas!', {\n      isEnabled,\n      drawingMode,\n      selectedZoneType,\n      canvasSize: canvasRef.current ? `${canvasRef.current.width}x${canvasRef.current.height}` : 'no canvas'\n    });\n    if (!isEnabled) {\n      console.log('🚫 Drawing disabled');\n      return;\n    }\n    console.log('🖱️ Mouse down event triggered');\n    event.preventDefault();\n\n    // Get both natural and display coordinates\n    const naturalCoords = getCanvasCoordinates(event); // This returns natural coordinates\n\n    // Also get display coordinates for drawing preview\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    const displayCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n    const snappedCoords = snapToGridIfEnabled(displayCoords);\n\n    // Handle polygon point dragging\n    if (drawingMode === 'polygon' && polygonPoints.length > 0) {\n      const pointIndex = findPointAtPosition(polygonPoints, snappedCoords);\n      if (pointIndex >= 0) {\n        // Start dragging this point\n        setSelectedPointIndex(pointIndex);\n        setIsDraggingPoint(true);\n        setDragOffset({\n          x: snappedCoords.x - polygonPoints[pointIndex].x,\n          y: snappedCoords.y - polygonPoints[pointIndex].y\n        });\n        addPointToHistory('startDrag', {\n          pointIndex,\n          originalPosition: polygonPoints[pointIndex]\n        });\n        toast.info(`🔺 Dragging point ${pointIndex + 1}. Release to finish.`);\n        return;\n      }\n    }\n\n    // Check if clicking on existing zone for editing (use natural coordinates)\n    const clickedZone = findZoneAtPoint(naturalCoords.x, naturalCoords.y);\n    if (clickedZone && clickedZone.shape === 'polygon') {\n      console.log('✏️ Editing existing polygon zone:', clickedZone.name);\n      setEditingPolygon(clickedZone);\n\n      // Convert zone points to display coordinates for editing\n      const canvas = canvasRef.current;\n      const naturalScaleX = frameWidth / canvas.width;\n      const naturalScaleY = frameHeight / canvas.height;\n      const displayPoints = clickedZone.points.map(point => ({\n        x: point.x / naturalScaleX,\n        y: point.y / naturalScaleY\n      }));\n      setPolygonPoints(displayPoints);\n      setIsDrawing(true);\n      toast.info(`🔺 Editing ${clickedZone.name}. Click points to select, drag to move.`);\n      return;\n    } else if (clickedZone) {\n      console.log('✏️ Editing existing zone:', clickedZone.name);\n      setEditingZone(clickedZone);\n      return;\n    }\n    console.log('🖱️ Mouse down - Drawing mode:', drawingMode, 'Zone type:', selectedZoneType);\n    if (drawingMode === 'polygon') {\n      console.log('🔺 Entering polygon mode');\n      handlePolygonClick(snappedCoords, naturalCoords);\n    } else {\n      console.log('📦 Entering rectangle mode');\n      handleRectangleStart(snappedCoords, naturalCoords);\n    }\n  };\n  const handlePolygonClick = (displayCoords, naturalCoords) => {\n    console.log('🔺 Polygon click:', {\n      displayCoords,\n      naturalCoords,\n      currentPoints: polygonPoints.length\n    });\n    const snappedCoords = snapToGridIfEnabled(displayCoords);\n\n    // Check if editing an existing polygon\n    if (editingPolygon) {\n      const pointIndex = findPointAtPosition(polygonPoints, snappedCoords);\n      if (pointIndex >= 0) {\n        // Clicked on existing point - select it\n        setSelectedPointIndex(pointIndex);\n        toast.info(`🔺 Point ${pointIndex + 1} selected. Drag to move or right-click to delete.`);\n        return;\n      }\n\n      // Check if clicking on an edge to insert a point\n      const edgeIndex = findEdgeAtPosition(polygonPoints, snappedCoords);\n      if (edgeIndex >= 0) {\n        const newPoints = [...polygonPoints];\n        newPoints.splice(edgeIndex + 1, 0, snappedCoords);\n        setPolygonPoints(newPoints);\n        setSelectedPointIndex(edgeIndex + 1);\n        addPointToHistory('insertPoint', {\n          previousPoints: polygonPoints,\n          newPoints: newPoints,\n          insertIndex: edgeIndex + 1\n        });\n        toast.success(`🔺 Point inserted at position ${edgeIndex + 2}`);\n        return;\n      }\n    }\n\n    // Check if clicking near the first point to close polygon\n    if (polygonPoints.length > 2) {\n      const firstPoint = polygonPoints[0];\n      const distance = getPointDistance(snappedCoords, firstPoint);\n      if (distance < 15) {\n        // Close polygon\n        console.log('✅ Closing polygon with', polygonPoints.length, 'points');\n        completePolygon();\n        return;\n      }\n    }\n\n    // Add new point to polygon\n    const newPoints = [...polygonPoints, snappedCoords];\n    setPolygonPoints(newPoints);\n    setIsDrawing(true);\n    addPointToHistory('addPoint', {\n      previousPoints: polygonPoints,\n      newPoints: newPoints\n    });\n    console.log('➕ Added polygon point:', newPoints.length, 'total points');\n\n    // Provide better user feedback based on polygon progress\n    if (newPoints.length === 1) {\n      toast.info('🔺 First point added! Click to add more points.');\n    } else if (newPoints.length === 2) {\n      toast.info('🔺 Second point added! Add one more point, then click near first point to close.');\n    } else {\n      toast.info(`🔺 Point ${newPoints.length} added. Click near first point to close or press Enter.`);\n    }\n  };\n  const handleRectangleStart = (displayCoords, naturalCoords) => {\n    // Start drawing new rectangle zone with display coordinates for preview\n    console.log('📦 Starting rectangle zone drawing:', {\n      display: displayCoords,\n      natural: naturalCoords\n    });\n    setIsDrawing(true);\n    setCurrentZone({\n      id: `zone_${Date.now()}`,\n      type: selectedZoneType,\n      points: [displayCoords],\n      // Use display coordinates for preview\n      isComplete: false,\n      isPreview: true,\n      shape: 'rectangle'\n    });\n  };\n  const completePolygon = () => {\n    if (polygonPoints.length < 3) {\n      toast.error('Polygon must have at least 3 points');\n      return;\n    }\n\n    // Convert display coordinates to natural coordinates for storage\n    const naturalPoints = polygonPoints.map(point => {\n      const canvas = canvasRef.current;\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = frameWidth / canvas.width;\n      const scaleY = frameHeight / canvas.height;\n      return {\n        x: point.x * scaleX,\n        y: point.y * scaleY\n      };\n    });\n    if (editingPolygon) {\n      // Update existing polygon\n      const updatedZones = zones.map(zone => zone.id === editingPolygon.id ? {\n        ...zone,\n        points: naturalPoints\n      } : zone);\n      setZones(updatedZones);\n      onZonesUpdate(updatedZones);\n      addPointToHistory('updatePolygon', {\n        zoneId: editingPolygon.id,\n        previousPoints: editingPolygon.points,\n        newPoints: naturalPoints\n      });\n      toast.success(`✏️ ${editingPolygon.name} updated successfully!`);\n      setEditingPolygon(null);\n    } else {\n      // Create new polygon\n      const newZone = {\n        id: `zone_${Date.now()}`,\n        type: selectedZoneType,\n        shape: 'polygon',\n        points: naturalPoints,\n        isComplete: true,\n        isPreview: false,\n        name: `${zoneTypes[selectedZoneType].name} ${zones.length + 1}`,\n        requiresScooper: zoneTypes[selectedZoneType].requiresScooper\n      };\n      const newZones = [...zones, newZone];\n      setZones(newZones);\n      onZonesUpdate(newZones);\n      addPointToHistory('createPolygon', {\n        zone: newZone\n      });\n      toast.success(`${zoneTypes[selectedZoneType].name} polygon zone created!`);\n    }\n\n    // Reset polygon drawing state\n    setPolygonPoints([]);\n    setIsDrawing(false);\n    setPreviewPoint(null);\n    setSelectedPointIndex(-1);\n    setHoveredPointIndex(-1);\n    setHoveredEdgeIndex(-1);\n    drawZones(); // Redraw with the updated zones\n  };\n  const handleMouseMove = event => {\n    if (!isEnabled) return;\n    event.preventDefault();\n\n    // Get display coordinates for preview\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    const displayCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n    const snappedCoords = snapToGridIfEnabled(displayCoords);\n    if (drawingMode === 'polygon') {\n      // Handle point dragging\n      if (isDraggingPoint && selectedPointIndex >= 0) {\n        const newPoints = [...polygonPoints];\n        newPoints[selectedPointIndex] = {\n          x: snappedCoords.x - dragOffset.x,\n          y: snappedCoords.y - dragOffset.y\n        };\n        setPolygonPoints(newPoints);\n        drawZones();\n        return;\n      }\n\n      // Update hover states for better UX\n      if (polygonPoints.length > 0) {\n        const hoveredPoint = findPointAtPosition(polygonPoints, snappedCoords);\n        const hoveredEdge = findEdgeAtPosition(polygonPoints, snappedCoords);\n        setHoveredPointIndex(hoveredPoint);\n        setHoveredEdgeIndex(hoveredEdge);\n\n        // Change cursor based on what's being hovered\n        if (hoveredPoint >= 0) {\n          canvas.style.cursor = 'pointer';\n        } else if (hoveredEdge >= 0) {\n          canvas.style.cursor = 'crosshair';\n        } else {\n          canvas.style.cursor = 'default';\n        }\n      }\n      if (isDrawing && polygonPoints.length > 0) {\n        // Update preview point for polygon\n        setPreviewPoint(snappedCoords);\n        // Redraw to show polygon preview with current mouse position\n        drawZones();\n      }\n    } else if (drawingMode === 'rectangle' && isDrawing && currentZone) {\n      // Update current zone with display coordinates for rectangle preview\n      if (currentZone.points.length === 1) {\n        const updatedZone = {\n          ...currentZone,\n          points: [currentZone.points[0], snappedCoords],\n          isPreview: true // Mark as preview\n        };\n        setCurrentZone(updatedZone);\n        console.log('🖱️ Mouse move - updating preview:', {\n          start: currentZone.points[0],\n          current: snappedCoords\n        });\n        drawZones([...zones, updatedZone]);\n      }\n    }\n  };\n  const handleMouseUp = event => {\n    // Handle polygon point dragging completion\n    if (isDraggingPoint && selectedPointIndex >= 0) {\n      setIsDraggingPoint(false);\n      addPointToHistory('endDrag', {\n        pointIndex: selectedPointIndex,\n        newPosition: polygonPoints[selectedPointIndex]\n      });\n      toast.success(`🔺 Point ${selectedPointIndex + 1} moved successfully`);\n      return;\n    }\n    if (!isDrawing || !currentZone) return;\n    console.log('🖱️ Mouse up event triggered');\n    event.preventDefault();\n\n    // Get display coordinates for the end point\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    const displayEndCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n\n    // Convert both start and end points from display to natural coordinates for storage\n    const backgroundImg = document.getElementById('roi-background-image');\n    let naturalStartCoords = currentZone.points[0];\n    let naturalEndCoords = displayEndCoords;\n    if (backgroundImg) {\n      const naturalWidth = backgroundImg.naturalWidth || frameWidth;\n      const naturalHeight = backgroundImg.naturalHeight || frameHeight;\n      const displayWidth = canvas.width;\n      const displayHeight = canvas.height;\n      const naturalScaleX = naturalWidth / displayWidth;\n      const naturalScaleY = naturalHeight / displayHeight;\n      naturalStartCoords = {\n        x: currentZone.points[0].x * naturalScaleX,\n        y: currentZone.points[0].y * naturalScaleY\n      };\n      naturalEndCoords = {\n        x: displayEndCoords.x * naturalScaleX,\n        y: displayEndCoords.y * naturalScaleY\n      };\n    }\n\n    // Complete rectangle zone with natural coordinates\n    if (currentZone.points.length >= 1) {\n      const newZone = {\n        ...currentZone,\n        points: [naturalStartCoords, naturalEndCoords],\n        // Store in natural coordinates\n        isComplete: true,\n        isPreview: false,\n        name: `${zoneTypes[selectedZoneType].name} ${zones.length + 1}`,\n        requiresScooper: zoneTypes[selectedZoneType].requiresScooper\n      };\n      console.log('✅ Zone created:', {\n        display: {\n          start: currentZone.points[0],\n          end: displayEndCoords\n        },\n        natural: {\n          start: naturalStartCoords,\n          end: naturalEndCoords\n        },\n        zone: newZone\n      });\n      const newZones = [...zones, newZone];\n      setZones(newZones);\n      onZonesUpdate(newZones);\n      toast.success(`${zoneTypes[selectedZoneType].name} zone created!`);\n    }\n    setIsDrawing(false);\n    setCurrentZone(null);\n    drawZones(); // Redraw with the new zone\n  };\n  const deleteZone = zoneId => {\n    setZones(zones.filter(zone => zone.id !== zoneId));\n    setEditingZone(null);\n    toast.info('Zone deleted');\n  };\n  const clearAllZones = () => {\n    setZones([]);\n    setEditingZone(null);\n    toast.info('All zones cleared');\n  };\n  const exportZones = () => {\n    const exportData = {\n      zones: zones.map(zone => ({\n        ...zone,\n        // Convert to relative coordinates (0-1)\n        points: zone.points.map(p => ({\n          x: p.x / frameWidth,\n          y: p.y / frameHeight\n        }))\n      })),\n      frameSize: {\n        width: frameWidth,\n        height: frameHeight\n      },\n      exportedAt: new Date().toISOString()\n    };\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `roi_zones_${Date.now()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n    toast.success('Zones exported successfully!');\n  }; // exportZones function closing\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%'\n    },\n    children: [isEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '16px',\n        padding: '16px',\n        background: 'rgba(255,255,255,0.1)',\n        borderRadius: '8px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          margin: '0 0 12px 0',\n          color: '#fff'\n        },\n        children: \"\\uD83C\\uDFAF ROI Zone Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '12px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: 'block',\n            marginBottom: '6px',\n            fontWeight: 'bold'\n          },\n          children: \"Zone Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedZoneType,\n          onChange: e => setSelectedZoneType(e.target.value),\n          style: {\n            padding: '8px',\n            borderRadius: '6px',\n            border: '1px solid rgba(255,255,255,0.3)',\n            background: 'rgba(255,255,255,0.1)',\n            color: 'white',\n            width: '200px'\n          },\n          children: Object.entries(zoneTypes).map(([key, config]) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: key,\n            style: {\n              background: '#333',\n              color: 'white'\n            },\n            children: [config.icon, \" \", config.name]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1179,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1166,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '12px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: 'block',\n            marginBottom: '6px',\n            fontWeight: 'bold'\n          },\n          children: \"Drawing Mode:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '8px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setDrawingMode('rectangle'),\n            style: {\n              padding: '8px 12px',\n              borderRadius: '6px',\n              border: drawingMode === 'rectangle' ? '2px solid #00FF88' : '1px solid rgba(255,255,255,0.3)',\n              background: drawingMode === 'rectangle' ? 'rgba(0,255,136,0.2)' : 'rgba(255,255,255,0.1)',\n              color: drawingMode === 'rectangle' ? '#00FF88' : '#fff',\n              cursor: 'pointer',\n              fontSize: '12px'\n            },\n            children: \"\\uD83D\\uDCE6 Rectangle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1192,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setDrawingMode('polygon'),\n            style: {\n              padding: '8px 12px',\n              borderRadius: '6px',\n              border: drawingMode === 'polygon' ? '2px solid #FF6B35' : '1px solid rgba(255,255,255,0.3)',\n              background: drawingMode === 'polygon' ? 'rgba(255,107,53,0.2)' : 'rgba(255,255,255,0.1)',\n              color: drawingMode === 'polygon' ? '#FF6B35' : '#fff',\n              cursor: 'pointer',\n              fontSize: '12px'\n            },\n            children: \"\\uD83D\\uDD3A Polygon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1206,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '11px',\n            color: '#ccc',\n            marginTop: '4px'\n          },\n          children: drawingMode === 'rectangle' ? '📦 Click and drag to create rectangular zones' : '🔺 Professional polygon editor • Drag points • Insert on edges • Right-click options'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1221,\n          columnNumber: 11\n        }, this), drawingMode === 'polygon' && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '8px',\n            padding: '8px',\n            background: 'rgba(255,107,53,0.1)',\n            borderRadius: '6px',\n            border: '1px solid rgba(255,107,53,0.3)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              gap: '8px',\n              marginBottom: '6px',\n              flexWrap: 'wrap'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSnapToGrid(!snapToGrid),\n              style: {\n                padding: '4px 8px',\n                background: snapToGrid ? '#FF6B35' : 'rgba(255,255,255,0.1)',\n                color: snapToGrid ? '#fff' : '#ccc',\n                border: '1px solid rgba(255,255,255,0.3)',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                fontSize: '10px'\n              },\n              children: \"\\uD83D\\uDD32 Grid Snap\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1238,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: undo,\n              disabled: undoStack.length === 0,\n              style: {\n                padding: '4px 8px',\n                background: undoStack.length > 0 ? '#4CAF50' : 'rgba(255,255,255,0.1)',\n                color: undoStack.length > 0 ? '#fff' : '#666',\n                border: '1px solid rgba(255,255,255,0.3)',\n                borderRadius: '4px',\n                cursor: undoStack.length > 0 ? 'pointer' : 'not-allowed',\n                fontSize: '10px'\n              },\n              children: \"\\u21B6 Undo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1253,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: redo,\n              disabled: redoStack.length === 0,\n              style: {\n                padding: '4px 8px',\n                background: redoStack.length > 0 ? '#4CAF50' : 'rgba(255,255,255,0.1)',\n                color: redoStack.length > 0 ? '#fff' : '#666',\n                border: '1px solid rgba(255,255,255,0.3)',\n                borderRadius: '4px',\n                cursor: redoStack.length > 0 ? 'pointer' : 'not-allowed',\n                fontSize: '10px'\n              },\n              children: \"\\u21B7 Redo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1269,\n              columnNumber: 17\n            }, this), snapToGrid && /*#__PURE__*/_jsxDEV(\"select\", {\n              value: gridSize,\n              onChange: e => setGridSize(parseInt(e.target.value)),\n              style: {\n                padding: '4px',\n                background: 'rgba(255,255,255,0.1)',\n                color: '#fff',\n                border: '1px solid rgba(255,255,255,0.3)',\n                borderRadius: '4px',\n                fontSize: '10px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: 10,\n                children: \"Grid: 10px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1298,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 20,\n                children: \"Grid: 20px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1299,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 30,\n                children: \"Grid: 30px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1300,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 50,\n                children: \"Grid: 50px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1301,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1286,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1237,\n            columnNumber: 15\n          }, this), selectedPointIndex >= 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '10px',\n              color: '#FF6B35'\n            },\n            children: [\"\\uD83C\\uDFAF Point \", selectedPointIndex + 1, \" selected \\u2022 Drag to move \\u2022 Right-click to delete\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1307,\n            columnNumber: 17\n          }, this), editingPolygon && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '10px',\n              color: '#00FF88'\n            },\n            children: [\"\\u270F\\uFE0F Editing: \", editingPolygon.name, \" \\u2022 Click edges to insert points\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1313,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1230,\n          columnNumber: 13\n        }, this), ((_zoneTypes$selectedZo = zoneTypes[selectedZoneType]) === null || _zoneTypes$selectedZo === void 0 ? void 0 : _zoneTypes$selectedZo.preferredShape) && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '11px',\n            color: zoneTypes[selectedZoneType].preferredShape === 'polygon' ? '#FF6B35' : '#FFD23F',\n            marginTop: '2px',\n            fontStyle: 'italic'\n          },\n          children: [\"\\uD83D\\uDCA1 Recommended: \", zoneTypes[selectedZoneType].preferredShape, \" for \", zoneTypes[selectedZoneType].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1321,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '8px 12px',\n          background: isEnabled ? 'rgba(0,255,136,0.2)' : 'rgba(255,255,255,0.1)',\n          borderRadius: '6px',\n          marginBottom: '12px',\n          border: `2px solid ${isEnabled ? '#00FF88' : 'rgba(255,255,255,0.3)'}`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: isEnabled ? '#00FF88' : '#fff'\n          },\n          children: isEnabled ? drawingMode === 'polygon' ? `🔺 Polygon Mode: ACTIVE ${polygonPoints.length > 0 ? `(${polygonPoints.length} points)` : '- Click to start'}` : '📦 Rectangle Mode: ACTIVE - Click and drag to create zones' : '🔒 Drawing Mode: DISABLED'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1340,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '12px',\n            marginTop: '4px',\n            opacity: 0.8\n          },\n          children: [\"Debug: isEnabled=\", isEnabled.toString(), \", currentFrame=\", !!currentFrame ? 'available' : 'none', \", frameSize=\", frameWidth, \"x\", frameHeight]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1349,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1333,\n        columnNumber: 9\n      }, this), drawingMode === 'polygon' && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '8px 12px',\n          background: 'rgba(255,107,53,0.2)',\n          borderRadius: '6px',\n          marginBottom: '12px',\n          border: '2px solid #FF6B35'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: '#FF6B35',\n            fontWeight: 'bold',\n            marginBottom: '8px'\n          },\n          children: \"\\uD83D\\uDD3A Polygon Drawing Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1364,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '12px',\n            color: '#fff',\n            marginBottom: '8px'\n          },\n          children: [polygonPoints.length === 0 && 'Click to start drawing polygon', polygonPoints.length > 0 && polygonPoints.length < 3 && `${polygonPoints.length} points added. Need ${3 - polygonPoints.length} more.`, polygonPoints.length >= 3 && `${polygonPoints.length} points. Click near first point to close polygon.`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1367,\n          columnNumber: 13\n        }, this), polygonPoints.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '6px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (polygonPoints.length > 0) {\n                const newPoints = polygonPoints.slice(0, -1);\n                setPolygonPoints(newPoints);\n                if (newPoints.length === 0) {\n                  setIsDrawing(false);\n                  setPreviewPoint(null);\n                }\n                toast.info('Last point removed');\n              }\n            },\n            style: {\n              padding: '4px 8px',\n              background: '#FF9800',\n              color: '#fff',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              fontSize: '11px'\n            },\n            children: \"\\u21B6 Undo Point\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1376,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setPolygonPoints([]);\n              setIsDrawing(false);\n              setPreviewPoint(null);\n              toast.info('Polygon cleared');\n            },\n            style: {\n              padding: '4px 8px',\n              background: '#f44336',\n              color: '#fff',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              fontSize: '11px'\n            },\n            children: \"\\uD83D\\uDDD1\\uFE0F Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1400,\n            columnNumber: 17\n          }, this), polygonPoints.length >= 3 && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: completePolygon,\n            style: {\n              padding: '4px 8px',\n              background: '#4CAF50',\n              color: '#fff',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              fontSize: '11px'\n            },\n            children: \"\\u2705 Complete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1420,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1375,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1357,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '8px',\n          flexWrap: 'wrap',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: () => setShowZones(!showZones),\n          children: showZones ? '👁️ Hide Zones' : '👁️‍🗨️ Show Zones'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1442,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-warning\",\n          onClick: clearAllZones,\n          disabled: zones.length === 0,\n          children: \"\\uD83D\\uDDD1\\uFE0F Clear All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1449,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: exportZones,\n          disabled: zones.length === 0,\n          children: \"\\uD83D\\uDCE5 Export Zones\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1457,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-info\",\n          onClick: () => {\n            // Add a test zone to verify functionality\n            const testZone = {\n              id: `test_zone_${Date.now()}`,\n              type: selectedZoneType,\n              points: [{\n                x: 50,\n                y: 50\n              }, {\n                x: 200,\n                y: 150\n              }],\n              isComplete: true,\n              name: `Test ${zoneTypes[selectedZoneType].name}`,\n              requiresScooper: zoneTypes[selectedZoneType].requiresScooper\n            };\n            setZones([...zones, testZone]);\n            toast.success('Test zone added!');\n          },\n          children: \"\\uD83E\\uDDEA Add Test Zone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1465,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            marginLeft: '16px',\n            fontSize: '14px',\n            opacity: 0.8\n          },\n          children: [\"Zones: \", zones.length, \" | \", isEnabled ? 'Click and drag to create zones' : 'Enable drawing to create zones']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1487,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1441,\n        columnNumber: 9\n      }, this), isEnabled && zones.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '12px',\n          background: 'rgba(255,210,63,0.2)',\n          borderRadius: '6px',\n          marginTop: '8px',\n          border: '2px dashed #FFD23F'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: '#FFD23F',\n            fontWeight: 'bold',\n            marginBottom: '4px'\n          },\n          children: \"\\uD83D\\uDCDD How to Draw Zones:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1501,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '14px',\n            opacity: 0.9\n          },\n          children: [\"1. Select zone type above (e.g., \\\"\\uD83C\\uDF45 Sauce Area\\\")\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1505,\n            columnNumber: 64\n          }, this), \"2. Click and hold on the video to start drawing\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1506,\n            columnNumber: 62\n          }, this), \"3. Drag to create a rectangle\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1507,\n            columnNumber: 44\n          }, this), \"4. Release to complete the zone\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1504,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1494,\n        columnNumber: 11\n      }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '8px 12px',\n          background: 'rgba(0,212,255,0.3)',\n          borderRadius: '6px',\n          marginTop: '8px',\n          textAlign: 'center',\n          border: '2px solid #00D4FF'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: '#00D4FF',\n            fontWeight: 'bold'\n          },\n          children: \"\\uD83C\\uDFA8 Drawing in progress... Drag to set zone size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1522,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1514,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        display: 'inline-block',\n        width: '100%',\n        maxWidth: '100%',\n        background: '#000',\n        borderRadius: '8px',\n        overflow: 'hidden'\n      },\n      children: [currentFrame ? /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"roi-background-image\",\n        src: `data:image/jpeg;base64,${currentFrame}`,\n        alt: \"Video frame for zone configuration\",\n        style: {\n          width: '100%',\n          height: 'auto',\n          display: 'block',\n          borderRadius: '8px'\n        },\n        onLoad: e => {\n          console.log('🎯 ROI Manager: Video frame loaded');\n          const img = e.target;\n          const rect = img.getBoundingClientRect();\n          console.log('📐 Image dimensions:', {\n            natural: `${img.naturalWidth}x${img.naturalHeight}`,\n            display: `${rect.width}x${rect.height}`\n          });\n\n          // Update canvas size to match image\n          const canvas = canvasRef.current;\n          if (canvas) {\n            canvas.width = rect.width;\n            canvas.height = rect.height;\n            canvas.style.width = rect.width + 'px';\n            canvas.style.height = rect.height + 'px';\n            console.log('🎨 Canvas resized to match image:', `${rect.width}x${rect.height}`);\n            console.log('🔧 FRAME SIZE FIX: Using actual image size instead of props');\n          }\n\n          // Test polygon drawing immediately\n          setTimeout(() => {\n            drawZones();\n\n            // Force test polygon drawing\n            const canvas = canvasRef.current;\n            if (canvas && drawingMode === 'polygon') {\n              const ctx = canvas.getContext('2d');\n              console.log('🧪 FORCE TEST: Drawing test polygon on canvas');\n\n              // Draw a test polygon in the center\n              const centerX = canvas.width / 2;\n              const centerY = canvas.height / 2;\n              const testPoints = [{\n                x: centerX - 50,\n                y: centerY - 50\n              }, {\n                x: centerX + 50,\n                y: centerY - 50\n              }, {\n                x: centerX + 50,\n                y: centerY + 50\n              }, {\n                x: centerX - 50,\n                y: centerY + 50\n              }];\n              ctx.save();\n              ctx.strokeStyle = '#FF6B35';\n              ctx.fillStyle = 'rgba(255, 107, 53, 0.2)';\n              ctx.lineWidth = 3;\n              ctx.beginPath();\n              ctx.moveTo(testPoints[0].x, testPoints[0].y);\n              for (let i = 1; i < testPoints.length; i++) {\n                ctx.lineTo(testPoints[i].x, testPoints[i].y);\n              }\n              ctx.closePath();\n              ctx.fill();\n              ctx.stroke();\n\n              // Draw test points\n              testPoints.forEach((point, index) => {\n                ctx.beginPath();\n                ctx.arc(point.x, point.y, 6, 0, 2 * Math.PI);\n                ctx.fillStyle = '#FF6B35';\n                ctx.fill();\n                ctx.strokeStyle = '#fff';\n                ctx.lineWidth = 2;\n                ctx.stroke();\n\n                // Draw point number\n                ctx.fillStyle = '#fff';\n                ctx.font = '12px Arial';\n                ctx.textAlign = 'center';\n                ctx.fillText((index + 1).toString(), point.x, point.y + 4);\n              });\n              ctx.restore();\n              console.log('🧪 FORCE TEST: Test polygon drawn on canvas');\n            }\n          }, 100);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1542,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"roi-background-placeholder\",\n        style: {\n          width: '100%',\n          height: '360px',\n          background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          borderRadius: '8px',\n          border: '2px dashed rgba(255,255,255,0.3)',\n          color: '#ccc',\n          fontSize: '16px',\n          textAlign: 'center',\n          flexDirection: 'column',\n          gap: '12px',\n          position: 'relative'\n        },\n        onClick: e => {\n          // Allow polygon drawing on placeholder for testing\n          if (isEnabled && drawingMode === 'polygon') {\n            const rect = e.currentTarget.getBoundingClientRect();\n            const displayCoords = {\n              x: e.clientX - rect.left,\n              y: e.clientY - rect.top\n            };\n            const naturalCoords = {\n              x: displayCoords.x / rect.width * frameWidth,\n              y: displayCoords.y / rect.height * frameHeight\n            };\n            console.log('🔺 Placeholder click for polygon test:', {\n              displayCoords,\n              naturalCoords\n            });\n            handlePolygonClick(displayCoords, naturalCoords);\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '48px'\n          },\n          children: \"\\uD83C\\uDFA5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1665,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Start Video Processing First\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1666,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '12px',\n            opacity: 0.7\n          },\n          children: \"Upload and start processing a video to configure ROI zones\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1667,\n          columnNumber: 13\n        }, this), drawingMode === 'polygon' && isEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '11px',\n            color: '#FF6B35',\n            marginTop: '8px',\n            fontStyle: 'italic'\n          },\n          children: \"\\uD83D\\uDD3A Click here to test polygon drawing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1671,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1630,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          cursor: isEnabled ? 'crosshair' : 'default',\n          pointerEvents: isEnabled ? 'auto' : 'none',\n          zIndex: 20,\n          borderRadius: '8px'\n        },\n        onMouseDown: handleMouseDown,\n        onMouseMove: handleMouseMove,\n        onMouseUp: handleMouseUp,\n        onContextMenu: e => {\n          e.preventDefault();\n          if (drawingMode === 'polygon') {\n            // Get mouse position for context-sensitive actions\n            const canvas = canvasRef.current;\n            const rect = canvas.getBoundingClientRect();\n            const scaleX = canvas.width / rect.width;\n            const scaleY = canvas.height / rect.height;\n            const displayCoords = {\n              x: (e.clientX - rect.left) * scaleX,\n              y: (e.clientY - rect.top) * scaleY\n            };\n            const snappedCoords = snapToGridIfEnabled(displayCoords);\n\n            // Check if right-clicking on a specific point\n            const pointIndex = findPointAtPosition(polygonPoints, snappedCoords);\n            if (pointIndex >= 0 && polygonPoints.length > 3) {\n              // Delete specific point\n              const newPoints = polygonPoints.filter((_, index) => index !== pointIndex);\n              setPolygonPoints(newPoints);\n              setSelectedPointIndex(-1);\n              addPointToHistory('deletePoint', {\n                deletedPoint: polygonPoints[pointIndex],\n                deletedIndex: pointIndex,\n                previousPoints: polygonPoints\n              });\n              toast.success(`🔺 Point ${pointIndex + 1} deleted`);\n            } else if (polygonPoints.length >= 3) {\n              // Complete polygon\n              completePolygon();\n              toast.success('🔺 Polygon completed with right-click!');\n            } else if (polygonPoints.length > 0) {\n              // Remove last point\n              const newPoints = polygonPoints.slice(0, -1);\n              setPolygonPoints(newPoints);\n              if (newPoints.length === 0) {\n                setIsDrawing(false);\n                setPreviewPoint(null);\n                setEditingPolygon(null);\n              }\n              addPointToHistory('removeLastPoint', {\n                removedPoint: polygonPoints[polygonPoints.length - 1],\n                previousPoints: polygonPoints\n              });\n              toast.info('🔺 Last point removed');\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1684,\n        columnNumber: 9\n      }, this), !currentFrame && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          height: '300px',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          background: 'rgba(255,255,255,0.1)',\n          color: 'rgba(255,255,255,0.6)'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '48px',\n              marginBottom: '16px'\n            },\n            children: \"\\uD83C\\uDFA5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1767,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Video frame will appear here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1768,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1766,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1757,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1531,\n      columnNumber: 7\n    }, this), isEnabled && zones.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '16px',\n        padding: '16px',\n        background: 'rgba(255,255,255,0.05)',\n        borderRadius: '8px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          margin: '0 0 12px 0'\n        },\n        children: [\"\\uD83D\\uDCCB Active Zones (\", zones.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1782,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxHeight: '200px',\n          overflowY: 'auto'\n        },\n        children: zones.map((zone, index) => {\n          const config = zoneTypes[zone.type];\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              padding: '8px 12px',\n              marginBottom: '8px',\n              background: (editingZone === null || editingZone === void 0 ? void 0 : editingZone.id) === zone.id ? 'rgba(255,255,255,0.2)' : 'rgba(255,255,255,0.1)',\n              borderRadius: '6px',\n              border: `2px solid ${config.color}`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [config.icon, \" \", zone.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1801,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1802,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                style: {\n                  opacity: 0.8\n                },\n                children: [config.description, \" | Scooper: \", zone.requiresScooper ? '🥄 Required' : '🚫 Not Required']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1803,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1800,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteZone(zone.id),\n              style: {\n                background: '#FF4757',\n                border: 'none',\n                borderRadius: '4px',\n                padding: '4px 8px',\n                color: 'white',\n                cursor: 'pointer',\n                fontSize: '12px'\n              },\n              children: \"\\uD83D\\uDDD1\\uFE0F Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1807,\n              columnNumber: 19\n            }, this)]\n          }, zone.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1787,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1783,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1776,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1150,\n    columnNumber: 5\n  }, this);\n}; // Main component closing brace\n_s(ROIZoneManager, \"GhQpDYV5m3oocucPvLEycrlrlw4=\");\n_c = ROIZoneManager;\nexport default ROIZoneManager;\nvar _c;\n$RefreshReg$(_c, \"ROIZoneManager\");","map":{"version":3,"names":["React","useState","useRef","useEffect","toast","jsxDEV","_jsxDEV","ROIZoneManager","currentFrame","onZonesUpdate","existingZones","isEnabled","frameWidth","frameHeight","_s","_zoneTypes$selectedZo","canvasRef","zones","setZones","isDrawing","setIsDrawing","currentZone","setCurrentZone","selectedZoneType","setSelectedZoneType","editingZone","setEditingZone","showZones","setShowZones","drawingMode","setDrawingMode","polygonPoints","setPolygonPoints","previewPoint","setPreviewPoint","editingPolygon","setEditingPolygon","selectedPointIndex","setSelectedPointIndex","hoveredPointIndex","setHoveredPointIndex","hoveredEdgeIndex","setHoveredEdgeIndex","isDraggingPoint","setIsDraggingPoint","dragOffset","setDragOffset","x","y","snapToGrid","setSnapToGrid","gridSize","setGridSize","undoStack","setUndoStack","redoStack","setRedoStack","zoneTypes","sauce_area","name","color","fillColor","requiresScooper","icon","description","preferredShape","cheese_area","meat_area","vegetable_area","prep_surface","cleaning_area","findZoneAtPoint","find","zone","shape","points","length","isPointInPolygon","p1","p2","inZone","Math","min","max","console","log","point","snapToGridIfEnabled","round","getPointDistance","sqrt","pow","findPointAtPosition","position","threshold","i","findEdgeAtPosition","distanceToEdge","distancePointToLine","lineStart","lineEnd","A","B","C","D","dot","lenSq","param","xx","yy","addPointToHistory","action","data","historyEntry","JSON","parse","stringify","timestamp","Date","now","prev","slice","polygon","inside","j","undo","lastAction","previousPoints","info","redo","actionToRedo","drawZones","zonesToDraw","canvas","current","ctx","getContext","backgroundImg","document","getElementById","displayWidth","displayHeight","naturalWidth","naturalHeight","rect","getBoundingClientRect","width","height","style","scaleX","scaleY","canvasSize","frameSize","naturalSize","displaySize","scale","toFixed","clearRect","forEach","index","zoneConfig","type","drawPolygonZone","drawRectangleZone","drawPolygonPreview","strokeStyle","lineWidth","setLineDash","strokeRect","abs","isPreviewZone","isPreview","scaledPoints","map","save","fillStyle","beginPath","moveTo","lineTo","closePath","fill","stroke","arc","PI","centerX","reduce","sum","p","centerY","font","textAlign","fillText","restore","drawGrid","edgeStart","edgeEnd","isFirstPoint","isSelected","isHovered","radius","strokeColor","strokeWidth","toString","x1","y1","x2","y2","startX","startY","fillRect","labelX","labelY","reqText","handleKeyPress","event","key","preventDefault","completePolygon","success","window","addEventListener","removeEventListener","actualSize","natural","display","clientWidth","clientHeight","setTimeout","testCoords","handlePolygonClick","currentFrameType","currentFrameLength","substring","getCanvasCoordinates","displayCoords","clientX","left","clientY","top","naturalCoords","naturalScaleX","naturalScaleY","client","frame","handleMouseDown","snappedCoords","pointIndex","originalPosition","clickedZone","displayPoints","handleRectangleStart","currentPoints","edgeIndex","newPoints","splice","insertIndex","firstPoint","distance","id","isComplete","error","naturalPoints","updatedZones","zoneId","newZone","newZones","handleMouseMove","hoveredPoint","hoveredEdge","cursor","updatedZone","start","handleMouseUp","newPosition","displayEndCoords","naturalStartCoords","naturalEndCoords","end","deleteZone","filter","clearAllZones","exportZones","exportData","exportedAt","toISOString","blob","Blob","url","URL","createObjectURL","a","createElement","href","download","click","revokeObjectURL","children","marginBottom","padding","background","borderRadius","margin","fileName","_jsxFileName","lineNumber","columnNumber","fontWeight","value","onChange","e","target","border","Object","entries","config","gap","onClick","fontSize","marginTop","flexWrap","disabled","parseInt","fontStyle","opacity","alignItems","className","testZone","marginLeft","maxWidth","overflow","src","alt","onLoad","img","testPoints","justifyContent","flexDirection","currentTarget","ref","pointerEvents","zIndex","onMouseDown","onMouseMove","onMouseUp","onContextMenu","_","deletedPoint","deletedIndex","removedPoint","maxHeight","overflowY","_c","$RefreshReg$"],"sources":["C:/Users/ayoub/OneDrive/Desktop/eagleAI/pizza_store_detection/services/frontend/src/components/ROIZoneManager.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\n\nconst ROIZoneManager = ({ \n  currentFrame, \n  onZonesUpdate, \n  existingZones = [], \n  isEnabled = true,\n  frameWidth = 640,\n  frameHeight = 480 \n}) => {\n  const canvasRef = useRef(null);\n  const [zones, setZones] = useState(existingZones);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentZone, setCurrentZone] = useState(null);\n  const [selectedZoneType, setSelectedZoneType] = useState('sauce_area');\n  const [editingZone, setEditingZone] = useState(null);\n  const [showZones, setShowZones] = useState(true);\n\n  // Professional polygon drawing states\n  const [drawingMode, setDrawingMode] = useState('polygon'); // Start with polygon for sauce areas\n  const [polygonPoints, setPolygonPoints] = useState([]);\n  const [previewPoint, setPreviewPoint] = useState(null);\n\n  // Advanced polygon editing states\n  const [editingPolygon, setEditingPolygon] = useState(null); // Which polygon is being edited\n  const [selectedPointIndex, setSelectedPointIndex] = useState(-1); // Which point is selected\n  const [hoveredPointIndex, setHoveredPointIndex] = useState(-1); // Which point is hovered\n  const [hoveredEdgeIndex, setHoveredEdgeIndex] = useState(-1); // Which edge is hovered\n  const [isDraggingPoint, setIsDraggingPoint] = useState(false); // Is dragging a point\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 }); // Drag offset for smooth dragging\n  const [snapToGrid, setSnapToGrid] = useState(false); // Grid snapping\n  const [gridSize, setGridSize] = useState(20); // Grid size for snapping\n  const [undoStack, setUndoStack] = useState([]); // Undo history\n  const [redoStack, setRedoStack] = useState([]); // Redo history\n\n  // Zone types with professional configuration\n  const zoneTypes = {\n    sauce_area: {\n      name: 'Sauce Area',\n      color: '#FF6B35',\n      fillColor: 'rgba(255, 107, 53, 0.2)',\n      requiresScooper: true,\n      icon: '🍅',\n      description: 'Sauce dispensing and handling area',\n      preferredShape: 'polygon' // Sauce areas work better with polygons\n    },\n    cheese_area: {\n      name: 'Cheese Area',\n      color: '#FFD23F',\n      fillColor: 'rgba(255, 210, 63, 0.2)',\n      requiresScooper: true,\n      icon: '🧀',\n      description: 'Cheese container and handling area',\n      preferredShape: 'rectangle' // Cheese containers are usually rectangular\n    },\n    meat_area: {\n      name: 'Meat/Protein Area',\n      color: '#FF4757',\n      fillColor: 'rgba(255, 71, 87, 0.2)',\n      requiresScooper: true,\n      icon: '🥓',\n      description: 'Meat and protein ingredient area'\n    },\n    vegetable_area: {\n      name: 'Vegetable Area',\n      color: '#2ED573',\n      fillColor: 'rgba(46, 213, 115, 0.2)',\n      requiresScooper: true,\n      icon: '🥬',\n      description: 'Vegetable and fresh ingredient area'\n    },\n    prep_surface: {\n      name: 'Prep Surface',\n      color: '#5352ED',\n      fillColor: 'rgba(83, 82, 237, 0.2)',\n      requiresScooper: false,\n      icon: '🍕',\n      description: 'Pizza preparation surface (no scooper required)'\n    },\n    cleaning_area: {\n      name: 'Cleaning Area',\n      color: '#00D2D3',\n      fillColor: 'rgba(0, 210, 211, 0.2)',\n      requiresScooper: false,\n      icon: '🧽',\n      description: 'Cleaning and sanitization area'\n    }\n  };\n\n  // Function definitions (moved to top to avoid hoisting issues)\n  const findZoneAtPoint = (x, y) => {\n    // x, y are in natural coordinates, zones are stored in natural coordinates\n    return zones.find(zone => {\n      if (zone.shape === 'polygon' && zone.points.length >= 3) {\n        return isPointInPolygon(x, y, zone.points);\n      } else if (zone.points.length === 2) {\n        const [p1, p2] = zone.points;\n        const inZone = x >= Math.min(p1.x, p2.x) && x <= Math.max(p1.x, p2.x) &&\n                      y >= Math.min(p1.y, p2.y) && y <= Math.max(p1.y, p2.y);\n\n        console.log(`🔍 Checking zone ${zone.name}:`, {\n          point: { x, y },\n          zone: { p1, p2 },\n          inZone\n        });\n\n        return inZone;\n      }\n      return false;\n    });\n  };\n\n  // Professional polygon editing utilities\n  const snapToGridIfEnabled = (point) => {\n    if (!snapToGrid) return point;\n    return {\n      x: Math.round(point.x / gridSize) * gridSize,\n      y: Math.round(point.y / gridSize) * gridSize\n    };\n  };\n\n  const getPointDistance = (p1, p2) => {\n    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n  };\n\n  const findPointAtPosition = (points, position, threshold = 8) => {\n    for (let i = 0; i < points.length; i++) {\n      if (getPointDistance(points[i], position) <= threshold) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  const findEdgeAtPosition = (points, position, threshold = 5) => {\n    for (let i = 0; i < points.length; i++) {\n      const p1 = points[i];\n      const p2 = points[(i + 1) % points.length];\n\n      const distanceToEdge = distancePointToLine(position, p1, p2);\n      if (distanceToEdge <= threshold) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  const distancePointToLine = (point, lineStart, lineEnd) => {\n    const A = point.x - lineStart.x;\n    const B = point.y - lineStart.y;\n    const C = lineEnd.x - lineStart.x;\n    const D = lineEnd.y - lineStart.y;\n\n    const dot = A * C + B * D;\n    const lenSq = C * C + D * D;\n\n    if (lenSq === 0) return getPointDistance(point, lineStart);\n\n    let param = dot / lenSq;\n    param = Math.max(0, Math.min(1, param));\n\n    const xx = lineStart.x + param * C;\n    const yy = lineStart.y + param * D;\n\n    return getPointDistance(point, { x: xx, y: yy });\n  };\n\n  const addPointToHistory = (action, data) => {\n    const historyEntry = {\n      action,\n      data: JSON.parse(JSON.stringify(data)),\n      timestamp: Date.now()\n    };\n\n    setUndoStack(prev => [...prev.slice(-19), historyEntry]); // Keep last 20 actions\n    setRedoStack([]); // Clear redo stack when new action is performed\n  };\n\n  const isPointInPolygon = (x, y, polygon) => {\n    let inside = false;\n    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n      if (((polygon[i].y > y) !== (polygon[j].y > y)) &&\n          (x < (polygon[j].x - polygon[i].x) * (y - polygon[i].y) / (polygon[j].y - polygon[i].y) + polygon[i].x)) {\n        inside = !inside;\n      }\n    }\n    return inside;\n  };\n\n  const undo = () => {\n    if (undoStack.length === 0) return;\n\n    const lastAction = undoStack[undoStack.length - 1];\n    setRedoStack(prev => [...prev, lastAction]);\n    setUndoStack(prev => prev.slice(0, -1));\n\n    // Apply undo logic based on action type\n    switch (lastAction.action) {\n      case 'addPoint':\n        setPolygonPoints(lastAction.data.previousPoints);\n        break;\n      case 'movePoint':\n        // Restore previous point position\n        break;\n      case 'deletePoint':\n        // Restore deleted point\n        break;\n    }\n\n    toast.info('↶ Undone');\n  };\n\n  const redo = () => {\n    if (redoStack.length === 0) return;\n\n    const actionToRedo = redoStack[redoStack.length - 1];\n    setUndoStack(prev => [...prev, actionToRedo]);\n    setRedoStack(prev => prev.slice(0, -1));\n\n    // Apply redo logic\n    toast.info('↷ Redone');\n  };\n\n  const drawZones = (zonesToDraw = zones) => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      // Canvas might not be ready yet, skip drawing\n      return;\n    }\n\n    const ctx = canvas.getContext('2d');\n\n    // Get the background image to match its size\n    const backgroundImg = document.getElementById('roi-background-image');\n    let displayWidth, displayHeight, naturalWidth, naturalHeight;\n\n    if (backgroundImg) {\n      const rect = backgroundImg.getBoundingClientRect();\n      displayWidth = rect.width;\n      displayHeight = rect.height;\n      naturalWidth = backgroundImg.naturalWidth || frameWidth;\n      naturalHeight = backgroundImg.naturalHeight || frameHeight;\n\n      canvas.width = displayWidth;\n      canvas.height = displayHeight;\n      canvas.style.width = displayWidth + 'px';\n      canvas.style.height = displayHeight + 'px';\n    } else {\n      // Fallback to provided dimensions\n      displayWidth = frameWidth;\n      displayHeight = frameHeight;\n      naturalWidth = frameWidth;\n      naturalHeight = frameHeight;\n      canvas.width = displayWidth;\n      canvas.height = displayHeight;\n    }\n\n    // Calculate scaling factors from natural to display size\n    const scaleX = displayWidth / naturalWidth;\n    const scaleY = displayHeight / naturalHeight;\n\n    console.log('🎨 Drawing zones on canvas:', {\n      canvasSize: `${canvas.width}x${canvas.height}`,\n      frameSize: `${frameWidth}x${frameHeight}`,\n      naturalSize: `${naturalWidth}x${naturalHeight}`,\n      displaySize: `${displayWidth}x${displayHeight}`,\n      scale: `${scaleX.toFixed(3)}x${scaleY.toFixed(3)}`,\n      zones: zonesToDraw.length,\n      backgroundImg: !!backgroundImg\n    });\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    if (!showZones) return;\n\n    // Draw each zone with proper coordinate scaling\n    zonesToDraw.forEach((zone, index) => {\n      const zoneConfig = zoneTypes[zone.type];\n\n      if (zone.shape === 'polygon' && zone.points.length >= 3) {\n        drawPolygonZone(ctx, zone, zoneConfig, scaleX, scaleY);\n      } else if (zone.points.length >= 2) {\n        drawRectangleZone(ctx, zone, zoneConfig, scaleX, scaleY);\n      }\n    });\n\n    // Draw current polygon being drawn\n    if (drawingMode === 'polygon' && polygonPoints.length > 0) {\n      console.log('🎨 Drawing polygon preview with', polygonPoints.length, 'points');\n      drawPolygonPreview(ctx, polygonPoints, previewPoint, zoneTypes[selectedZoneType]);\n    }\n\n    // Draw current zone being drawn (rectangle mode)\n    if (drawingMode === 'rectangle' && currentZone && currentZone.points.length === 2) {\n      const zoneConfig = zoneTypes[currentZone.type];\n      const [p1, p2] = currentZone.points;\n\n      ctx.strokeStyle = zoneConfig.color;\n      ctx.lineWidth = 3;\n      ctx.setLineDash([10, 5]);\n      ctx.strokeRect(\n        Math.min(p1.x, p2.x),\n        Math.min(p1.y, p2.y),\n        Math.abs(p2.x - p1.x),\n        Math.abs(p2.y - p1.y)\n      );\n    }\n  };\n\n  const drawPolygonZone = (ctx, zone, zoneConfig, scaleX, scaleY) => {\n    const isPreviewZone = zone.isPreview === true;\n\n    // Scale points from natural to display coordinates (unless it's a preview)\n    const scaledPoints = zone.points.map(point => {\n      if (isPreviewZone) {\n        return point; // Already in display coordinates\n      } else {\n        return {\n          x: point.x * scaleX,\n          y: point.y * scaleY\n        };\n      }\n    });\n\n    // Draw polygon\n    ctx.save();\n    ctx.strokeStyle = zoneConfig.color;\n    ctx.fillStyle = zoneConfig.fillColor;\n    ctx.lineWidth = isPreviewZone ? 3 : 2;\n    ctx.setLineDash(isPreviewZone ? [5, 5] : []);\n\n    ctx.beginPath();\n    ctx.moveTo(scaledPoints[0].x, scaledPoints[0].y);\n\n    for (let i = 1; i < scaledPoints.length; i++) {\n      ctx.lineTo(scaledPoints[i].x, scaledPoints[i].y);\n    }\n\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n\n    // Draw points\n    scaledPoints.forEach((point, index) => {\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, 4, 0, 2 * Math.PI);\n      ctx.fillStyle = zoneConfig.color;\n      ctx.fill();\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    });\n\n    // Draw zone label\n    const centerX = scaledPoints.reduce((sum, p) => sum + p.x, 0) / scaledPoints.length;\n    const centerY = scaledPoints.reduce((sum, p) => sum + p.y, 0) / scaledPoints.length;\n\n    ctx.fillStyle = '#fff';\n    ctx.font = 'bold 12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(`${zoneConfig.icon} ${zone.name}`, centerX, centerY);\n\n    ctx.restore();\n  };\n\n  const drawPolygonPreview = (ctx, points, previewPoint, zoneConfig) => {\n    console.log('🔺 drawPolygonPreview called with', points.length, 'points', points);\n    if (points.length === 0) return;\n\n    ctx.save();\n\n    // Draw grid if enabled\n    if (snapToGrid) {\n      drawGrid(ctx);\n    }\n\n    ctx.strokeStyle = zoneConfig.color;\n    ctx.lineWidth = 3;\n    ctx.setLineDash([5, 5]);\n\n    // Draw lines between points\n    ctx.beginPath();\n    ctx.moveTo(points[0].x, points[0].y);\n\n    for (let i = 1; i < points.length; i++) {\n      ctx.lineTo(points[i].x, points[i].y);\n    }\n\n    // Draw preview line to mouse\n    if (previewPoint) {\n      ctx.lineTo(previewPoint.x, previewPoint.y);\n\n      // Highlight edge if hovering over it for point insertion\n      if (hoveredEdgeIndex >= 0) {\n        ctx.strokeStyle = '#FFD700';\n        ctx.lineWidth = 5;\n        ctx.setLineDash([]);\n\n        const edgeStart = points[hoveredEdgeIndex];\n        const edgeEnd = points[(hoveredEdgeIndex + 1) % points.length];\n\n        ctx.beginPath();\n        ctx.moveTo(edgeStart.x, edgeStart.y);\n        ctx.lineTo(edgeEnd.x, edgeEnd.y);\n        ctx.stroke();\n\n        // Reset style\n        ctx.strokeStyle = zoneConfig.color;\n        ctx.lineWidth = 3;\n        ctx.setLineDash([5, 5]);\n      }\n    }\n\n    ctx.stroke();\n\n    // Draw points with professional styling\n    points.forEach((point, index) => {\n      const isFirstPoint = index === 0;\n      const isSelected = index === selectedPointIndex;\n      const isHovered = index === hoveredPointIndex;\n\n      let radius = 6;\n      let fillColor = zoneConfig.color;\n      let strokeColor = '#fff';\n      let strokeWidth = 2;\n\n      if (isFirstPoint && points.length > 2) {\n        radius = 8;\n        fillColor = '#00FF88';\n        strokeWidth = 3;\n      }\n\n      if (isSelected) {\n        radius = 10;\n        fillColor = '#FF6B6B';\n        strokeWidth = 3;\n      } else if (isHovered) {\n        radius = 8;\n        fillColor = '#FFD700';\n        strokeWidth = 3;\n      }\n\n      // Draw point handle\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = fillColor;\n      ctx.fill();\n      ctx.strokeStyle = strokeColor;\n      ctx.lineWidth = strokeWidth;\n      ctx.stroke();\n\n      // Draw point number\n      ctx.fillStyle = '#fff';\n      ctx.font = isFirstPoint ? 'bold 11px Arial' : '10px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText((index + 1).toString(), point.x, point.y + 3);\n\n      // Add \"CLOSE\" text near first point when polygon can be closed\n      if (isFirstPoint && points.length > 2) {\n        ctx.fillStyle = '#00FF88';\n        ctx.font = 'bold 9px Arial';\n        ctx.fillText('CLOSE', point.x, point.y - 15);\n      }\n\n      // Show coordinates for selected point\n      if (isSelected) {\n        ctx.fillStyle = '#FF6B6B';\n        ctx.font = 'bold 10px Arial';\n        ctx.fillText(`(${Math.round(point.x)}, ${Math.round(point.y)})`, point.x, point.y - 20);\n      }\n    });\n\n    ctx.restore();\n  };\n\n  const drawGrid = (ctx) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    ctx.save();\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n\n    // Draw vertical lines\n    for (let x = 0; x < canvas.width; x += gridSize) {\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, canvas.height);\n      ctx.stroke();\n    }\n\n    // Draw horizontal lines\n    for (let y = 0; y < canvas.height; y += gridSize) {\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(canvas.width, y);\n      ctx.stroke();\n    }\n\n    ctx.restore();\n  };\n\n  const drawRectangleZone = (ctx, zone, zoneConfig, scaleX, scaleY) => {\n    const [p1, p2] = zone.points;\n\n    const isPreviewZone = zone.isPreview === true;\n\n    // Scale coordinates from natural to display (unless it's a preview)\n    let x1, y1, x2, y2;\n    if (isPreviewZone) {\n      x1 = p1.x;\n      y1 = p1.y;\n      x2 = p2.x;\n      y2 = p2.y;\n    } else {\n      x1 = p1.x * scaleX;\n      y1 = p1.y * scaleY;\n      x2 = p2.x * scaleX;\n      y2 = p2.y * scaleY;\n    }\n\n    const width = Math.abs(x2 - x1);\n    const height = Math.abs(y2 - y1);\n    const startX = Math.min(x1, x2);\n    const startY = Math.min(y1, y2);\n\n    // Draw rectangle\n    ctx.save();\n    ctx.fillStyle = zoneConfig.fillColor;\n    ctx.fillRect(startX, startY, width, height);\n\n    ctx.strokeStyle = zoneConfig.color;\n    ctx.lineWidth = isPreviewZone ? 3 : 2;\n    ctx.setLineDash(isPreviewZone ? [10, 5] : []);\n    ctx.strokeRect(startX, startY, width, height);\n\n    // Draw zone label\n    const labelX = startX + width / 2;\n    const labelY = startY + height / 2;\n\n    ctx.fillStyle = '#fff';\n    ctx.font = 'bold 14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(`${zoneConfig.icon} ${zone.name || zoneConfig.name}`, labelX, labelY);\n\n    // Draw requirement text\n    const reqText = zone.requiresScooper ? 'Scooper Required' : 'No Scooper Required';\n    ctx.font = '12px Arial';\n    ctx.fillStyle = zone.requiresScooper ? '#FF4757' : '#2ED573';\n    ctx.fillText(reqText, labelX, labelY + 18);\n\n    ctx.restore();\n  };\n\n  useEffect(() => {\n    if (onZonesUpdate) {\n      onZonesUpdate(zones);\n    }\n  }, [zones, onZonesUpdate]);\n\n  // Auto-switch drawing mode based on zone type preference\n  useEffect(() => {\n    const zoneConfig = zoneTypes[selectedZoneType];\n    if (zoneConfig && zoneConfig.preferredShape) {\n      setDrawingMode(zoneConfig.preferredShape);\n      console.log(`🎯 Auto-switched to ${zoneConfig.preferredShape} mode for ${zoneConfig.name}`);\n    }\n  }, [selectedZoneType]);\n\n  // Keyboard shortcuts for polygon drawing\n  useEffect(() => {\n    const handleKeyPress = (event) => {\n      if (!isEnabled || drawingMode !== 'polygon') return;\n\n      // Enter key to complete polygon\n      if (event.key === 'Enter' && polygonPoints.length >= 3) {\n        event.preventDefault();\n        completePolygon();\n        toast.success('🔺 Polygon completed with Enter key!');\n      }\n\n      // Escape key to cancel polygon drawing\n      if (event.key === 'Escape' && polygonPoints.length > 0) {\n        event.preventDefault();\n        setPolygonPoints([]);\n        setIsDrawing(false);\n        setPreviewPoint(null);\n        toast.info('🔺 Polygon drawing cancelled');\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isEnabled, drawingMode, polygonPoints.length]);\n\n  // Auto-test polygon drawing when frame is available\n  useEffect(() => {\n    if (currentFrame && drawingMode === 'polygon' && polygonPoints.length === 0) {\n      console.log('🧪 AUTO-TEST: Frame available, testing polygon drawing setup');\n      console.log('🧪 AUTO-TEST: Frame size from props:', `${frameWidth}x${frameHeight}`);\n\n      // Get actual frame size from background image\n      const backgroundImg = document.getElementById('roi-background-image');\n      if (backgroundImg) {\n        const actualSize = {\n          natural: `${backgroundImg.naturalWidth}x${backgroundImg.naturalHeight}`,\n          display: `${backgroundImg.clientWidth}x${backgroundImg.clientHeight}`\n        };\n        console.log('🧪 AUTO-TEST: Actual image size:', actualSize);\n\n        // Test canvas setup\n        const canvas = canvasRef.current;\n        if (canvas) {\n          console.log('🧪 AUTO-TEST: Canvas size:', `${canvas.width}x${canvas.height}`);\n          console.log('🧪 AUTO-TEST: Canvas style:', `${canvas.style.width}x${canvas.style.height}`);\n        } else {\n          console.log('🧪 AUTO-TEST: ❌ No canvas reference');\n        }\n\n        // Simulate a test click in the center\n        setTimeout(() => {\n          const testCoords = {\n            display: { x: backgroundImg.clientWidth / 2, y: backgroundImg.clientHeight / 2 },\n            natural: { x: backgroundImg.naturalWidth / 2, y: backgroundImg.naturalHeight / 2 }\n          };\n          console.log('🧪 AUTO-TEST: Simulating polygon click at center:', testCoords);\n          handlePolygonClick(testCoords.display, testCoords.natural);\n        }, 1000);\n      }\n    }\n  }, [currentFrame, drawingMode, polygonPoints.length]);\n\n  useEffect(() => {\n    console.log('🎯 ROI Zone Manager useEffect triggered:', {\n      currentFrame: !!currentFrame,\n      currentFrameType: typeof currentFrame,\n      currentFrameLength: currentFrame?.length || 0,\n      frameSize: `${frameWidth}x${frameHeight}`,\n      zones: zones.length,\n      showZones,\n      drawingMode,\n      polygonPoints: polygonPoints.length\n    });\n\n    if (currentFrame) {\n      console.log('✅ ROI Manager has frame data - length:', currentFrame.length);\n      console.log('🔍 Frame data preview:', currentFrame.substring(0, 50) + '...');\n    } else {\n      console.log('❌ ROI Manager - No frame data received');\n    }\n\n    drawZones();\n  }, [zones, currentFrame, showZones, frameWidth, frameHeight]);\n\n  const getCanvasCoordinates = (event) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return { x: 0, y: 0 };\n\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    // Get display coordinates\n    const displayCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n\n    // Convert to natural frame coordinates for storage\n    const backgroundImg = document.getElementById('roi-background-image');\n    let naturalCoords = displayCoords;\n\n    if (backgroundImg) {\n      const naturalWidth = backgroundImg.naturalWidth || frameWidth;\n      const naturalHeight = backgroundImg.naturalHeight || frameHeight;\n      const displayWidth = canvas.width;\n      const displayHeight = canvas.height;\n\n      const naturalScaleX = naturalWidth / displayWidth;\n      const naturalScaleY = naturalHeight / displayHeight;\n\n      naturalCoords = {\n        x: displayCoords.x * naturalScaleX,\n        y: displayCoords.y * naturalScaleY\n      };\n    }\n\n    console.log('🖱️ Mouse coordinates:', {\n      client: { x: event.clientX, y: event.clientY },\n      display: displayCoords,\n      natural: naturalCoords,\n      canvas: { width: canvas.width, height: canvas.height },\n      frame: { width: frameWidth, height: frameHeight }\n    });\n\n    return naturalCoords;\n  };\n\n  const handleMouseDown = (event) => {\n    console.log('🖱️ MOUSE DOWN DETECTED on canvas!', {\n      isEnabled,\n      drawingMode,\n      selectedZoneType,\n      canvasSize: canvasRef.current ? `${canvasRef.current.width}x${canvasRef.current.height}` : 'no canvas'\n    });\n\n    if (!isEnabled) {\n      console.log('🚫 Drawing disabled');\n      return;\n    }\n\n    console.log('🖱️ Mouse down event triggered');\n    event.preventDefault();\n\n    // Get both natural and display coordinates\n    const naturalCoords = getCanvasCoordinates(event); // This returns natural coordinates\n\n    // Also get display coordinates for drawing preview\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    const displayCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n\n    const snappedCoords = snapToGridIfEnabled(displayCoords);\n\n    // Handle polygon point dragging\n    if (drawingMode === 'polygon' && polygonPoints.length > 0) {\n      const pointIndex = findPointAtPosition(polygonPoints, snappedCoords);\n\n      if (pointIndex >= 0) {\n        // Start dragging this point\n        setSelectedPointIndex(pointIndex);\n        setIsDraggingPoint(true);\n        setDragOffset({\n          x: snappedCoords.x - polygonPoints[pointIndex].x,\n          y: snappedCoords.y - polygonPoints[pointIndex].y\n        });\n\n        addPointToHistory('startDrag', {\n          pointIndex,\n          originalPosition: polygonPoints[pointIndex]\n        });\n\n        toast.info(`🔺 Dragging point ${pointIndex + 1}. Release to finish.`);\n        return;\n      }\n    }\n\n    // Check if clicking on existing zone for editing (use natural coordinates)\n    const clickedZone = findZoneAtPoint(naturalCoords.x, naturalCoords.y);\n    if (clickedZone && clickedZone.shape === 'polygon') {\n      console.log('✏️ Editing existing polygon zone:', clickedZone.name);\n      setEditingPolygon(clickedZone);\n\n      // Convert zone points to display coordinates for editing\n      const canvas = canvasRef.current;\n      const naturalScaleX = frameWidth / canvas.width;\n      const naturalScaleY = frameHeight / canvas.height;\n\n      const displayPoints = clickedZone.points.map(point => ({\n        x: point.x / naturalScaleX,\n        y: point.y / naturalScaleY\n      }));\n\n      setPolygonPoints(displayPoints);\n      setIsDrawing(true);\n      toast.info(`🔺 Editing ${clickedZone.name}. Click points to select, drag to move.`);\n      return;\n    } else if (clickedZone) {\n      console.log('✏️ Editing existing zone:', clickedZone.name);\n      setEditingZone(clickedZone);\n      return;\n    }\n\n    console.log('🖱️ Mouse down - Drawing mode:', drawingMode, 'Zone type:', selectedZoneType);\n\n    if (drawingMode === 'polygon') {\n      console.log('🔺 Entering polygon mode');\n      handlePolygonClick(snappedCoords, naturalCoords);\n    } else {\n      console.log('📦 Entering rectangle mode');\n      handleRectangleStart(snappedCoords, naturalCoords);\n    }\n  };\n\n  const handlePolygonClick = (displayCoords, naturalCoords) => {\n    console.log('🔺 Polygon click:', { displayCoords, naturalCoords, currentPoints: polygonPoints.length });\n\n    const snappedCoords = snapToGridIfEnabled(displayCoords);\n\n    // Check if editing an existing polygon\n    if (editingPolygon) {\n      const pointIndex = findPointAtPosition(polygonPoints, snappedCoords);\n\n      if (pointIndex >= 0) {\n        // Clicked on existing point - select it\n        setSelectedPointIndex(pointIndex);\n        toast.info(`🔺 Point ${pointIndex + 1} selected. Drag to move or right-click to delete.`);\n        return;\n      }\n\n      // Check if clicking on an edge to insert a point\n      const edgeIndex = findEdgeAtPosition(polygonPoints, snappedCoords);\n      if (edgeIndex >= 0) {\n        const newPoints = [...polygonPoints];\n        newPoints.splice(edgeIndex + 1, 0, snappedCoords);\n        setPolygonPoints(newPoints);\n        setSelectedPointIndex(edgeIndex + 1);\n\n        addPointToHistory('insertPoint', {\n          previousPoints: polygonPoints,\n          newPoints: newPoints,\n          insertIndex: edgeIndex + 1\n        });\n\n        toast.success(`🔺 Point inserted at position ${edgeIndex + 2}`);\n        return;\n      }\n    }\n\n    // Check if clicking near the first point to close polygon\n    if (polygonPoints.length > 2) {\n      const firstPoint = polygonPoints[0];\n      const distance = getPointDistance(snappedCoords, firstPoint);\n\n      if (distance < 15) {\n        // Close polygon\n        console.log('✅ Closing polygon with', polygonPoints.length, 'points');\n        completePolygon();\n        return;\n      }\n    }\n\n    // Add new point to polygon\n    const newPoints = [...polygonPoints, snappedCoords];\n    setPolygonPoints(newPoints);\n    setIsDrawing(true);\n\n    addPointToHistory('addPoint', {\n      previousPoints: polygonPoints,\n      newPoints: newPoints\n    });\n\n    console.log('➕ Added polygon point:', newPoints.length, 'total points');\n\n    // Provide better user feedback based on polygon progress\n    if (newPoints.length === 1) {\n      toast.info('🔺 First point added! Click to add more points.');\n    } else if (newPoints.length === 2) {\n      toast.info('🔺 Second point added! Add one more point, then click near first point to close.');\n    } else {\n      toast.info(`🔺 Point ${newPoints.length} added. Click near first point to close or press Enter.`);\n    }\n  };\n\n  const handleRectangleStart = (displayCoords, naturalCoords) => {\n    // Start drawing new rectangle zone with display coordinates for preview\n    console.log('📦 Starting rectangle zone drawing:', {\n      display: displayCoords,\n      natural: naturalCoords\n    });\n    setIsDrawing(true);\n    setCurrentZone({\n      id: `zone_${Date.now()}`,\n      type: selectedZoneType,\n      points: [displayCoords], // Use display coordinates for preview\n      isComplete: false,\n      isPreview: true,\n      shape: 'rectangle'\n    });\n  };\n\n  const completePolygon = () => {\n    if (polygonPoints.length < 3) {\n      toast.error('Polygon must have at least 3 points');\n      return;\n    }\n\n    // Convert display coordinates to natural coordinates for storage\n    const naturalPoints = polygonPoints.map(point => {\n      const canvas = canvasRef.current;\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = frameWidth / canvas.width;\n      const scaleY = frameHeight / canvas.height;\n\n      return {\n        x: point.x * scaleX,\n        y: point.y * scaleY\n      };\n    });\n\n    if (editingPolygon) {\n      // Update existing polygon\n      const updatedZones = zones.map(zone =>\n        zone.id === editingPolygon.id\n          ? { ...zone, points: naturalPoints }\n          : zone\n      );\n\n      setZones(updatedZones);\n      onZonesUpdate(updatedZones);\n\n      addPointToHistory('updatePolygon', {\n        zoneId: editingPolygon.id,\n        previousPoints: editingPolygon.points,\n        newPoints: naturalPoints\n      });\n\n      toast.success(`✏️ ${editingPolygon.name} updated successfully!`);\n      setEditingPolygon(null);\n    } else {\n      // Create new polygon\n      const newZone = {\n        id: `zone_${Date.now()}`,\n        type: selectedZoneType,\n        shape: 'polygon',\n        points: naturalPoints,\n        isComplete: true,\n        isPreview: false,\n        name: `${zoneTypes[selectedZoneType].name} ${zones.length + 1}`,\n        requiresScooper: zoneTypes[selectedZoneType].requiresScooper\n      };\n\n      const newZones = [...zones, newZone];\n      setZones(newZones);\n      onZonesUpdate(newZones);\n\n      addPointToHistory('createPolygon', {\n        zone: newZone\n      });\n\n      toast.success(`${zoneTypes[selectedZoneType].name} polygon zone created!`);\n    }\n\n    // Reset polygon drawing state\n    setPolygonPoints([]);\n    setIsDrawing(false);\n    setPreviewPoint(null);\n    setSelectedPointIndex(-1);\n    setHoveredPointIndex(-1);\n    setHoveredEdgeIndex(-1);\n\n    drawZones(); // Redraw with the updated zones\n  };\n\n  const handleMouseMove = (event) => {\n    if (!isEnabled) return;\n\n    event.preventDefault();\n\n    // Get display coordinates for preview\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    const displayCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n\n    const snappedCoords = snapToGridIfEnabled(displayCoords);\n\n    if (drawingMode === 'polygon') {\n      // Handle point dragging\n      if (isDraggingPoint && selectedPointIndex >= 0) {\n        const newPoints = [...polygonPoints];\n        newPoints[selectedPointIndex] = {\n          x: snappedCoords.x - dragOffset.x,\n          y: snappedCoords.y - dragOffset.y\n        };\n        setPolygonPoints(newPoints);\n        drawZones();\n        return;\n      }\n\n      // Update hover states for better UX\n      if (polygonPoints.length > 0) {\n        const hoveredPoint = findPointAtPosition(polygonPoints, snappedCoords);\n        const hoveredEdge = findEdgeAtPosition(polygonPoints, snappedCoords);\n\n        setHoveredPointIndex(hoveredPoint);\n        setHoveredEdgeIndex(hoveredEdge);\n\n        // Change cursor based on what's being hovered\n        if (hoveredPoint >= 0) {\n          canvas.style.cursor = 'pointer';\n        } else if (hoveredEdge >= 0) {\n          canvas.style.cursor = 'crosshair';\n        } else {\n          canvas.style.cursor = 'default';\n        }\n      }\n\n      if (isDrawing && polygonPoints.length > 0) {\n        // Update preview point for polygon\n        setPreviewPoint(snappedCoords);\n        // Redraw to show polygon preview with current mouse position\n        drawZones();\n      }\n    } else if (drawingMode === 'rectangle' && isDrawing && currentZone) {\n      // Update current zone with display coordinates for rectangle preview\n      if (currentZone.points.length === 1) {\n        const updatedZone = {\n          ...currentZone,\n          points: [currentZone.points[0], snappedCoords],\n          isPreview: true // Mark as preview\n        };\n        setCurrentZone(updatedZone);\n        console.log('🖱️ Mouse move - updating preview:', {\n          start: currentZone.points[0],\n          current: snappedCoords\n        });\n        drawZones([...zones, updatedZone]);\n      }\n    }\n  };\n\n  const handleMouseUp = (event) => {\n    // Handle polygon point dragging completion\n    if (isDraggingPoint && selectedPointIndex >= 0) {\n      setIsDraggingPoint(false);\n\n      addPointToHistory('endDrag', {\n        pointIndex: selectedPointIndex,\n        newPosition: polygonPoints[selectedPointIndex]\n      });\n\n      toast.success(`🔺 Point ${selectedPointIndex + 1} moved successfully`);\n      return;\n    }\n\n    if (!isDrawing || !currentZone) return;\n\n    console.log('🖱️ Mouse up event triggered');\n    event.preventDefault();\n\n    // Get display coordinates for the end point\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    const displayEndCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n\n    // Convert both start and end points from display to natural coordinates for storage\n    const backgroundImg = document.getElementById('roi-background-image');\n    let naturalStartCoords = currentZone.points[0];\n    let naturalEndCoords = displayEndCoords;\n\n    if (backgroundImg) {\n      const naturalWidth = backgroundImg.naturalWidth || frameWidth;\n      const naturalHeight = backgroundImg.naturalHeight || frameHeight;\n      const displayWidth = canvas.width;\n      const displayHeight = canvas.height;\n\n      const naturalScaleX = naturalWidth / displayWidth;\n      const naturalScaleY = naturalHeight / displayHeight;\n\n      naturalStartCoords = {\n        x: currentZone.points[0].x * naturalScaleX,\n        y: currentZone.points[0].y * naturalScaleY\n      };\n\n      naturalEndCoords = {\n        x: displayEndCoords.x * naturalScaleX,\n        y: displayEndCoords.y * naturalScaleY\n      };\n    }\n\n    // Complete rectangle zone with natural coordinates\n    if (currentZone.points.length >= 1) {\n      const newZone = {\n        ...currentZone,\n        points: [naturalStartCoords, naturalEndCoords], // Store in natural coordinates\n        isComplete: true,\n        isPreview: false,\n        name: `${zoneTypes[selectedZoneType].name} ${zones.length + 1}`,\n        requiresScooper: zoneTypes[selectedZoneType].requiresScooper\n      };\n\n      console.log('✅ Zone created:', {\n        display: { start: currentZone.points[0], end: displayEndCoords },\n        natural: { start: naturalStartCoords, end: naturalEndCoords },\n        zone: newZone\n      });\n\n      const newZones = [...zones, newZone];\n      setZones(newZones);\n      onZonesUpdate(newZones);\n      toast.success(`${zoneTypes[selectedZoneType].name} zone created!`);\n    }\n\n    setIsDrawing(false);\n    setCurrentZone(null);\n    drawZones(); // Redraw with the new zone\n  };\n\n  const deleteZone = (zoneId) => {\n    setZones(zones.filter(zone => zone.id !== zoneId));\n    setEditingZone(null);\n    toast.info('Zone deleted');\n  };\n\n  const clearAllZones = () => {\n    setZones([]);\n    setEditingZone(null);\n    toast.info('All zones cleared');\n  };\n\n  const exportZones = () => {\n    const exportData = {\n      zones: zones.map(zone => ({\n        ...zone,\n        // Convert to relative coordinates (0-1)\n        points: zone.points.map(p => ({\n          x: p.x / frameWidth,\n          y: p.y / frameHeight\n        }))\n      })),\n      frameSize: { width: frameWidth, height: frameHeight },\n      exportedAt: new Date().toISOString()\n    };\n    \n    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `roi_zones_${Date.now()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n    \n    toast.success('Zones exported successfully!');\n  }; // exportZones function closing\n\n  return (\n    <div style={{ width: '100%' }}>\n      {/* Zone Controls - Only show in editing mode */}\n      {isEnabled && (\n        <div style={{\n          marginBottom: '16px',\n          padding: '16px',\n          background: 'rgba(255,255,255,0.1)',\n          borderRadius: '8px'\n        }}>\n        <h4 style={{ margin: '0 0 12px 0', color: '#fff' }}>🎯 ROI Zone Manager</h4>\n        \n        {/* Zone Type Selector */}\n        <div style={{ marginBottom: '12px' }}>\n          <label style={{ display: 'block', marginBottom: '6px', fontWeight: 'bold' }}>\n            Zone Type:\n          </label>\n          <select\n            value={selectedZoneType}\n            onChange={(e) => setSelectedZoneType(e.target.value)}\n            style={{\n              padding: '8px',\n              borderRadius: '6px',\n              border: '1px solid rgba(255,255,255,0.3)',\n              background: 'rgba(255,255,255,0.1)',\n              color: 'white',\n              width: '200px'\n            }}\n          >\n            {Object.entries(zoneTypes).map(([key, config]) => (\n              <option key={key} value={key} style={{ background: '#333', color: 'white' }}>\n                {config.icon} {config.name}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Drawing Mode Selector */}\n        <div style={{ marginBottom: '12px' }}>\n          <label style={{ display: 'block', marginBottom: '6px', fontWeight: 'bold' }}>\n            Drawing Mode:\n          </label>\n          <div style={{ display: 'flex', gap: '8px' }}>\n            <button\n              onClick={() => setDrawingMode('rectangle')}\n              style={{\n                padding: '8px 12px',\n                borderRadius: '6px',\n                border: drawingMode === 'rectangle' ? '2px solid #00FF88' : '1px solid rgba(255,255,255,0.3)',\n                background: drawingMode === 'rectangle' ? 'rgba(0,255,136,0.2)' : 'rgba(255,255,255,0.1)',\n                color: drawingMode === 'rectangle' ? '#00FF88' : '#fff',\n                cursor: 'pointer',\n                fontSize: '12px'\n              }}\n            >\n              📦 Rectangle\n            </button>\n            <button\n              onClick={() => setDrawingMode('polygon')}\n              style={{\n                padding: '8px 12px',\n                borderRadius: '6px',\n                border: drawingMode === 'polygon' ? '2px solid #FF6B35' : '1px solid rgba(255,255,255,0.3)',\n                background: drawingMode === 'polygon' ? 'rgba(255,107,53,0.2)' : 'rgba(255,255,255,0.1)',\n                color: drawingMode === 'polygon' ? '#FF6B35' : '#fff',\n                cursor: 'pointer',\n                fontSize: '12px'\n              }}\n            >\n              🔺 Polygon\n            </button>\n          </div>\n          <div style={{ fontSize: '11px', color: '#ccc', marginTop: '4px' }}>\n            {drawingMode === 'rectangle' ?\n              '📦 Click and drag to create rectangular zones' :\n              '🔺 Professional polygon editor • Drag points • Insert on edges • Right-click options'\n            }\n          </div>\n\n          {/* Professional Polygon Controls */}\n          {drawingMode === 'polygon' && (\n            <div style={{\n              marginTop: '8px',\n              padding: '8px',\n              background: 'rgba(255,107,53,0.1)',\n              borderRadius: '6px',\n              border: '1px solid rgba(255,107,53,0.3)'\n            }}>\n              <div style={{ display: 'flex', gap: '8px', marginBottom: '6px', flexWrap: 'wrap' }}>\n                <button\n                  onClick={() => setSnapToGrid(!snapToGrid)}\n                  style={{\n                    padding: '4px 8px',\n                    background: snapToGrid ? '#FF6B35' : 'rgba(255,255,255,0.1)',\n                    color: snapToGrid ? '#fff' : '#ccc',\n                    border: '1px solid rgba(255,255,255,0.3)',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                    fontSize: '10px'\n                  }}\n                >\n                  🔲 Grid Snap\n                </button>\n\n                <button\n                  onClick={undo}\n                  disabled={undoStack.length === 0}\n                  style={{\n                    padding: '4px 8px',\n                    background: undoStack.length > 0 ? '#4CAF50' : 'rgba(255,255,255,0.1)',\n                    color: undoStack.length > 0 ? '#fff' : '#666',\n                    border: '1px solid rgba(255,255,255,0.3)',\n                    borderRadius: '4px',\n                    cursor: undoStack.length > 0 ? 'pointer' : 'not-allowed',\n                    fontSize: '10px'\n                  }}\n                >\n                  ↶ Undo\n                </button>\n\n                <button\n                  onClick={redo}\n                  disabled={redoStack.length === 0}\n                  style={{\n                    padding: '4px 8px',\n                    background: redoStack.length > 0 ? '#4CAF50' : 'rgba(255,255,255,0.1)',\n                    color: redoStack.length > 0 ? '#fff' : '#666',\n                    border: '1px solid rgba(255,255,255,0.3)',\n                    borderRadius: '4px',\n                    cursor: redoStack.length > 0 ? 'pointer' : 'not-allowed',\n                    fontSize: '10px'\n                  }}\n                >\n                  ↷ Redo\n                </button>\n\n                {snapToGrid && (\n                  <select\n                    value={gridSize}\n                    onChange={(e) => setGridSize(parseInt(e.target.value))}\n                    style={{\n                      padding: '4px',\n                      background: 'rgba(255,255,255,0.1)',\n                      color: '#fff',\n                      border: '1px solid rgba(255,255,255,0.3)',\n                      borderRadius: '4px',\n                      fontSize: '10px'\n                    }}\n                  >\n                    <option value={10}>Grid: 10px</option>\n                    <option value={20}>Grid: 20px</option>\n                    <option value={30}>Grid: 30px</option>\n                    <option value={50}>Grid: 50px</option>\n                  </select>\n                )}\n              </div>\n\n              {selectedPointIndex >= 0 && (\n                <div style={{ fontSize: '10px', color: '#FF6B35' }}>\n                  🎯 Point {selectedPointIndex + 1} selected • Drag to move • Right-click to delete\n                </div>\n              )}\n\n              {editingPolygon && (\n                <div style={{ fontSize: '10px', color: '#00FF88' }}>\n                  ✏️ Editing: {editingPolygon.name} • Click edges to insert points\n                </div>\n              )}\n            </div>\n          )}\n\n          {zoneTypes[selectedZoneType]?.preferredShape && (\n            <div style={{\n              fontSize: '11px',\n              color: zoneTypes[selectedZoneType].preferredShape === 'polygon' ? '#FF6B35' : '#FFD23F',\n              marginTop: '2px',\n              fontStyle: 'italic'\n            }}>\n              💡 Recommended: {zoneTypes[selectedZoneType].preferredShape} for {zoneTypes[selectedZoneType].name}\n            </div>\n          )}\n        </div>\n\n        {/* Drawing Status */}\n        <div style={{\n          padding: '8px 12px',\n          background: isEnabled ? 'rgba(0,255,136,0.2)' : 'rgba(255,255,255,0.1)',\n          borderRadius: '6px',\n          marginBottom: '12px',\n          border: `2px solid ${isEnabled ? '#00FF88' : 'rgba(255,255,255,0.3)'}`\n        }}>\n          <span style={{ color: isEnabled ? '#00FF88' : '#fff' }}>\n            {isEnabled ?\n              (drawingMode === 'polygon' ?\n                `🔺 Polygon Mode: ACTIVE ${polygonPoints.length > 0 ? `(${polygonPoints.length} points)` : '- Click to start'}` :\n                '📦 Rectangle Mode: ACTIVE - Click and drag to create zones'\n              ) :\n              '🔒 Drawing Mode: DISABLED'\n            }\n          </span>\n          <div style={{ fontSize: '12px', marginTop: '4px', opacity: 0.8 }}>\n            Debug: isEnabled={isEnabled.toString()}, currentFrame={!!currentFrame ? 'available' : 'none'},\n            frameSize={frameWidth}x{frameHeight}\n          </div>\n        </div>\n\n        {/* Polygon Drawing Controls */}\n        {drawingMode === 'polygon' && (\n          <div style={{\n            padding: '8px 12px',\n            background: 'rgba(255,107,53,0.2)',\n            borderRadius: '6px',\n            marginBottom: '12px',\n            border: '2px solid #FF6B35'\n          }}>\n            <div style={{ color: '#FF6B35', fontWeight: 'bold', marginBottom: '8px' }}>\n              🔺 Polygon Drawing Status\n            </div>\n            <div style={{ fontSize: '12px', color: '#fff', marginBottom: '8px' }}>\n              {polygonPoints.length === 0 && 'Click to start drawing polygon'}\n              {polygonPoints.length > 0 && polygonPoints.length < 3 &&\n                `${polygonPoints.length} points added. Need ${3 - polygonPoints.length} more.`}\n              {polygonPoints.length >= 3 &&\n                `${polygonPoints.length} points. Click near first point to close polygon.`}\n            </div>\n            {polygonPoints.length > 0 && (\n              <div style={{ display: 'flex', gap: '6px' }}>\n                <button\n                  onClick={() => {\n                    if (polygonPoints.length > 0) {\n                      const newPoints = polygonPoints.slice(0, -1);\n                      setPolygonPoints(newPoints);\n                      if (newPoints.length === 0) {\n                        setIsDrawing(false);\n                        setPreviewPoint(null);\n                      }\n                      toast.info('Last point removed');\n                    }\n                  }}\n                  style={{\n                    padding: '4px 8px',\n                    background: '#FF9800',\n                    color: '#fff',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                    fontSize: '11px'\n                  }}\n                >\n                  ↶ Undo Point\n                </button>\n                <button\n                  onClick={() => {\n                    setPolygonPoints([]);\n                    setIsDrawing(false);\n                    setPreviewPoint(null);\n                    toast.info('Polygon cleared');\n                  }}\n                  style={{\n                    padding: '4px 8px',\n                    background: '#f44336',\n                    color: '#fff',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                    fontSize: '11px'\n                  }}\n                >\n                  🗑️ Clear\n                </button>\n                {polygonPoints.length >= 3 && (\n                  <button\n                    onClick={completePolygon}\n                    style={{\n                      padding: '4px 8px',\n                      background: '#4CAF50',\n                      color: '#fff',\n                      border: 'none',\n                      borderRadius: '4px',\n                      cursor: 'pointer',\n                      fontSize: '11px'\n                    }}\n                  >\n                    ✅ Complete\n                  </button>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Controls */}\n        <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap', alignItems: 'center' }}>\n          <button\n            className=\"btn btn-primary\"\n            onClick={() => setShowZones(!showZones)}\n          >\n            {showZones ? '👁️ Hide Zones' : '👁️‍🗨️ Show Zones'}\n          </button>\n          \n          <button\n            className=\"btn btn-warning\"\n            onClick={clearAllZones}\n            disabled={zones.length === 0}\n          >\n            🗑️ Clear All\n          </button>\n          \n          <button\n            className=\"btn btn-success\"\n            onClick={exportZones}\n            disabled={zones.length === 0}\n          >\n            📥 Export Zones\n          </button>\n\n          <button\n            className=\"btn btn-info\"\n            onClick={() => {\n              // Add a test zone to verify functionality\n              const testZone = {\n                id: `test_zone_${Date.now()}`,\n                type: selectedZoneType,\n                points: [\n                  { x: 50, y: 50 },\n                  { x: 200, y: 150 }\n                ],\n                isComplete: true,\n                name: `Test ${zoneTypes[selectedZoneType].name}`,\n                requiresScooper: zoneTypes[selectedZoneType].requiresScooper\n              };\n              setZones([...zones, testZone]);\n              toast.success('Test zone added!');\n            }}\n          >\n            🧪 Add Test Zone\n          </button>\n          \n          <span style={{ marginLeft: '16px', fontSize: '14px', opacity: 0.8 }}>\n            Zones: {zones.length} | {isEnabled ? 'Click and drag to create zones' : 'Enable drawing to create zones'}\n          </span>\n        </div>\n\n        {/* Drawing Instructions */}\n        {isEnabled && zones.length === 0 && (\n          <div style={{\n            padding: '12px',\n            background: 'rgba(255,210,63,0.2)',\n            borderRadius: '6px',\n            marginTop: '8px',\n            border: '2px dashed #FFD23F'\n          }}>\n            <div style={{ color: '#FFD23F', fontWeight: 'bold', marginBottom: '4px' }}>\n              📝 How to Draw Zones:\n            </div>\n            <div style={{ fontSize: '14px', opacity: 0.9 }}>\n              1. Select zone type above (e.g., \"🍅 Sauce Area\")<br />\n              2. Click and hold on the video to start drawing<br />\n              3. Drag to create a rectangle<br />\n              4. Release to complete the zone\n            </div>\n          </div>\n        )}\n\n        {isDrawing && (\n          <div style={{\n            padding: '8px 12px',\n            background: 'rgba(0,212,255,0.3)',\n            borderRadius: '6px',\n            marginTop: '8px',\n            textAlign: 'center',\n            border: '2px solid #00D4FF'\n          }}>\n            <span style={{ color: '#00D4FF', fontWeight: 'bold' }}>\n              🎨 Drawing in progress... Drag to set zone size\n            </span>\n          </div>\n        )}\n        </div>\n      )}\n\n      {/* Video with zone drawing overlay */}\n      <div style={{\n        position: 'relative',\n        display: 'inline-block',\n        width: '100%',\n        maxWidth: '100%',\n        background: '#000',\n        borderRadius: '8px',\n        overflow: 'hidden'\n      }}>\n        {/* Background video frame */}\n        {currentFrame ? (\n          <img\n            id=\"roi-background-image\"\n            src={`data:image/jpeg;base64,${currentFrame}`}\n            alt=\"Video frame for zone configuration\"\n            style={{\n              width: '100%',\n              height: 'auto',\n              display: 'block',\n              borderRadius: '8px'\n            }}\n            onLoad={(e) => {\n              console.log('🎯 ROI Manager: Video frame loaded');\n              const img = e.target;\n              const rect = img.getBoundingClientRect();\n              console.log('📐 Image dimensions:', {\n                natural: `${img.naturalWidth}x${img.naturalHeight}`,\n                display: `${rect.width}x${rect.height}`\n              });\n\n              // Update canvas size to match image\n              const canvas = canvasRef.current;\n              if (canvas) {\n                canvas.width = rect.width;\n                canvas.height = rect.height;\n                canvas.style.width = rect.width + 'px';\n                canvas.style.height = rect.height + 'px';\n                console.log('🎨 Canvas resized to match image:', `${rect.width}x${rect.height}`);\n                console.log('🔧 FRAME SIZE FIX: Using actual image size instead of props');\n              }\n\n              // Test polygon drawing immediately\n              setTimeout(() => {\n                drawZones();\n\n                // Force test polygon drawing\n                const canvas = canvasRef.current;\n                if (canvas && drawingMode === 'polygon') {\n                  const ctx = canvas.getContext('2d');\n                  console.log('🧪 FORCE TEST: Drawing test polygon on canvas');\n\n                  // Draw a test polygon in the center\n                  const centerX = canvas.width / 2;\n                  const centerY = canvas.height / 2;\n                  const testPoints = [\n                    { x: centerX - 50, y: centerY - 50 },\n                    { x: centerX + 50, y: centerY - 50 },\n                    { x: centerX + 50, y: centerY + 50 },\n                    { x: centerX - 50, y: centerY + 50 }\n                  ];\n\n                  ctx.save();\n                  ctx.strokeStyle = '#FF6B35';\n                  ctx.fillStyle = 'rgba(255, 107, 53, 0.2)';\n                  ctx.lineWidth = 3;\n\n                  ctx.beginPath();\n                  ctx.moveTo(testPoints[0].x, testPoints[0].y);\n                  for (let i = 1; i < testPoints.length; i++) {\n                    ctx.lineTo(testPoints[i].x, testPoints[i].y);\n                  }\n                  ctx.closePath();\n                  ctx.fill();\n                  ctx.stroke();\n\n                  // Draw test points\n                  testPoints.forEach((point, index) => {\n                    ctx.beginPath();\n                    ctx.arc(point.x, point.y, 6, 0, 2 * Math.PI);\n                    ctx.fillStyle = '#FF6B35';\n                    ctx.fill();\n                    ctx.strokeStyle = '#fff';\n                    ctx.lineWidth = 2;\n                    ctx.stroke();\n\n                    // Draw point number\n                    ctx.fillStyle = '#fff';\n                    ctx.font = '12px Arial';\n                    ctx.textAlign = 'center';\n                    ctx.fillText((index + 1).toString(), point.x, point.y + 4);\n                  });\n\n                  ctx.restore();\n                  console.log('🧪 FORCE TEST: Test polygon drawn on canvas');\n                }\n              }, 100);\n            }}\n          />\n        ) : (\n          <div\n            id=\"roi-background-placeholder\"\n            style={{\n              width: '100%',\n              height: '360px',\n              background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              borderRadius: '8px',\n              border: '2px dashed rgba(255,255,255,0.3)',\n              color: '#ccc',\n              fontSize: '16px',\n              textAlign: 'center',\n              flexDirection: 'column',\n              gap: '12px',\n              position: 'relative'\n            }}\n            onClick={(e) => {\n              // Allow polygon drawing on placeholder for testing\n              if (isEnabled && drawingMode === 'polygon') {\n                const rect = e.currentTarget.getBoundingClientRect();\n                const displayCoords = {\n                  x: e.clientX - rect.left,\n                  y: e.clientY - rect.top\n                };\n                const naturalCoords = {\n                  x: (displayCoords.x / rect.width) * frameWidth,\n                  y: (displayCoords.y / rect.height) * frameHeight\n                };\n                console.log('🔺 Placeholder click for polygon test:', { displayCoords, naturalCoords });\n                handlePolygonClick(displayCoords, naturalCoords);\n              }\n            }}\n          >\n            <div style={{ fontSize: '48px' }}>🎥</div>\n            <div>Start Video Processing First</div>\n            <div style={{ fontSize: '12px', opacity: 0.7 }}>\n              Upload and start processing a video to configure ROI zones\n            </div>\n            {drawingMode === 'polygon' && isEnabled && (\n              <div style={{\n                fontSize: '11px',\n                color: '#FF6B35',\n                marginTop: '8px',\n                fontStyle: 'italic'\n              }}>\n                🔺 Click here to test polygon drawing\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Zone drawing canvas overlay */}\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            cursor: isEnabled ? 'crosshair' : 'default',\n            pointerEvents: isEnabled ? 'auto' : 'none',\n            zIndex: 20,\n            borderRadius: '8px'\n          }}\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onContextMenu={(e) => {\n            e.preventDefault();\n\n            if (drawingMode === 'polygon') {\n              // Get mouse position for context-sensitive actions\n              const canvas = canvasRef.current;\n              const rect = canvas.getBoundingClientRect();\n              const scaleX = canvas.width / rect.width;\n              const scaleY = canvas.height / rect.height;\n\n              const displayCoords = {\n                x: (e.clientX - rect.left) * scaleX,\n                y: (e.clientY - rect.top) * scaleY\n              };\n\n              const snappedCoords = snapToGridIfEnabled(displayCoords);\n\n              // Check if right-clicking on a specific point\n              const pointIndex = findPointAtPosition(polygonPoints, snappedCoords);\n\n              if (pointIndex >= 0 && polygonPoints.length > 3) {\n                // Delete specific point\n                const newPoints = polygonPoints.filter((_, index) => index !== pointIndex);\n                setPolygonPoints(newPoints);\n                setSelectedPointIndex(-1);\n\n                addPointToHistory('deletePoint', {\n                  deletedPoint: polygonPoints[pointIndex],\n                  deletedIndex: pointIndex,\n                  previousPoints: polygonPoints\n                });\n\n                toast.success(`🔺 Point ${pointIndex + 1} deleted`);\n              } else if (polygonPoints.length >= 3) {\n                // Complete polygon\n                completePolygon();\n                toast.success('🔺 Polygon completed with right-click!');\n              } else if (polygonPoints.length > 0) {\n                // Remove last point\n                const newPoints = polygonPoints.slice(0, -1);\n                setPolygonPoints(newPoints);\n                if (newPoints.length === 0) {\n                  setIsDrawing(false);\n                  setPreviewPoint(null);\n                  setEditingPolygon(null);\n                }\n\n                addPointToHistory('removeLastPoint', {\n                  removedPoint: polygonPoints[polygonPoints.length - 1],\n                  previousPoints: polygonPoints\n                });\n\n                toast.info('🔺 Last point removed');\n              }\n            }\n          }}\n        />\n\n        {!currentFrame && (\n          <div style={{\n            width: '100%',\n            height: '300px',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            background: 'rgba(255,255,255,0.1)',\n            color: 'rgba(255,255,255,0.6)'\n          }}>\n            <div style={{ textAlign: 'center' }}>\n              <div style={{ fontSize: '48px', marginBottom: '16px' }}>🎥</div>\n              <p>Video frame will appear here</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Zone List - Only show in editing mode */}\n      {isEnabled && zones.length > 0 && (\n        <div style={{\n          marginTop: '16px',\n          padding: '16px',\n          background: 'rgba(255,255,255,0.05)',\n          borderRadius: '8px'\n        }}>\n          <h4 style={{ margin: '0 0 12px 0' }}>📋 Active Zones ({zones.length})</h4>\n          <div style={{ maxHeight: '200px', overflowY: 'auto' }}>\n            {zones.map((zone, index) => {\n              const config = zoneTypes[zone.type];\n              return (\n                <div\n                  key={zone.id}\n                  style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    padding: '8px 12px',\n                    marginBottom: '8px',\n                    background: editingZone?.id === zone.id ? 'rgba(255,255,255,0.2)' : 'rgba(255,255,255,0.1)',\n                    borderRadius: '6px',\n                    border: `2px solid ${config.color}`\n                  }}\n                >\n                  <div>\n                    <strong>{config.icon} {zone.name}</strong>\n                    <br />\n                    <small style={{ opacity: 0.8 }}>\n                      {config.description} | Scooper: {zone.requiresScooper ? '🥄 Required' : '🚫 Not Required'}\n                    </small>\n                  </div>\n                  <button\n                    onClick={() => deleteZone(zone.id)}\n                    style={{\n                      background: '#FF4757',\n                      border: 'none',\n                      borderRadius: '4px',\n                      padding: '4px 8px',\n                      color: 'white',\n                      cursor: 'pointer',\n                      fontSize: '12px'\n                    }}\n                  >\n                    🗑️ Delete\n                  </button>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}; // Main component closing brace\n\nexport default ROIZoneManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}