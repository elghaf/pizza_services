{"ast":null,"code":"/**\n * Violation Types Configuration\n * Defines all violation types with their visual and behavioral properties\n */\n\nexport const violationTypes = {\n  HAND_IN_INGREDIENT_NO_SCOOPER: {\n    severity: 'high',\n    color: '#FF3333',\n    icon: '🚨',\n    title: 'Hand Contact Without Scooper',\n    description: 'Hand detected in ingredient area without scooper present',\n    priority: 1,\n    alertSound: true,\n    requiresImmedateAction: true,\n    category: 'hygiene'\n  },\n  CROSS_CONTAMINATION: {\n    severity: 'high',\n    color: '#FF6B35',\n    icon: '⚠️',\n    title: 'Cross Contamination Risk',\n    description: 'Hand moved between different ingredient areas without cleaning',\n    priority: 2,\n    alertSound: true,\n    requiresImmedateAction: true,\n    category: 'hygiene'\n  },\n  IMPROPER_TOOL_USE: {\n    severity: 'medium',\n    color: '#FFD23F',\n    icon: '🥄',\n    title: 'Improper Tool Usage',\n    description: 'Scooper used incorrectly or in wrong area',\n    priority: 3,\n    alertSound: false,\n    requiresImmedateAction: false,\n    category: 'procedure'\n  },\n  EXTENDED_CONTACT: {\n    severity: 'medium',\n    color: '#FF8C42',\n    icon: '⏱️',\n    title: 'Extended Hand Contact',\n    description: 'Hand in ingredient area for extended period',\n    priority: 4,\n    alertSound: false,\n    requiresImmedateAction: false,\n    category: 'procedure'\n  }\n};\n\n/**\n * Get violation type configuration by key\n * @param {string} violationType - The violation type key\n * @returns {object} Violation type configuration\n */\nexport const getViolationType = violationType => {\n  return violationTypes[violationType] || null;\n};\n\n/**\n * Get all available violation type keys\n * @returns {string[]} Array of violation type keys\n */\nexport const getViolationTypeKeys = () => {\n  return Object.keys(violationTypes);\n};\n\n/**\n * Get violation types by severity level\n * @param {string} severity - Severity level ('high', 'medium', 'low')\n * @returns {object} Violation types with the specified severity\n */\nexport const getViolationTypesBySeverity = severity => {\n  return Object.fromEntries(Object.entries(violationTypes).filter(([key, config]) => config.severity === severity));\n};\n\n/**\n * Get violation types by category\n * @param {string} category - Category ('hygiene', 'procedure', 'safety')\n * @returns {object} Violation types in the specified category\n */\nexport const getViolationTypesByCategory = category => {\n  return Object.fromEntries(Object.entries(violationTypes).filter(([key, config]) => config.category === category));\n};\n\n/**\n * Get high priority violation types\n * @returns {object} High priority violation types\n */\nexport const getHighPriorityViolationTypes = () => {\n  return Object.fromEntries(Object.entries(violationTypes).filter(([key, config]) => config.priority <= 2));\n};\n\n/**\n * Get violation types that require immediate action\n * @returns {object} Violation types requiring immediate action\n */\nexport const getImmediateActionViolationTypes = () => {\n  return Object.fromEntries(Object.entries(violationTypes).filter(([key, config]) => config.requiresImmedateAction));\n};\n\n/**\n * Get violation types that should trigger alert sounds\n * @returns {object} Violation types with alert sounds\n */\nexport const getAlertSoundViolationTypes = () => {\n  return Object.fromEntries(Object.entries(violationTypes).filter(([key, config]) => config.alertSound));\n};\n\n/**\n * Create a new violation object\n * @param {string} type - Violation type key\n * @param {object} data - Additional violation data\n * @returns {object} Complete violation object\n */\nexport const createViolation = (type, data) => {\n  const config = violationTypes[type];\n  if (!config) {\n    throw new Error(`Unknown violation type: ${type}`);\n  }\n  return {\n    id: `violation_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    type,\n    timestamp: new Date().toISOString(),\n    severity: config.severity,\n    confidence: data.confidence || 0.8,\n    description: config.description,\n    title: config.title,\n    icon: config.icon,\n    color: config.color,\n    priority: config.priority,\n    category: config.category,\n    requiresImmedateAction: config.requiresImmedateAction,\n    alertSound: config.alertSound,\n    details: data,\n    resolved: false,\n    acknowledgedBy: null,\n    acknowledgedAt: null\n  };\n};\n\n/**\n * Get violation severity color\n * @param {string} severity - Severity level\n * @returns {string} Color code for the severity\n */\nexport const getSeverityColor = severity => {\n  const colors = {\n    'high': '#FF3333',\n    'medium': '#FFD23F',\n    'low': '#2ED573'\n  };\n  return colors[severity] || colors['medium'];\n};\n\n/**\n * Get violation category icon\n * @param {string} category - Category name\n * @returns {string} Icon for the category\n */\nexport const getCategoryIcon = category => {\n  const icons = {\n    'hygiene': '🧼',\n    'procedure': '📋',\n    'safety': '🛡️'\n  };\n  return icons[category] || '⚠️';\n};\n\n/**\n * Validate violation data\n * @param {object} violation - Violation object to validate\n * @returns {object} Validation result { isValid, errors }\n */\nexport const validateViolation = violation => {\n  const errors = [];\n  if (!violation.type || !violationTypes[violation.type]) {\n    errors.push('Invalid or missing violation type');\n  }\n  if (!violation.confidence || violation.confidence < 0 || violation.confidence > 1) {\n    errors.push('Confidence must be between 0 and 1');\n  }\n  if (!violation.timestamp) {\n    errors.push('Missing timestamp');\n  }\n  if (!violation.details || typeof violation.details !== 'object') {\n    errors.push('Missing or invalid violation details');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\nexport default violationTypes;","map":{"version":3,"names":["violationTypes","HAND_IN_INGREDIENT_NO_SCOOPER","severity","color","icon","title","description","priority","alertSound","requiresImmedateAction","category","CROSS_CONTAMINATION","IMPROPER_TOOL_USE","EXTENDED_CONTACT","getViolationType","violationType","getViolationTypeKeys","Object","keys","getViolationTypesBySeverity","fromEntries","entries","filter","key","config","getViolationTypesByCategory","getHighPriorityViolationTypes","getImmediateActionViolationTypes","getAlertSoundViolationTypes","createViolation","type","data","Error","id","Date","now","Math","random","toString","substr","timestamp","toISOString","confidence","details","resolved","acknowledgedBy","acknowledgedAt","getSeverityColor","colors","getCategoryIcon","icons","validateViolation","violation","errors","push","isValid","length"],"sources":["C:/Users/ayoub/OneDrive/Desktop/eagleAI/pizza_store_detection/services/frontend/src/components/ViolationDetector/ViolationTypes.js"],"sourcesContent":["/**\n * Violation Types Configuration\n * Defines all violation types with their visual and behavioral properties\n */\n\nexport const violationTypes = {\n  HAND_IN_INGREDIENT_NO_SCOOPER: {\n    severity: 'high',\n    color: '#FF3333',\n    icon: '🚨',\n    title: 'Hand Contact Without Scooper',\n    description: 'Hand detected in ingredient area without scooper present',\n    priority: 1,\n    alertSound: true,\n    requiresImmedateAction: true,\n    category: 'hygiene'\n  },\n  CROSS_CONTAMINATION: {\n    severity: 'high', \n    color: '#FF6B35',\n    icon: '⚠️',\n    title: 'Cross Contamination Risk',\n    description: 'Hand moved between different ingredient areas without cleaning',\n    priority: 2,\n    alertSound: true,\n    requiresImmedateAction: true,\n    category: 'hygiene'\n  },\n  IMPROPER_TOOL_USE: {\n    severity: 'medium',\n    color: '#FFD23F',\n    icon: '🥄',\n    title: 'Improper Tool Usage',\n    description: 'Scooper used incorrectly or in wrong area',\n    priority: 3,\n    alertSound: false,\n    requiresImmedateAction: false,\n    category: 'procedure'\n  },\n  EXTENDED_CONTACT: {\n    severity: 'medium',\n    color: '#FF8C42',\n    icon: '⏱️',\n    title: 'Extended Hand Contact',\n    description: 'Hand in ingredient area for extended period',\n    priority: 4,\n    alertSound: false,\n    requiresImmedateAction: false,\n    category: 'procedure'\n  }\n};\n\n/**\n * Get violation type configuration by key\n * @param {string} violationType - The violation type key\n * @returns {object} Violation type configuration\n */\nexport const getViolationType = (violationType) => {\n  return violationTypes[violationType] || null;\n};\n\n/**\n * Get all available violation type keys\n * @returns {string[]} Array of violation type keys\n */\nexport const getViolationTypeKeys = () => {\n  return Object.keys(violationTypes);\n};\n\n/**\n * Get violation types by severity level\n * @param {string} severity - Severity level ('high', 'medium', 'low')\n * @returns {object} Violation types with the specified severity\n */\nexport const getViolationTypesBySeverity = (severity) => {\n  return Object.fromEntries(\n    Object.entries(violationTypes).filter(([key, config]) => config.severity === severity)\n  );\n};\n\n/**\n * Get violation types by category\n * @param {string} category - Category ('hygiene', 'procedure', 'safety')\n * @returns {object} Violation types in the specified category\n */\nexport const getViolationTypesByCategory = (category) => {\n  return Object.fromEntries(\n    Object.entries(violationTypes).filter(([key, config]) => config.category === category)\n  );\n};\n\n/**\n * Get high priority violation types\n * @returns {object} High priority violation types\n */\nexport const getHighPriorityViolationTypes = () => {\n  return Object.fromEntries(\n    Object.entries(violationTypes).filter(([key, config]) => config.priority <= 2)\n  );\n};\n\n/**\n * Get violation types that require immediate action\n * @returns {object} Violation types requiring immediate action\n */\nexport const getImmediateActionViolationTypes = () => {\n  return Object.fromEntries(\n    Object.entries(violationTypes).filter(([key, config]) => config.requiresImmedateAction)\n  );\n};\n\n/**\n * Get violation types that should trigger alert sounds\n * @returns {object} Violation types with alert sounds\n */\nexport const getAlertSoundViolationTypes = () => {\n  return Object.fromEntries(\n    Object.entries(violationTypes).filter(([key, config]) => config.alertSound)\n  );\n};\n\n/**\n * Create a new violation object\n * @param {string} type - Violation type key\n * @param {object} data - Additional violation data\n * @returns {object} Complete violation object\n */\nexport const createViolation = (type, data) => {\n  const config = violationTypes[type];\n  if (!config) {\n    throw new Error(`Unknown violation type: ${type}`);\n  }\n\n  return {\n    id: `violation_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    type,\n    timestamp: new Date().toISOString(),\n    severity: config.severity,\n    confidence: data.confidence || 0.8,\n    description: config.description,\n    title: config.title,\n    icon: config.icon,\n    color: config.color,\n    priority: config.priority,\n    category: config.category,\n    requiresImmedateAction: config.requiresImmedateAction,\n    alertSound: config.alertSound,\n    details: data,\n    resolved: false,\n    acknowledgedBy: null,\n    acknowledgedAt: null\n  };\n};\n\n/**\n * Get violation severity color\n * @param {string} severity - Severity level\n * @returns {string} Color code for the severity\n */\nexport const getSeverityColor = (severity) => {\n  const colors = {\n    'high': '#FF3333',\n    'medium': '#FFD23F',\n    'low': '#2ED573'\n  };\n  return colors[severity] || colors['medium'];\n};\n\n/**\n * Get violation category icon\n * @param {string} category - Category name\n * @returns {string} Icon for the category\n */\nexport const getCategoryIcon = (category) => {\n  const icons = {\n    'hygiene': '🧼',\n    'procedure': '📋',\n    'safety': '🛡️'\n  };\n  return icons[category] || '⚠️';\n};\n\n/**\n * Validate violation data\n * @param {object} violation - Violation object to validate\n * @returns {object} Validation result { isValid, errors }\n */\nexport const validateViolation = (violation) => {\n  const errors = [];\n\n  if (!violation.type || !violationTypes[violation.type]) {\n    errors.push('Invalid or missing violation type');\n  }\n\n  if (!violation.confidence || violation.confidence < 0 || violation.confidence > 1) {\n    errors.push('Confidence must be between 0 and 1');\n  }\n\n  if (!violation.timestamp) {\n    errors.push('Missing timestamp');\n  }\n\n  if (!violation.details || typeof violation.details !== 'object') {\n    errors.push('Missing or invalid violation details');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\nexport default violationTypes;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}