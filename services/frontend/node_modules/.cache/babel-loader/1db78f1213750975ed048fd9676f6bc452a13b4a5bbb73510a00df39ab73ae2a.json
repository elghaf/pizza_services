{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * useVideoProcessing - Custom hook for video processing operations\n */\n\nimport { useCallback } from 'react';\nimport { toast } from 'react-toastify';\nconst useVideoProcessing = ({\n  selectedFile,\n  fps,\n  setIsProcessing,\n  setProcessingProgress,\n  setDetections,\n  setViolations,\n  onSessionUpdate,\n  wsRef\n}) => {\n  _s();\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  const uploadVideo = async file => {\n    const formData = new FormData();\n    formData.append('video', file);\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/upload`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n      const result = await response.json();\n      console.log('📤 Upload successful:', result);\n      return result;\n    } catch (error) {\n      console.error('❌ Upload error:', error);\n      throw error;\n    }\n  };\n  const startProcessing = useCallback(async () => {\n    if (!selectedFile) {\n      toast.error('Please select a video file first');\n      return;\n    }\n    try {\n      setIsProcessing(true);\n      setProcessingProgress(0);\n      setDetections([]);\n      setViolations([]);\n      toast.info('📤 Uploading video...');\n\n      // Upload video first\n      const uploadResult = await uploadVideo(selectedFile);\n      toast.success('✅ Video uploaded successfully');\n      toast.info('🚀 Starting video processing...');\n\n      // Start video processing\n      const processingRequest = {\n        source_type: 'file',\n        source_path: uploadResult.absolute_path,\n        fps: fps,\n        enable_violation_detection: true\n      };\n      console.log('🎬 Starting processing with request:', processingRequest);\n      const response = await fetch(`${API_BASE_URL}/video/start`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(processingRequest)\n      });\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`Processing failed: ${errorData}`);\n      }\n      const result = await response.json();\n      console.log('✅ Processing started:', result);\n      if (onSessionUpdate) {\n        onSessionUpdate(result);\n      }\n\n      // Connect to WebSocket for real-time updates\n      if (result.websocket_url && wsRef) {\n        const wsUrl = result.websocket_url.replace('localhost', window.location.hostname);\n        console.log('🔌 Connecting to WebSocket:', wsUrl);\n        try {\n          const ws = new WebSocket(wsUrl);\n          wsRef.current = ws;\n          ws.onopen = () => {\n            console.log('✅ WebSocket connected');\n            toast.success('🔌 Connected to real-time feed');\n          };\n          ws.onmessage = event => {\n            try {\n              const data = JSON.parse(event.data);\n              console.log('📨 WebSocket message:', data.type);\n              if (data.type === 'frame_update' || data.type === 'frame_processed') {\n                setDetections(data.detections || []);\n                if (data.frame_data) {\n                  // Frame data is handled by useWebSocket hook\n                }\n              } else if (data.type === 'violation_detected') {\n                setViolations(prev => [...prev, data.violation]);\n                toast.error(`🚨 Violation: ${data.violation.description}`);\n              } else if (data.type === 'processing_progress') {\n                setProcessingProgress(data.progress || 0);\n              } else if (data.type === 'processing_complete') {\n                setIsProcessing(false);\n                setProcessingProgress(100);\n                toast.success('🎉 Video processing completed!');\n              } else if (data.type === 'error') {\n                console.error('❌ WebSocket error:', data.error);\n                toast.error(`Error: ${data.error}`);\n                setIsProcessing(false);\n              }\n            } catch (error) {\n              console.error('❌ Error parsing WebSocket message:', error);\n            }\n          };\n          ws.onerror = error => {\n            console.error('❌ WebSocket error:', error);\n            toast.error('WebSocket connection error');\n          };\n          ws.onclose = event => {\n            console.log('🔌 WebSocket closed:', event.code, event.reason);\n            if (event.code !== 1000) {\n              // Not a normal closure\n              toast.warning('WebSocket connection lost');\n            }\n          };\n        } catch (wsError) {\n          console.error('❌ WebSocket connection failed:', wsError);\n          toast.warning('Real-time updates unavailable');\n        }\n      }\n      toast.success('🎬 Video processing started successfully!');\n      return result;\n    } catch (error) {\n      console.error('❌ Processing error:', error);\n      toast.error(`Processing failed: ${error.message}`);\n      setIsProcessing(false);\n      setProcessingProgress(0);\n      throw error;\n    }\n  }, [selectedFile, fps, setIsProcessing, setProcessingProgress, setDetections, setViolations, onSessionUpdate, wsRef, API_BASE_URL]);\n  const stopProcessing = useCallback(async () => {\n    try {\n      // Close WebSocket connection\n      if (wsRef !== null && wsRef !== void 0 && wsRef.current) {\n        wsRef.current.close(1000, 'User stopped processing');\n        wsRef.current = null;\n      }\n      console.log('✅ Processing stopped successfully');\n      toast.success('⏹️ Video processing stopped');\n\n      // Note: Backend doesn't seem to have a stop endpoint yet\n      // For now, just close the WebSocket and clean up the UI\n    } catch (error) {\n      console.error('❌ Error stopping processing:', error);\n      toast.warning('Error stopping processing, but cleaned up locally');\n    } finally {\n      setIsProcessing(false);\n      setProcessingProgress(0);\n    }\n  }, [wsRef, setIsProcessing, setProcessingProgress]);\n  const getProcessingStatus = useCallback(async sessionId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/video/status/${sessionId}`);\n      if (!response.ok) {\n        throw new Error(`Status check failed: ${response.statusText}`);\n      }\n      const status = await response.json();\n      return status;\n    } catch (error) {\n      console.error('❌ Error getting processing status:', error);\n      return null;\n    }\n  }, [API_BASE_URL]);\n  return {\n    startProcessing,\n    stopProcessing,\n    getProcessingStatus,\n    uploadVideo\n  };\n};\n_s(useVideoProcessing, \"Xn4dEh8Iwnot/7WA5jC6OUTJZdY=\");\nexport default useVideoProcessing;","map":{"version":3,"names":["useCallback","toast","useVideoProcessing","selectedFile","fps","setIsProcessing","setProcessingProgress","setDetections","setViolations","onSessionUpdate","wsRef","_s","API_BASE_URL","process","env","REACT_APP_API_URL","uploadVideo","file","formData","FormData","append","response","fetch","method","body","ok","Error","statusText","result","json","console","log","error","startProcessing","info","uploadResult","success","processingRequest","source_type","source_path","absolute_path","enable_violation_detection","headers","JSON","stringify","errorData","text","websocket_url","wsUrl","replace","window","location","hostname","ws","WebSocket","current","onopen","onmessage","event","data","parse","type","detections","frame_data","prev","violation","description","progress","onerror","onclose","code","reason","warning","wsError","message","stopProcessing","close","getProcessingStatus","sessionId","status"],"sources":["C:/Users/ayoub/OneDrive/Desktop/eagleAI/pizza_store_detection/services/frontend/src/components/VideoProcessor/hooks/useVideoProcessing.js"],"sourcesContent":["/**\n * useVideoProcessing - Custom hook for video processing operations\n */\n\nimport { useCallback } from 'react';\nimport { toast } from 'react-toastify';\n\nconst useVideoProcessing = ({\n  selectedFile,\n  fps,\n  setIsProcessing,\n  setProcessingProgress,\n  setDetections,\n  setViolations,\n  onSessionUpdate,\n  wsRef\n}) => {\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  const uploadVideo = async (file) => {\n    const formData = new FormData();\n    formData.append('video', file);\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/upload`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      console.log('📤 Upload successful:', result);\n      return result;\n    } catch (error) {\n      console.error('❌ Upload error:', error);\n      throw error;\n    }\n  };\n\n  const startProcessing = useCallback(async () => {\n    if (!selectedFile) {\n      toast.error('Please select a video file first');\n      return;\n    }\n\n    try {\n      setIsProcessing(true);\n      setProcessingProgress(0);\n      setDetections([]);\n      setViolations([]);\n\n      toast.info('📤 Uploading video...');\n\n      // Upload video first\n      const uploadResult = await uploadVideo(selectedFile);\n      \n      toast.success('✅ Video uploaded successfully');\n      toast.info('🚀 Starting video processing...');\n\n      // Start video processing\n      const processingRequest = {\n        source_type: 'file',\n        source_path: uploadResult.absolute_path,\n        fps: fps,\n        enable_violation_detection: true\n      };\n\n      console.log('🎬 Starting processing with request:', processingRequest);\n\n      const response = await fetch(`${API_BASE_URL}/video/start`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(processingRequest),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`Processing failed: ${errorData}`);\n      }\n\n      const result = await response.json();\n      console.log('✅ Processing started:', result);\n\n      if (onSessionUpdate) {\n        onSessionUpdate(result);\n      }\n\n      // Connect to WebSocket for real-time updates\n      if (result.websocket_url && wsRef) {\n        const wsUrl = result.websocket_url.replace('localhost', window.location.hostname);\n        console.log('🔌 Connecting to WebSocket:', wsUrl);\n        \n        try {\n          const ws = new WebSocket(wsUrl);\n          wsRef.current = ws;\n\n          ws.onopen = () => {\n            console.log('✅ WebSocket connected');\n            toast.success('🔌 Connected to real-time feed');\n          };\n\n          ws.onmessage = (event) => {\n            try {\n              const data = JSON.parse(event.data);\n              console.log('📨 WebSocket message:', data.type);\n\n              if (data.type === 'frame_update' || data.type === 'frame_processed') {\n                setDetections(data.detections || []);\n                if (data.frame_data) {\n                  // Frame data is handled by useWebSocket hook\n                }\n              } else if (data.type === 'violation_detected') {\n                setViolations(prev => [...prev, data.violation]);\n                toast.error(`🚨 Violation: ${data.violation.description}`);\n              } else if (data.type === 'processing_progress') {\n                setProcessingProgress(data.progress || 0);\n              } else if (data.type === 'processing_complete') {\n                setIsProcessing(false);\n                setProcessingProgress(100);\n                toast.success('🎉 Video processing completed!');\n              } else if (data.type === 'error') {\n                console.error('❌ WebSocket error:', data.error);\n                toast.error(`Error: ${data.error}`);\n                setIsProcessing(false);\n              }\n            } catch (error) {\n              console.error('❌ Error parsing WebSocket message:', error);\n            }\n          };\n\n          ws.onerror = (error) => {\n            console.error('❌ WebSocket error:', error);\n            toast.error('WebSocket connection error');\n          };\n\n          ws.onclose = (event) => {\n            console.log('🔌 WebSocket closed:', event.code, event.reason);\n            if (event.code !== 1000) { // Not a normal closure\n              toast.warning('WebSocket connection lost');\n            }\n          };\n\n        } catch (wsError) {\n          console.error('❌ WebSocket connection failed:', wsError);\n          toast.warning('Real-time updates unavailable');\n        }\n      }\n\n      toast.success('🎬 Video processing started successfully!');\n      return result;\n\n    } catch (error) {\n      console.error('❌ Processing error:', error);\n      toast.error(`Processing failed: ${error.message}`);\n      setIsProcessing(false);\n      setProcessingProgress(0);\n      throw error;\n    }\n  }, [selectedFile, fps, setIsProcessing, setProcessingProgress, setDetections, setViolations, onSessionUpdate, wsRef, API_BASE_URL]);\n\n  const stopProcessing = useCallback(async () => {\n    try {\n      // Close WebSocket connection\n      if (wsRef?.current) {\n        wsRef.current.close(1000, 'User stopped processing');\n        wsRef.current = null;\n      }\n\n      console.log('✅ Processing stopped successfully');\n      toast.success('⏹️ Video processing stopped');\n\n      // Note: Backend doesn't seem to have a stop endpoint yet\n      // For now, just close the WebSocket and clean up the UI\n\n    } catch (error) {\n      console.error('❌ Error stopping processing:', error);\n      toast.warning('Error stopping processing, but cleaned up locally');\n    } finally {\n      setIsProcessing(false);\n      setProcessingProgress(0);\n    }\n  }, [wsRef, setIsProcessing, setProcessingProgress]);\n\n  const getProcessingStatus = useCallback(async (sessionId) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/video/status/${sessionId}`);\n      \n      if (!response.ok) {\n        throw new Error(`Status check failed: ${response.statusText}`);\n      }\n\n      const status = await response.json();\n      return status;\n    } catch (error) {\n      console.error('❌ Error getting processing status:', error);\n      return null;\n    }\n  }, [API_BASE_URL]);\n\n  return {\n    startProcessing,\n    stopProcessing,\n    getProcessingStatus,\n    uploadVideo\n  };\n};\n\nexport default useVideoProcessing;\n"],"mappings":";AAAA;AACA;AACA;;AAEA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,MAAMC,kBAAkB,GAAGA,CAAC;EAC1BC,YAAY;EACZC,GAAG;EACHC,eAAe;EACfC,qBAAqB;EACrBC,aAAa;EACbC,aAAa;EACbC,eAAe;EACfC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EAE7E,MAAMC,WAAW,GAAG,MAAOC,IAAI,IAAK;IAClC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC;IAE9B,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,YAAY,aAAa,EAAE;QACzDW,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,kBAAkBL,QAAQ,CAACM,UAAU,EAAE,CAAC;MAC1D;MAEA,MAAMC,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,MAAM,CAAC;MAC5C,OAAOA,MAAM;IACf,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMC,eAAe,GAAGjC,WAAW,CAAC,YAAY;IAC9C,IAAI,CAACG,YAAY,EAAE;MACjBF,KAAK,CAAC+B,KAAK,CAAC,kCAAkC,CAAC;MAC/C;IACF;IAEA,IAAI;MACF3B,eAAe,CAAC,IAAI,CAAC;MACrBC,qBAAqB,CAAC,CAAC,CAAC;MACxBC,aAAa,CAAC,EAAE,CAAC;MACjBC,aAAa,CAAC,EAAE,CAAC;MAEjBP,KAAK,CAACiC,IAAI,CAAC,uBAAuB,CAAC;;MAEnC;MACA,MAAMC,YAAY,GAAG,MAAMnB,WAAW,CAACb,YAAY,CAAC;MAEpDF,KAAK,CAACmC,OAAO,CAAC,+BAA+B,CAAC;MAC9CnC,KAAK,CAACiC,IAAI,CAAC,iCAAiC,CAAC;;MAE7C;MACA,MAAMG,iBAAiB,GAAG;QACxBC,WAAW,EAAE,MAAM;QACnBC,WAAW,EAAEJ,YAAY,CAACK,aAAa;QACvCpC,GAAG,EAAEA,GAAG;QACRqC,0BAA0B,EAAE;MAC9B,CAAC;MAEDX,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEM,iBAAiB,CAAC;MAEtE,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,YAAY,cAAc,EAAE;QAC1DW,MAAM,EAAE,MAAM;QACdmB,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDlB,IAAI,EAAEmB,IAAI,CAACC,SAAS,CAACP,iBAAiB;MACxC,CAAC,CAAC;MAEF,IAAI,CAAChB,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAMoB,SAAS,GAAG,MAAMxB,QAAQ,CAACyB,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIpB,KAAK,CAAC,sBAAsBmB,SAAS,EAAE,CAAC;MACpD;MAEA,MAAMjB,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,MAAM,CAAC;MAE5C,IAAInB,eAAe,EAAE;QACnBA,eAAe,CAACmB,MAAM,CAAC;MACzB;;MAEA;MACA,IAAIA,MAAM,CAACmB,aAAa,IAAIrC,KAAK,EAAE;QACjC,MAAMsC,KAAK,GAAGpB,MAAM,CAACmB,aAAa,CAACE,OAAO,CAAC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAAC;QACjFtB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEiB,KAAK,CAAC;QAEjD,IAAI;UACF,MAAMK,EAAE,GAAG,IAAIC,SAAS,CAACN,KAAK,CAAC;UAC/BtC,KAAK,CAAC6C,OAAO,GAAGF,EAAE;UAElBA,EAAE,CAACG,MAAM,GAAG,MAAM;YAChB1B,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;YACpC9B,KAAK,CAACmC,OAAO,CAAC,gCAAgC,CAAC;UACjD,CAAC;UAEDiB,EAAE,CAACI,SAAS,GAAIC,KAAK,IAAK;YACxB,IAAI;cACF,MAAMC,IAAI,GAAGhB,IAAI,CAACiB,KAAK,CAACF,KAAK,CAACC,IAAI,CAAC;cACnC7B,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE4B,IAAI,CAACE,IAAI,CAAC;cAE/C,IAAIF,IAAI,CAACE,IAAI,KAAK,cAAc,IAAIF,IAAI,CAACE,IAAI,KAAK,iBAAiB,EAAE;gBACnEtD,aAAa,CAACoD,IAAI,CAACG,UAAU,IAAI,EAAE,CAAC;gBACpC,IAAIH,IAAI,CAACI,UAAU,EAAE;kBACnB;gBAAA;cAEJ,CAAC,MAAM,IAAIJ,IAAI,CAACE,IAAI,KAAK,oBAAoB,EAAE;gBAC7CrD,aAAa,CAACwD,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEL,IAAI,CAACM,SAAS,CAAC,CAAC;gBAChDhE,KAAK,CAAC+B,KAAK,CAAC,iBAAiB2B,IAAI,CAACM,SAAS,CAACC,WAAW,EAAE,CAAC;cAC5D,CAAC,MAAM,IAAIP,IAAI,CAACE,IAAI,KAAK,qBAAqB,EAAE;gBAC9CvD,qBAAqB,CAACqD,IAAI,CAACQ,QAAQ,IAAI,CAAC,CAAC;cAC3C,CAAC,MAAM,IAAIR,IAAI,CAACE,IAAI,KAAK,qBAAqB,EAAE;gBAC9CxD,eAAe,CAAC,KAAK,CAAC;gBACtBC,qBAAqB,CAAC,GAAG,CAAC;gBAC1BL,KAAK,CAACmC,OAAO,CAAC,gCAAgC,CAAC;cACjD,CAAC,MAAM,IAAIuB,IAAI,CAACE,IAAI,KAAK,OAAO,EAAE;gBAChC/B,OAAO,CAACE,KAAK,CAAC,oBAAoB,EAAE2B,IAAI,CAAC3B,KAAK,CAAC;gBAC/C/B,KAAK,CAAC+B,KAAK,CAAC,UAAU2B,IAAI,CAAC3B,KAAK,EAAE,CAAC;gBACnC3B,eAAe,CAAC,KAAK,CAAC;cACxB;YACF,CAAC,CAAC,OAAO2B,KAAK,EAAE;cACdF,OAAO,CAACE,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;YAC5D;UACF,CAAC;UAEDqB,EAAE,CAACe,OAAO,GAAIpC,KAAK,IAAK;YACtBF,OAAO,CAACE,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;YAC1C/B,KAAK,CAAC+B,KAAK,CAAC,4BAA4B,CAAC;UAC3C,CAAC;UAEDqB,EAAE,CAACgB,OAAO,GAAIX,KAAK,IAAK;YACtB5B,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE2B,KAAK,CAACY,IAAI,EAAEZ,KAAK,CAACa,MAAM,CAAC;YAC7D,IAAIb,KAAK,CAACY,IAAI,KAAK,IAAI,EAAE;cAAE;cACzBrE,KAAK,CAACuE,OAAO,CAAC,2BAA2B,CAAC;YAC5C;UACF,CAAC;QAEH,CAAC,CAAC,OAAOC,OAAO,EAAE;UAChB3C,OAAO,CAACE,KAAK,CAAC,gCAAgC,EAAEyC,OAAO,CAAC;UACxDxE,KAAK,CAACuE,OAAO,CAAC,+BAA+B,CAAC;QAChD;MACF;MAEAvE,KAAK,CAACmC,OAAO,CAAC,2CAA2C,CAAC;MAC1D,OAAOR,MAAM;IAEf,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C/B,KAAK,CAAC+B,KAAK,CAAC,sBAAsBA,KAAK,CAAC0C,OAAO,EAAE,CAAC;MAClDrE,eAAe,CAAC,KAAK,CAAC;MACtBC,qBAAqB,CAAC,CAAC,CAAC;MACxB,MAAM0B,KAAK;IACb;EACF,CAAC,EAAE,CAAC7B,YAAY,EAAEC,GAAG,EAAEC,eAAe,EAAEC,qBAAqB,EAAEC,aAAa,EAAEC,aAAa,EAAEC,eAAe,EAAEC,KAAK,EAAEE,YAAY,CAAC,CAAC;EAEnI,MAAM+D,cAAc,GAAG3E,WAAW,CAAC,YAAY;IAC7C,IAAI;MACF;MACA,IAAIU,KAAK,aAALA,KAAK,eAALA,KAAK,CAAE6C,OAAO,EAAE;QAClB7C,KAAK,CAAC6C,OAAO,CAACqB,KAAK,CAAC,IAAI,EAAE,yBAAyB,CAAC;QACpDlE,KAAK,CAAC6C,OAAO,GAAG,IAAI;MACtB;MAEAzB,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD9B,KAAK,CAACmC,OAAO,CAAC,6BAA6B,CAAC;;MAE5C;MACA;IAEF,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD/B,KAAK,CAACuE,OAAO,CAAC,mDAAmD,CAAC;IACpE,CAAC,SAAS;MACRnE,eAAe,CAAC,KAAK,CAAC;MACtBC,qBAAqB,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACI,KAAK,EAAEL,eAAe,EAAEC,qBAAqB,CAAC,CAAC;EAEnD,MAAMuE,mBAAmB,GAAG7E,WAAW,CAAC,MAAO8E,SAAS,IAAK;IAC3D,IAAI;MACF,MAAMzD,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,YAAY,iBAAiBkE,SAAS,EAAE,CAAC;MAEzE,IAAI,CAACzD,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwBL,QAAQ,CAACM,UAAU,EAAE,CAAC;MAChE;MAEA,MAAMoD,MAAM,GAAG,MAAM1D,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpC,OAAOkD,MAAM;IACf,CAAC,CAAC,OAAO/C,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,OAAO,IAAI;IACb;EACF,CAAC,EAAE,CAACpB,YAAY,CAAC,CAAC;EAElB,OAAO;IACLqB,eAAe;IACf0C,cAAc;IACdE,mBAAmB;IACnB7D;EACF,CAAC;AACH,CAAC;AAACL,EAAA,CA3MIT,kBAAkB;AA6MxB,eAAeA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}