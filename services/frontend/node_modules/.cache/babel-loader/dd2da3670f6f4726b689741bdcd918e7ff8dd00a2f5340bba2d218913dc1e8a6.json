{"ast":null,"code":"/**\n * Real-time Data Service\n * Handles integration with all backend services for live data updates\n */\n\nclass RealTimeDataService {\n  constructor() {\n    this.services = {\n      api_gateway: 'http://localhost:8000',\n      detection: 'http://localhost:8002',\n      violation_detector: 'http://localhost:8003',\n      roi_manager: 'http://localhost:8004',\n      database: 'http://localhost:8005',\n      tracking: 'http://localhost:8006',\n      movement_analyzer: 'http://localhost:8007',\n      worker_tracker: 'http://localhost:8008',\n      enhanced_coordinator: 'http://localhost:8009'\n    };\n    this.websocket = null;\n    this.isConnected = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 3000;\n\n    // Data callbacks\n    this.callbacks = {\n      systemHealth: [],\n      statistics: [],\n      workers: [],\n      violations: [],\n      detections: [],\n      alerts: []\n    };\n\n    // Polling intervals\n    this.intervals = {};\n    this.init();\n  }\n  async init() {\n    console.log('üîÑ Initializing Real-time Data Service...');\n\n    // Start polling for different data types\n    this.startPolling();\n\n    // Try to establish WebSocket connection for real-time updates\n    this.connectWebSocket();\n  }\n\n  // WebSocket connection for real-time updates\n  connectWebSocket() {\n    try {\n      // Try to connect to enhanced coordinator WebSocket (if available)\n      this.websocket = new WebSocket('ws://localhost:8009/ws');\n      this.websocket.onopen = () => {\n        console.log('‚úÖ WebSocket connected to Enhanced Coordinator');\n        this.isConnected = true;\n        this.reconnectAttempts = 0;\n      };\n      this.websocket.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          this.handleWebSocketMessage(data);\n        } catch (error) {\n          console.error('‚ùå Error parsing WebSocket message:', error);\n        }\n      };\n      this.websocket.onclose = () => {\n        console.log('üîå WebSocket disconnected');\n        this.isConnected = false;\n        this.attemptReconnect();\n      };\n      this.websocket.onerror = error => {\n        console.error('‚ùå WebSocket error:', error);\n      };\n    } catch (error) {\n      console.log('‚ö†Ô∏è WebSocket not available, using polling only');\n      this.isConnected = false;\n    }\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`üîÑ Attempting WebSocket reconnection (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      setTimeout(() => {\n        this.connectWebSocket();\n      }, this.reconnectDelay);\n    } else {\n      console.log('‚ùå Max WebSocket reconnection attempts reached, using polling only');\n    }\n  }\n  handleWebSocketMessage(data) {\n    switch (data.type) {\n      case 'violation':\n        this.notifyCallbacks('violations', data.payload);\n        this.notifyCallbacks('alerts', {\n          id: Date.now(),\n          type: 'violation',\n          title: 'New violation detected',\n          description: data.payload.description || 'Scooper violation detected',\n          time: new Date().toLocaleTimeString('en-US', {\n            hour12: false\n          }),\n          severity: 'high'\n        });\n        break;\n      case 'detection':\n        this.notifyCallbacks('detections', data.payload);\n        break;\n      case 'worker_update':\n        this.notifyCallbacks('workers', data.payload);\n        break;\n      case 'statistics':\n        this.notifyCallbacks('statistics', data.payload);\n        break;\n      default:\n        console.log('üì® Unknown WebSocket message type:', data.type);\n    }\n  }\n\n  // Start polling for data updates\n  startPolling() {\n    // System health - every 30 seconds\n    this.intervals.health = setInterval(() => {\n      this.fetchSystemHealth();\n    }, 30000);\n\n    // Statistics - every 5 seconds\n    this.intervals.statistics = setInterval(() => {\n      this.fetchStatistics();\n    }, 5000);\n\n    // Workers - every 3 seconds\n    this.intervals.workers = setInterval(() => {\n      this.fetchWorkers();\n    }, 3000);\n\n    // Violations - every 2 seconds\n    this.intervals.violations = setInterval(() => {\n      this.fetchRecentViolations();\n    }, 2000);\n\n    // Initial fetch\n    this.fetchSystemHealth();\n    this.fetchStatistics();\n    this.fetchWorkers();\n    this.fetchRecentViolations();\n  }\n\n  // API calls to backend services\n  async fetchSystemHealth() {\n    try {\n      const response = await fetch(`${this.services.enhanced_coordinator}/health`);\n      if (response.ok) {\n        const health = await response.json();\n        this.notifyCallbacks('systemHealth', health);\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to fetch system health:', error);\n    }\n  }\n  async fetchStatistics() {\n    try {\n      const response = await fetch(`${this.services.enhanced_coordinator}/statistics`);\n      if (response.ok) {\n        const stats = await response.json();\n        this.notifyCallbacks('statistics', {\n          violations: stats.total_violations || 3,\n          complianceRate: stats.compliance_rate || 97.2,\n          activeWorkers: stats.active_workers || 2,\n          totalInteractions: stats.total_interactions || 156\n        });\n      }\n    } catch (error) {\n      // Fallback to mock data if service unavailable\n      this.notifyCallbacks('statistics', {\n        violations: 3,\n        complianceRate: 97.2,\n        activeWorkers: 2,\n        totalInteractions: 156 + Math.floor(Math.random() * 5)\n      });\n    }\n  }\n  async fetchWorkers() {\n    try {\n      const response = await fetch(`${this.services.worker_tracker}/workers`);\n      if (response.ok) {\n        const workersData = await response.json();\n\n        // Transform backend data to frontend format\n        const workers = Object.entries(workersData).map(([id, worker], index) => ({\n          id,\n          name: `Worker ${worker.worker_number || index + 1}`,\n          initials: `W${worker.worker_number || index + 1}`,\n          station: `Station ${String.fromCharCode(65 + index)}`,\n          status: worker.is_active ? 'active' : 'inactive',\n          color: index % 2 === 0 ? 'secondary' : 'primary'\n        }));\n        this.notifyCallbacks('workers', workers);\n      }\n    } catch (error) {\n      // Fallback to mock data\n      this.notifyCallbacks('workers', [{\n        id: 'worker_1',\n        name: 'Sarah Johnson',\n        initials: 'SJ',\n        station: 'Station A',\n        status: 'active',\n        color: 'secondary'\n      }, {\n        id: 'worker_2',\n        name: 'Mike Rodriguez',\n        initials: 'MR',\n        station: 'Station B',\n        status: 'active',\n        color: 'primary'\n      }]);\n    }\n  }\n  async fetchRecentViolations() {\n    try {\n      const response = await fetch(`${this.services.api_gateway}/violations?limit=5`);\n      if (response.ok) {\n        const violations = await response.json();\n\n        // Transform to alerts format\n        const alerts = violations.map(violation => ({\n          id: violation.id,\n          type: 'violation',\n          title: 'Scooper violation detected',\n          description: violation.description || `Worker grabbed protein without scooper - Camera ${violation.camera_id || 1}`,\n          time: new Date(violation.timestamp).toLocaleTimeString('en-US', {\n            hour12: false\n          }),\n          severity: 'high'\n        }));\n        this.notifyCallbacks('alerts', alerts);\n      }\n    } catch (error) {\n      // Fallback to mock alerts\n      this.notifyCallbacks('alerts', [{\n        id: 1,\n        type: 'violation',\n        title: 'Scooper violation detected',\n        description: 'Worker grabbed protein without scooper - Camera 1',\n        time: new Date().toLocaleTimeString('en-US', {\n          hour12: false\n        }),\n        severity: 'high'\n      }]);\n    }\n  }\n\n  // Camera and ROI management\n  async getCameras() {\n    try {\n      const response = await fetch(`${this.services.api_gateway}/cameras`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to fetch cameras:', error);\n    }\n\n    // Fallback cameras\n    return [{\n      id: 'camera_1',\n      name: 'Camera 1 - Main Counter'\n    }, {\n      id: 'camera_2',\n      name: 'Camera 2 - Prep Station'\n    }, {\n      id: 'camera_3',\n      name: 'Camera 3 - Storage Area'\n    }];\n  }\n  async getROIZones() {\n    try {\n      const response = await fetch(`${this.services.roi_manager}/rois`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to fetch ROI zones:', error);\n    }\n    return [];\n  }\n\n  // Callback management\n  subscribe(eventType, callback) {\n    if (this.callbacks[eventType]) {\n      this.callbacks[eventType].push(callback);\n    }\n\n    // Return unsubscribe function\n    return () => {\n      if (this.callbacks[eventType]) {\n        const index = this.callbacks[eventType].indexOf(callback);\n        if (index > -1) {\n          this.callbacks[eventType].splice(index, 1);\n        }\n      }\n    };\n  }\n  notifyCallbacks(eventType, data) {\n    if (this.callbacks[eventType]) {\n      this.callbacks[eventType].forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`‚ùå Error in ${eventType} callback:`, error);\n        }\n      });\n    }\n  }\n\n  // Control methods\n  async toggleDetectionSensitivity() {\n    try {\n      const response = await fetch(`${this.services.enhanced_coordinator}/toggle_sensitivity`, {\n        method: 'POST'\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('‚ùå Failed to toggle detection sensitivity:', error);\n      return false;\n    }\n  }\n  async toggleAutoRecording() {\n    try {\n      const response = await fetch(`${this.services.enhanced_coordinator}/toggle_recording`, {\n        method: 'POST'\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('‚ùå Failed to toggle auto recording:', error);\n      return false;\n    }\n  }\n\n  // Cleanup\n  destroy() {\n    // Clear all intervals\n    Object.values(this.intervals).forEach(interval => {\n      clearInterval(interval);\n    });\n\n    // Close WebSocket\n    if (this.websocket) {\n      this.websocket.close();\n    }\n\n    // Clear callbacks\n    Object.keys(this.callbacks).forEach(key => {\n      this.callbacks[key] = [];\n    });\n    console.log('üßπ Real-time Data Service destroyed');\n  }\n}\n\n// Create singleton instance\nconst realTimeDataService = new RealTimeDataService();\nexport default realTimeDataService;","map":{"version":3,"names":["RealTimeDataService","constructor","services","api_gateway","detection","violation_detector","roi_manager","database","tracking","movement_analyzer","worker_tracker","enhanced_coordinator","websocket","isConnected","reconnectAttempts","maxReconnectAttempts","reconnectDelay","callbacks","systemHealth","statistics","workers","violations","detections","alerts","intervals","init","console","log","startPolling","connectWebSocket","WebSocket","onopen","onmessage","event","data","JSON","parse","handleWebSocketMessage","error","onclose","attemptReconnect","onerror","setTimeout","type","notifyCallbacks","payload","id","Date","now","title","description","time","toLocaleTimeString","hour12","severity","health","setInterval","fetchSystemHealth","fetchStatistics","fetchWorkers","fetchRecentViolations","response","fetch","ok","json","stats","total_violations","complianceRate","compliance_rate","activeWorkers","active_workers","totalInteractions","total_interactions","Math","floor","random","workersData","Object","entries","map","worker","index","name","worker_number","initials","station","String","fromCharCode","status","is_active","color","violation","camera_id","timestamp","getCameras","getROIZones","subscribe","eventType","callback","push","indexOf","splice","forEach","toggleDetectionSensitivity","method","toggleAutoRecording","destroy","values","interval","clearInterval","close","keys","key","realTimeDataService"],"sources":["C:/Users/ayoub/OneDrive/Desktop/eagleAI/pizza_store_detection/services/frontend/src/services/RealTimeDataService.js"],"sourcesContent":["/**\n * Real-time Data Service\n * Handles integration with all backend services for live data updates\n */\n\nclass RealTimeDataService {\n  constructor() {\n    this.services = {\n      api_gateway: 'http://localhost:8000',\n      detection: 'http://localhost:8002',\n      violation_detector: 'http://localhost:8003',\n      roi_manager: 'http://localhost:8004',\n      database: 'http://localhost:8005',\n      tracking: 'http://localhost:8006',\n      movement_analyzer: 'http://localhost:8007',\n      worker_tracker: 'http://localhost:8008',\n      enhanced_coordinator: 'http://localhost:8009'\n    };\n    \n    this.websocket = null;\n    this.isConnected = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 3000;\n    \n    // Data callbacks\n    this.callbacks = {\n      systemHealth: [],\n      statistics: [],\n      workers: [],\n      violations: [],\n      detections: [],\n      alerts: []\n    };\n    \n    // Polling intervals\n    this.intervals = {};\n    \n    this.init();\n  }\n  \n  async init() {\n    console.log('üîÑ Initializing Real-time Data Service...');\n    \n    // Start polling for different data types\n    this.startPolling();\n    \n    // Try to establish WebSocket connection for real-time updates\n    this.connectWebSocket();\n  }\n  \n  // WebSocket connection for real-time updates\n  connectWebSocket() {\n    try {\n      // Try to connect to enhanced coordinator WebSocket (if available)\n      this.websocket = new WebSocket('ws://localhost:8009/ws');\n      \n      this.websocket.onopen = () => {\n        console.log('‚úÖ WebSocket connected to Enhanced Coordinator');\n        this.isConnected = true;\n        this.reconnectAttempts = 0;\n      };\n      \n      this.websocket.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          this.handleWebSocketMessage(data);\n        } catch (error) {\n          console.error('‚ùå Error parsing WebSocket message:', error);\n        }\n      };\n      \n      this.websocket.onclose = () => {\n        console.log('üîå WebSocket disconnected');\n        this.isConnected = false;\n        this.attemptReconnect();\n      };\n      \n      this.websocket.onerror = (error) => {\n        console.error('‚ùå WebSocket error:', error);\n      };\n      \n    } catch (error) {\n      console.log('‚ö†Ô∏è WebSocket not available, using polling only');\n      this.isConnected = false;\n    }\n  }\n  \n  attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`üîÑ Attempting WebSocket reconnection (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      \n      setTimeout(() => {\n        this.connectWebSocket();\n      }, this.reconnectDelay);\n    } else {\n      console.log('‚ùå Max WebSocket reconnection attempts reached, using polling only');\n    }\n  }\n  \n  handleWebSocketMessage(data) {\n    switch (data.type) {\n      case 'violation':\n        this.notifyCallbacks('violations', data.payload);\n        this.notifyCallbacks('alerts', {\n          id: Date.now(),\n          type: 'violation',\n          title: 'New violation detected',\n          description: data.payload.description || 'Scooper violation detected',\n          time: new Date().toLocaleTimeString('en-US', { hour12: false }),\n          severity: 'high'\n        });\n        break;\n        \n      case 'detection':\n        this.notifyCallbacks('detections', data.payload);\n        break;\n        \n      case 'worker_update':\n        this.notifyCallbacks('workers', data.payload);\n        break;\n        \n      case 'statistics':\n        this.notifyCallbacks('statistics', data.payload);\n        break;\n        \n      default:\n        console.log('üì® Unknown WebSocket message type:', data.type);\n    }\n  }\n  \n  // Start polling for data updates\n  startPolling() {\n    // System health - every 30 seconds\n    this.intervals.health = setInterval(() => {\n      this.fetchSystemHealth();\n    }, 30000);\n    \n    // Statistics - every 5 seconds\n    this.intervals.statistics = setInterval(() => {\n      this.fetchStatistics();\n    }, 5000);\n    \n    // Workers - every 3 seconds\n    this.intervals.workers = setInterval(() => {\n      this.fetchWorkers();\n    }, 3000);\n    \n    // Violations - every 2 seconds\n    this.intervals.violations = setInterval(() => {\n      this.fetchRecentViolations();\n    }, 2000);\n    \n    // Initial fetch\n    this.fetchSystemHealth();\n    this.fetchStatistics();\n    this.fetchWorkers();\n    this.fetchRecentViolations();\n  }\n  \n  // API calls to backend services\n  async fetchSystemHealth() {\n    try {\n      const response = await fetch(`${this.services.enhanced_coordinator}/health`);\n      if (response.ok) {\n        const health = await response.json();\n        this.notifyCallbacks('systemHealth', health);\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to fetch system health:', error);\n    }\n  }\n  \n  async fetchStatistics() {\n    try {\n      const response = await fetch(`${this.services.enhanced_coordinator}/statistics`);\n      if (response.ok) {\n        const stats = await response.json();\n        this.notifyCallbacks('statistics', {\n          violations: stats.total_violations || 3,\n          complianceRate: stats.compliance_rate || 97.2,\n          activeWorkers: stats.active_workers || 2,\n          totalInteractions: stats.total_interactions || 156\n        });\n      }\n    } catch (error) {\n      // Fallback to mock data if service unavailable\n      this.notifyCallbacks('statistics', {\n        violations: 3,\n        complianceRate: 97.2,\n        activeWorkers: 2,\n        totalInteractions: 156 + Math.floor(Math.random() * 5)\n      });\n    }\n  }\n  \n  async fetchWorkers() {\n    try {\n      const response = await fetch(`${this.services.worker_tracker}/workers`);\n      if (response.ok) {\n        const workersData = await response.json();\n        \n        // Transform backend data to frontend format\n        const workers = Object.entries(workersData).map(([id, worker], index) => ({\n          id,\n          name: `Worker ${worker.worker_number || index + 1}`,\n          initials: `W${worker.worker_number || index + 1}`,\n          station: `Station ${String.fromCharCode(65 + index)}`,\n          status: worker.is_active ? 'active' : 'inactive',\n          color: index % 2 === 0 ? 'secondary' : 'primary'\n        }));\n        \n        this.notifyCallbacks('workers', workers);\n      }\n    } catch (error) {\n      // Fallback to mock data\n      this.notifyCallbacks('workers', [\n        {\n          id: 'worker_1',\n          name: 'Sarah Johnson',\n          initials: 'SJ',\n          station: 'Station A',\n          status: 'active',\n          color: 'secondary'\n        },\n        {\n          id: 'worker_2',\n          name: 'Mike Rodriguez',\n          initials: 'MR',\n          station: 'Station B',\n          status: 'active',\n          color: 'primary'\n        }\n      ]);\n    }\n  }\n  \n  async fetchRecentViolations() {\n    try {\n      const response = await fetch(`${this.services.api_gateway}/violations?limit=5`);\n      if (response.ok) {\n        const violations = await response.json();\n        \n        // Transform to alerts format\n        const alerts = violations.map(violation => ({\n          id: violation.id,\n          type: 'violation',\n          title: 'Scooper violation detected',\n          description: violation.description || `Worker grabbed protein without scooper - Camera ${violation.camera_id || 1}`,\n          time: new Date(violation.timestamp).toLocaleTimeString('en-US', { hour12: false }),\n          severity: 'high'\n        }));\n        \n        this.notifyCallbacks('alerts', alerts);\n      }\n    } catch (error) {\n      // Fallback to mock alerts\n      this.notifyCallbacks('alerts', [\n        {\n          id: 1,\n          type: 'violation',\n          title: 'Scooper violation detected',\n          description: 'Worker grabbed protein without scooper - Camera 1',\n          time: new Date().toLocaleTimeString('en-US', { hour12: false }),\n          severity: 'high'\n        }\n      ]);\n    }\n  }\n  \n  // Camera and ROI management\n  async getCameras() {\n    try {\n      const response = await fetch(`${this.services.api_gateway}/cameras`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to fetch cameras:', error);\n    }\n    \n    // Fallback cameras\n    return [\n      { id: 'camera_1', name: 'Camera 1 - Main Counter' },\n      { id: 'camera_2', name: 'Camera 2 - Prep Station' },\n      { id: 'camera_3', name: 'Camera 3 - Storage Area' }\n    ];\n  }\n  \n  async getROIZones() {\n    try {\n      const response = await fetch(`${this.services.roi_manager}/rois`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to fetch ROI zones:', error);\n    }\n    \n    return [];\n  }\n  \n  // Callback management\n  subscribe(eventType, callback) {\n    if (this.callbacks[eventType]) {\n      this.callbacks[eventType].push(callback);\n    }\n    \n    // Return unsubscribe function\n    return () => {\n      if (this.callbacks[eventType]) {\n        const index = this.callbacks[eventType].indexOf(callback);\n        if (index > -1) {\n          this.callbacks[eventType].splice(index, 1);\n        }\n      }\n    };\n  }\n  \n  notifyCallbacks(eventType, data) {\n    if (this.callbacks[eventType]) {\n      this.callbacks[eventType].forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`‚ùå Error in ${eventType} callback:`, error);\n        }\n      });\n    }\n  }\n  \n  // Control methods\n  async toggleDetectionSensitivity() {\n    try {\n      const response = await fetch(`${this.services.enhanced_coordinator}/toggle_sensitivity`, {\n        method: 'POST'\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('‚ùå Failed to toggle detection sensitivity:', error);\n      return false;\n    }\n  }\n  \n  async toggleAutoRecording() {\n    try {\n      const response = await fetch(`${this.services.enhanced_coordinator}/toggle_recording`, {\n        method: 'POST'\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('‚ùå Failed to toggle auto recording:', error);\n      return false;\n    }\n  }\n  \n  // Cleanup\n  destroy() {\n    // Clear all intervals\n    Object.values(this.intervals).forEach(interval => {\n      clearInterval(interval);\n    });\n    \n    // Close WebSocket\n    if (this.websocket) {\n      this.websocket.close();\n    }\n    \n    // Clear callbacks\n    Object.keys(this.callbacks).forEach(key => {\n      this.callbacks[key] = [];\n    });\n    \n    console.log('üßπ Real-time Data Service destroyed');\n  }\n}\n\n// Create singleton instance\nconst realTimeDataService = new RealTimeDataService();\n\nexport default realTimeDataService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}