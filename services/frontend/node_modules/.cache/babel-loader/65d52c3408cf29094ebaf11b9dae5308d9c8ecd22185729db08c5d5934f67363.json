{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayoub\\\\OneDrive\\\\Desktop\\\\eagleAI\\\\pizza_store_detection\\\\services\\\\frontend\\\\src\\\\components\\\\ROIZoneManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROIZoneManager = ({\n  currentFrame,\n  onZonesUpdate,\n  existingZones = [],\n  isEnabled = true,\n  frameWidth = 640,\n  frameHeight = 480\n}) => {\n  _s();\n  var _zoneTypes$selectedZo;\n  const canvasRef = useRef(null);\n  const [zones, setZones] = useState(existingZones);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentZone, setCurrentZone] = useState(null);\n  const [selectedZoneType, setSelectedZoneType] = useState('sauce_area');\n  const [editingZone, setEditingZone] = useState(null);\n  const [showZones, setShowZones] = useState(true);\n\n  // New polygon drawing states\n  const [drawingMode, setDrawingMode] = useState('polygon'); // Start with polygon for sauce areas\n  const [polygonPoints, setPolygonPoints] = useState([]);\n  const [previewPoint, setPreviewPoint] = useState(null);\n\n  // Zone types with professional configuration\n  const zoneTypes = {\n    sauce_area: {\n      name: 'Sauce Area',\n      color: '#FF6B35',\n      fillColor: 'rgba(255, 107, 53, 0.2)',\n      requiresScooper: true,\n      icon: '🍅',\n      description: 'Sauce dispensing and handling area',\n      preferredShape: 'polygon' // Sauce areas work better with polygons\n    },\n    cheese_area: {\n      name: 'Cheese Area',\n      color: '#FFD23F',\n      fillColor: 'rgba(255, 210, 63, 0.2)',\n      requiresScooper: true,\n      icon: '🧀',\n      description: 'Cheese container and handling area',\n      preferredShape: 'rectangle' // Cheese containers are usually rectangular\n    },\n    meat_area: {\n      name: 'Meat/Protein Area',\n      color: '#FF4757',\n      fillColor: 'rgba(255, 71, 87, 0.2)',\n      requiresScooper: true,\n      icon: '🥓',\n      description: 'Meat and protein ingredient area'\n    },\n    vegetable_area: {\n      name: 'Vegetable Area',\n      color: '#2ED573',\n      fillColor: 'rgba(46, 213, 115, 0.2)',\n      requiresScooper: true,\n      icon: '🥬',\n      description: 'Vegetable and fresh ingredient area'\n    },\n    prep_surface: {\n      name: 'Prep Surface',\n      color: '#5352ED',\n      fillColor: 'rgba(83, 82, 237, 0.2)',\n      requiresScooper: false,\n      icon: '🍕',\n      description: 'Pizza preparation surface (no scooper required)'\n    },\n    cleaning_area: {\n      name: 'Cleaning Area',\n      color: '#00D2D3',\n      fillColor: 'rgba(0, 210, 211, 0.2)',\n      requiresScooper: false,\n      icon: '🧽',\n      description: 'Cleaning and sanitization area'\n    }\n  };\n\n  // Function definitions (moved to top to avoid hoisting issues)\n  const findZoneAtPoint = (x, y) => {\n    // x, y are in natural coordinates, zones are stored in natural coordinates\n    return zones.find(zone => {\n      if (zone.points.length === 2) {\n        const [p1, p2] = zone.points;\n        const inZone = x >= Math.min(p1.x, p2.x) && x <= Math.max(p1.x, p2.x) && y >= Math.min(p1.y, p2.y) && y <= Math.max(p1.y, p2.y);\n        console.log(`🔍 Checking zone ${zone.name}:`, {\n          point: {\n            x,\n            y\n          },\n          zone: {\n            p1,\n            p2\n          },\n          inZone\n        });\n        return inZone;\n      }\n      return false;\n    });\n  };\n  const drawZones = (zonesToDraw = zones) => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      // Canvas might not be ready yet, skip drawing\n      return;\n    }\n    const ctx = canvas.getContext('2d');\n\n    // Get the background image to match its size\n    const backgroundImg = document.getElementById('roi-background-image');\n    let displayWidth, displayHeight, naturalWidth, naturalHeight;\n    if (backgroundImg) {\n      const rect = backgroundImg.getBoundingClientRect();\n      displayWidth = rect.width;\n      displayHeight = rect.height;\n      naturalWidth = backgroundImg.naturalWidth || frameWidth;\n      naturalHeight = backgroundImg.naturalHeight || frameHeight;\n      canvas.width = displayWidth;\n      canvas.height = displayHeight;\n      canvas.style.width = displayWidth + 'px';\n      canvas.style.height = displayHeight + 'px';\n    } else {\n      // Fallback to provided dimensions\n      displayWidth = frameWidth;\n      displayHeight = frameHeight;\n      naturalWidth = frameWidth;\n      naturalHeight = frameHeight;\n      canvas.width = displayWidth;\n      canvas.height = displayHeight;\n    }\n\n    // Calculate scaling factors from natural to display size\n    const scaleX = displayWidth / naturalWidth;\n    const scaleY = displayHeight / naturalHeight;\n    console.log('🎨 Drawing zones on canvas:', {\n      canvasSize: `${canvas.width}x${canvas.height}`,\n      frameSize: `${frameWidth}x${frameHeight}`,\n      naturalSize: `${naturalWidth}x${naturalHeight}`,\n      displaySize: `${displayWidth}x${displayHeight}`,\n      scale: `${scaleX.toFixed(3)}x${scaleY.toFixed(3)}`,\n      zones: zonesToDraw.length,\n      backgroundImg: !!backgroundImg\n    });\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    if (!showZones) return;\n\n    // Draw each zone with proper coordinate scaling\n    zonesToDraw.forEach((zone, index) => {\n      const zoneConfig = zoneTypes[zone.type];\n      if (zone.shape === 'polygon' && zone.points.length >= 3) {\n        drawPolygonZone(ctx, zone, zoneConfig, scaleX, scaleY);\n      } else if (zone.points.length >= 2) {\n        drawRectangleZone(ctx, zone, zoneConfig, scaleX, scaleY);\n      }\n    });\n\n    // Draw current polygon being drawn\n    if (drawingMode === 'polygon' && polygonPoints.length > 0) {\n      console.log('🎨 Drawing polygon preview with', polygonPoints.length, 'points');\n      drawPolygonPreview(ctx, polygonPoints, previewPoint, zoneTypes[selectedZoneType]);\n    }\n\n    // Draw current zone being drawn (rectangle mode)\n    if (drawingMode === 'rectangle' && currentZone && currentZone.points.length === 2) {\n      const zoneConfig = zoneTypes[currentZone.type];\n      const [p1, p2] = currentZone.points;\n      ctx.strokeStyle = zoneConfig.color;\n      ctx.lineWidth = 3;\n      ctx.setLineDash([10, 5]);\n      ctx.strokeRect(Math.min(p1.x, p2.x), Math.min(p1.y, p2.y), Math.abs(p2.x - p1.x), Math.abs(p2.y - p1.y));\n    }\n  };\n  const drawPolygonZone = (ctx, zone, zoneConfig, scaleX, scaleY) => {\n    const isPreviewZone = zone.isPreview === true;\n\n    // Scale points from natural to display coordinates (unless it's a preview)\n    const scaledPoints = zone.points.map(point => {\n      if (isPreviewZone) {\n        return point; // Already in display coordinates\n      } else {\n        return {\n          x: point.x * scaleX,\n          y: point.y * scaleY\n        };\n      }\n    });\n\n    // Draw polygon\n    ctx.save();\n    ctx.strokeStyle = zoneConfig.color;\n    ctx.fillStyle = zoneConfig.fillColor;\n    ctx.lineWidth = isPreviewZone ? 3 : 2;\n    ctx.setLineDash(isPreviewZone ? [5, 5] : []);\n    ctx.beginPath();\n    ctx.moveTo(scaledPoints[0].x, scaledPoints[0].y);\n    for (let i = 1; i < scaledPoints.length; i++) {\n      ctx.lineTo(scaledPoints[i].x, scaledPoints[i].y);\n    }\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n\n    // Draw points\n    scaledPoints.forEach((point, index) => {\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, 4, 0, 2 * Math.PI);\n      ctx.fillStyle = zoneConfig.color;\n      ctx.fill();\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    });\n\n    // Draw zone label\n    const centerX = scaledPoints.reduce((sum, p) => sum + p.x, 0) / scaledPoints.length;\n    const centerY = scaledPoints.reduce((sum, p) => sum + p.y, 0) / scaledPoints.length;\n    ctx.fillStyle = '#fff';\n    ctx.font = 'bold 12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(`${zoneConfig.icon} ${zone.name}`, centerX, centerY);\n    ctx.restore();\n  };\n  const drawPolygonPreview = (ctx, points, previewPoint, zoneConfig) => {\n    console.log('🔺 drawPolygonPreview called with', points.length, 'points', points);\n    if (points.length === 0) return;\n    ctx.save();\n    ctx.strokeStyle = zoneConfig.color;\n    ctx.lineWidth = 3;\n    ctx.setLineDash([5, 5]);\n\n    // Draw lines between points\n    ctx.beginPath();\n    ctx.moveTo(points[0].x, points[0].y);\n    for (let i = 1; i < points.length; i++) {\n      ctx.lineTo(points[i].x, points[i].y);\n    }\n\n    // Draw preview line to mouse\n    if (previewPoint) {\n      ctx.lineTo(previewPoint.x, previewPoint.y);\n    }\n    ctx.stroke();\n\n    // Draw points with special styling for first point\n    points.forEach((point, index) => {\n      const isFirstPoint = index === 0;\n      const radius = isFirstPoint && points.length > 2 ? 8 : 6;\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = isFirstPoint && points.length > 2 ? '#00FF88' : zoneConfig.color;\n      ctx.fill();\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = isFirstPoint && points.length > 2 ? 3 : 2;\n      ctx.stroke();\n\n      // Draw point number\n      ctx.fillStyle = '#fff';\n      ctx.font = isFirstPoint ? 'bold 11px Arial' : '10px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText((index + 1).toString(), point.x, point.y + 3);\n\n      // Add \"CLOSE\" text near first point when polygon can be closed\n      if (isFirstPoint && points.length > 2) {\n        ctx.fillStyle = '#00FF88';\n        ctx.font = 'bold 9px Arial';\n        ctx.fillText('CLOSE', point.x, point.y - 12);\n      }\n    });\n    ctx.restore();\n  };\n  const drawRectangleZone = (ctx, zone, zoneConfig, scaleX, scaleY) => {\n    const [p1, p2] = zone.points;\n    const isPreviewZone = zone.isPreview === true;\n\n    // Scale coordinates from natural to display (unless it's a preview)\n    let x1, y1, x2, y2;\n    if (isPreviewZone) {\n      x1 = p1.x;\n      y1 = p1.y;\n      x2 = p2.x;\n      y2 = p2.y;\n    } else {\n      x1 = p1.x * scaleX;\n      y1 = p1.y * scaleY;\n      x2 = p2.x * scaleX;\n      y2 = p2.y * scaleY;\n    }\n    const width = Math.abs(x2 - x1);\n    const height = Math.abs(y2 - y1);\n    const startX = Math.min(x1, x2);\n    const startY = Math.min(y1, y2);\n\n    // Draw rectangle\n    ctx.save();\n    ctx.fillStyle = zoneConfig.fillColor;\n    ctx.fillRect(startX, startY, width, height);\n    ctx.strokeStyle = zoneConfig.color;\n    ctx.lineWidth = isPreviewZone ? 3 : 2;\n    ctx.setLineDash(isPreviewZone ? [10, 5] : []);\n    ctx.strokeRect(startX, startY, width, height);\n\n    // Draw zone label\n    const labelX = startX + width / 2;\n    const labelY = startY + height / 2;\n    ctx.fillStyle = '#fff';\n    ctx.font = 'bold 14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(`${zoneConfig.icon} ${zone.name || zoneConfig.name}`, labelX, labelY);\n\n    // Draw requirement text\n    const reqText = zone.requiresScooper ? 'Scooper Required' : 'No Scooper Required';\n    ctx.font = '12px Arial';\n    ctx.fillStyle = zone.requiresScooper ? '#FF4757' : '#2ED573';\n    ctx.fillText(reqText, labelX, labelY + 18);\n    ctx.restore();\n  };\n  useEffect(() => {\n    if (onZonesUpdate) {\n      onZonesUpdate(zones);\n    }\n  }, [zones, onZonesUpdate]);\n\n  // Auto-switch drawing mode based on zone type preference\n  useEffect(() => {\n    const zoneConfig = zoneTypes[selectedZoneType];\n    if (zoneConfig && zoneConfig.preferredShape) {\n      setDrawingMode(zoneConfig.preferredShape);\n      console.log(`🎯 Auto-switched to ${zoneConfig.preferredShape} mode for ${zoneConfig.name}`);\n    }\n  }, [selectedZoneType]);\n\n  // Keyboard shortcuts for polygon drawing\n  useEffect(() => {\n    const handleKeyPress = event => {\n      if (!isEnabled || drawingMode !== 'polygon') return;\n\n      // Enter key to complete polygon\n      if (event.key === 'Enter' && polygonPoints.length >= 3) {\n        event.preventDefault();\n        completePolygon();\n        toast.success('🔺 Polygon completed with Enter key!');\n      }\n\n      // Escape key to cancel polygon drawing\n      if (event.key === 'Escape' && polygonPoints.length > 0) {\n        event.preventDefault();\n        setPolygonPoints([]);\n        setIsDrawing(false);\n        setPreviewPoint(null);\n        toast.info('🔺 Polygon drawing cancelled');\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isEnabled, drawingMode, polygonPoints.length]);\n\n  // Auto-test polygon drawing when frame is available\n  useEffect(() => {\n    if (currentFrame && drawingMode === 'polygon' && polygonPoints.length === 0) {\n      console.log('🧪 AUTO-TEST: Frame available, testing polygon drawing setup');\n      console.log('🧪 AUTO-TEST: Frame size from props:', `${frameWidth}x${frameHeight}`);\n\n      // Get actual frame size from background image\n      const backgroundImg = document.getElementById('roi-background-image');\n      if (backgroundImg) {\n        const actualSize = {\n          natural: `${backgroundImg.naturalWidth}x${backgroundImg.naturalHeight}`,\n          display: `${backgroundImg.clientWidth}x${backgroundImg.clientHeight}`\n        };\n        console.log('🧪 AUTO-TEST: Actual image size:', actualSize);\n\n        // Test canvas setup\n        const canvas = canvasRef.current;\n        if (canvas) {\n          console.log('🧪 AUTO-TEST: Canvas size:', `${canvas.width}x${canvas.height}`);\n          console.log('🧪 AUTO-TEST: Canvas style:', `${canvas.style.width}x${canvas.style.height}`);\n        } else {\n          console.log('🧪 AUTO-TEST: ❌ No canvas reference');\n        }\n\n        // Simulate a test click in the center\n        setTimeout(() => {\n          const testCoords = {\n            display: {\n              x: backgroundImg.clientWidth / 2,\n              y: backgroundImg.clientHeight / 2\n            },\n            natural: {\n              x: backgroundImg.naturalWidth / 2,\n              y: backgroundImg.naturalHeight / 2\n            }\n          };\n          console.log('🧪 AUTO-TEST: Simulating polygon click at center:', testCoords);\n          handlePolygonClick(testCoords.display, testCoords.natural);\n        }, 1000);\n      }\n    }\n  }, [currentFrame, drawingMode, polygonPoints.length]);\n  useEffect(() => {\n    console.log('🎯 ROI Zone Manager useEffect triggered:', {\n      currentFrame: !!currentFrame,\n      currentFrameType: typeof currentFrame,\n      currentFrameLength: (currentFrame === null || currentFrame === void 0 ? void 0 : currentFrame.length) || 0,\n      frameSize: `${frameWidth}x${frameHeight}`,\n      zones: zones.length,\n      showZones,\n      drawingMode,\n      polygonPoints: polygonPoints.length\n    });\n    if (currentFrame) {\n      console.log('✅ ROI Manager has frame data - length:', currentFrame.length);\n      console.log('🔍 Frame data preview:', currentFrame.substring(0, 50) + '...');\n    } else {\n      console.log('❌ ROI Manager - No frame data received');\n    }\n    drawZones();\n  }, [zones, currentFrame, showZones, frameWidth, frameHeight]);\n  const getCanvasCoordinates = event => {\n    const canvas = canvasRef.current;\n    if (!canvas) return {\n      x: 0,\n      y: 0\n    };\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    // Get display coordinates\n    const displayCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n\n    // Convert to natural frame coordinates for storage\n    const backgroundImg = document.getElementById('roi-background-image');\n    let naturalCoords = displayCoords;\n    if (backgroundImg) {\n      const naturalWidth = backgroundImg.naturalWidth || frameWidth;\n      const naturalHeight = backgroundImg.naturalHeight || frameHeight;\n      const displayWidth = canvas.width;\n      const displayHeight = canvas.height;\n      const naturalScaleX = naturalWidth / displayWidth;\n      const naturalScaleY = naturalHeight / displayHeight;\n      naturalCoords = {\n        x: displayCoords.x * naturalScaleX,\n        y: displayCoords.y * naturalScaleY\n      };\n    }\n    console.log('🖱️ Mouse coordinates:', {\n      client: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      display: displayCoords,\n      natural: naturalCoords,\n      canvas: {\n        width: canvas.width,\n        height: canvas.height\n      },\n      frame: {\n        width: frameWidth,\n        height: frameHeight\n      }\n    });\n    return naturalCoords;\n  };\n  const handleMouseDown = event => {\n    console.log('🖱️ MOUSE DOWN DETECTED on canvas!', {\n      isEnabled,\n      drawingMode,\n      selectedZoneType,\n      canvasSize: canvasRef.current ? `${canvasRef.current.width}x${canvasRef.current.height}` : 'no canvas'\n    });\n    if (!isEnabled) {\n      console.log('🚫 Drawing disabled');\n      return;\n    }\n    console.log('🖱️ Mouse down event triggered');\n    event.preventDefault();\n\n    // Get both natural and display coordinates\n    const naturalCoords = getCanvasCoordinates(event); // This returns natural coordinates\n\n    // Also get display coordinates for drawing preview\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    const displayCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n\n    // Check if clicking on existing zone for editing (use natural coordinates)\n    const clickedZone = findZoneAtPoint(naturalCoords.x, naturalCoords.y);\n    if (clickedZone) {\n      console.log('✏️ Editing existing zone:', clickedZone.name);\n      setEditingZone(clickedZone);\n      return;\n    }\n    console.log('🖱️ Mouse down - Drawing mode:', drawingMode, 'Zone type:', selectedZoneType);\n    if (drawingMode === 'polygon') {\n      console.log('🔺 Entering polygon mode');\n      handlePolygonClick(displayCoords, naturalCoords);\n    } else {\n      console.log('📦 Entering rectangle mode');\n      handleRectangleStart(displayCoords, naturalCoords);\n    }\n  };\n  const handlePolygonClick = (displayCoords, naturalCoords) => {\n    console.log('🔺 Polygon click:', {\n      displayCoords,\n      naturalCoords,\n      currentPoints: polygonPoints.length\n    });\n    console.log('🎯 Current polygon points:', polygonPoints);\n\n    // Check if clicking near the first point to close polygon\n    if (polygonPoints.length > 2) {\n      const firstPoint = polygonPoints[0];\n      const distance = Math.sqrt(Math.pow(displayCoords.x - firstPoint.x, 2) + Math.pow(displayCoords.y - firstPoint.y, 2));\n      console.log('🎯 Distance to first point:', distance);\n      if (distance < 15) {\n        // Close polygon\n        console.log('✅ Closing polygon with', polygonPoints.length + 1, 'points');\n        completePolygon();\n        return;\n      }\n    }\n\n    // Add new point to polygon\n    const newPoints = [...polygonPoints, displayCoords];\n    setPolygonPoints(newPoints);\n    setIsDrawing(true);\n    console.log('➕ Added polygon point:', newPoints.length, 'total points');\n\n    // Provide better user feedback based on polygon progress\n    if (newPoints.length === 1) {\n      toast.info('🔺 First point added! Click to add more points.');\n    } else if (newPoints.length === 2) {\n      toast.info('🔺 Second point added! Add one more point, then click near first point to close.');\n    } else {\n      toast.info(`🔺 Point ${newPoints.length} added. Click near first point to close or press Enter.`);\n    }\n  };\n  const handleRectangleStart = (displayCoords, naturalCoords) => {\n    // Start drawing new rectangle zone with display coordinates for preview\n    console.log('📦 Starting rectangle zone drawing:', {\n      display: displayCoords,\n      natural: naturalCoords\n    });\n    setIsDrawing(true);\n    setCurrentZone({\n      id: `zone_${Date.now()}`,\n      type: selectedZoneType,\n      points: [displayCoords],\n      // Use display coordinates for preview\n      isComplete: false,\n      isPreview: true,\n      shape: 'rectangle'\n    });\n  };\n  const completePolygon = () => {\n    if (polygonPoints.length < 3) {\n      toast.error('Polygon must have at least 3 points');\n      return;\n    }\n\n    // Convert display coordinates to natural coordinates for storage\n    const naturalPoints = polygonPoints.map(point => {\n      const canvas = canvasRef.current;\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = frameWidth / canvas.width;\n      const scaleY = frameHeight / canvas.height;\n      return {\n        x: point.x * scaleX,\n        y: point.y * scaleY\n      };\n    });\n    const newZone = {\n      id: `zone_${Date.now()}`,\n      type: selectedZoneType,\n      shape: 'polygon',\n      points: naturalPoints,\n      isComplete: true,\n      isPreview: false,\n      name: `${zoneTypes[selectedZoneType].name} ${zones.length + 1}`,\n      requiresScooper: zoneTypes[selectedZoneType].requiresScooper\n    };\n    const newZones = [...zones, newZone];\n    setZones(newZones);\n    onZonesUpdate(newZones);\n\n    // Reset polygon drawing state\n    setPolygonPoints([]);\n    setIsDrawing(false);\n    setPreviewPoint(null);\n    toast.success(`${zoneTypes[selectedZoneType].name} polygon zone created!`);\n    drawZones(); // Redraw with the new zone\n  };\n  const handleMouseMove = event => {\n    if (!isEnabled) return;\n    event.preventDefault();\n\n    // Get display coordinates for preview\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    const displayCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n    if (drawingMode === 'polygon' && isDrawing && polygonPoints.length > 0) {\n      // Update preview point for polygon\n      setPreviewPoint(displayCoords);\n      // Redraw to show polygon preview with current mouse position\n      drawZones();\n    } else if (drawingMode === 'rectangle' && isDrawing && currentZone) {\n      // Update current zone with display coordinates for rectangle preview\n      if (currentZone.points.length === 1) {\n        const updatedZone = {\n          ...currentZone,\n          points: [currentZone.points[0], displayCoords],\n          isPreview: true // Mark as preview\n        };\n        setCurrentZone(updatedZone);\n        console.log('🖱️ Mouse move - updating preview:', {\n          start: currentZone.points[0],\n          current: displayCoords\n        });\n        drawZones([...zones, updatedZone]);\n      }\n    }\n  };\n  const handleMouseUp = event => {\n    if (!isDrawing || !currentZone) return;\n    console.log('🖱️ Mouse up event triggered');\n    event.preventDefault();\n\n    // Get display coordinates for the end point\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    const displayEndCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n\n    // Convert both start and end points from display to natural coordinates for storage\n    const backgroundImg = document.getElementById('roi-background-image');\n    let naturalStartCoords = currentZone.points[0];\n    let naturalEndCoords = displayEndCoords;\n    if (backgroundImg) {\n      const naturalWidth = backgroundImg.naturalWidth || frameWidth;\n      const naturalHeight = backgroundImg.naturalHeight || frameHeight;\n      const displayWidth = canvas.width;\n      const displayHeight = canvas.height;\n      const naturalScaleX = naturalWidth / displayWidth;\n      const naturalScaleY = naturalHeight / displayHeight;\n      naturalStartCoords = {\n        x: currentZone.points[0].x * naturalScaleX,\n        y: currentZone.points[0].y * naturalScaleY\n      };\n      naturalEndCoords = {\n        x: displayEndCoords.x * naturalScaleX,\n        y: displayEndCoords.y * naturalScaleY\n      };\n    }\n\n    // Complete rectangle zone with natural coordinates\n    if (currentZone.points.length >= 1) {\n      const newZone = {\n        ...currentZone,\n        points: [naturalStartCoords, naturalEndCoords],\n        // Store in natural coordinates\n        isComplete: true,\n        isPreview: false,\n        name: `${zoneTypes[selectedZoneType].name} ${zones.length + 1}`,\n        requiresScooper: zoneTypes[selectedZoneType].requiresScooper\n      };\n      console.log('✅ Zone created:', {\n        display: {\n          start: currentZone.points[0],\n          end: displayEndCoords\n        },\n        natural: {\n          start: naturalStartCoords,\n          end: naturalEndCoords\n        },\n        zone: newZone\n      });\n      const newZones = [...zones, newZone];\n      setZones(newZones);\n      onZonesUpdate(newZones);\n      toast.success(`${zoneTypes[selectedZoneType].name} zone created!`);\n    }\n    setIsDrawing(false);\n    setCurrentZone(null);\n    drawZones(); // Redraw with the new zone\n  };\n  const deleteZone = zoneId => {\n    setZones(zones.filter(zone => zone.id !== zoneId));\n    setEditingZone(null);\n    toast.info('Zone deleted');\n  };\n  const clearAllZones = () => {\n    setZones([]);\n    setEditingZone(null);\n    toast.info('All zones cleared');\n  };\n  const exportZones = () => {\n    const exportData = {\n      zones: zones.map(zone => ({\n        ...zone,\n        // Convert to relative coordinates (0-1)\n        points: zone.points.map(p => ({\n          x: p.x / frameWidth,\n          y: p.y / frameHeight\n        }))\n      })),\n      frameSize: {\n        width: frameWidth,\n        height: frameHeight\n      },\n      exportedAt: new Date().toISOString()\n    };\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `roi_zones_${Date.now()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n    toast.success('Zones exported successfully!');\n  }; // exportZones function closing\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%'\n    },\n    children: [isEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '16px',\n        padding: '16px',\n        background: 'rgba(255,255,255,0.1)',\n        borderRadius: '8px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          margin: '0 0 12px 0',\n          color: '#fff'\n        },\n        children: \"\\uD83C\\uDFAF ROI Zone Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 799,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '12px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: 'block',\n            marginBottom: '6px',\n            fontWeight: 'bold'\n          },\n          children: \"Zone Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedZoneType,\n          onChange: e => setSelectedZoneType(e.target.value),\n          style: {\n            padding: '8px',\n            borderRadius: '6px',\n            border: '1px solid rgba(255,255,255,0.3)',\n            background: 'rgba(255,255,255,0.1)',\n            color: 'white',\n            width: '200px'\n          },\n          children: Object.entries(zoneTypes).map(([key, config]) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: key,\n            style: {\n              background: '#333',\n              color: 'white'\n            },\n            children: [config.icon, \" \", config.name]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 819,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 806,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '12px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: 'block',\n            marginBottom: '6px',\n            fontWeight: 'bold'\n          },\n          children: \"Drawing Mode:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '8px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setDrawingMode('rectangle'),\n            style: {\n              padding: '8px 12px',\n              borderRadius: '6px',\n              border: drawingMode === 'rectangle' ? '2px solid #00FF88' : '1px solid rgba(255,255,255,0.3)',\n              background: drawingMode === 'rectangle' ? 'rgba(0,255,136,0.2)' : 'rgba(255,255,255,0.1)',\n              color: drawingMode === 'rectangle' ? '#00FF88' : '#fff',\n              cursor: 'pointer',\n              fontSize: '12px'\n            },\n            children: \"\\uD83D\\uDCE6 Rectangle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 832,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setDrawingMode('polygon'),\n            style: {\n              padding: '8px 12px',\n              borderRadius: '6px',\n              border: drawingMode === 'polygon' ? '2px solid #FF6B35' : '1px solid rgba(255,255,255,0.3)',\n              background: drawingMode === 'polygon' ? 'rgba(255,107,53,0.2)' : 'rgba(255,255,255,0.1)',\n              color: drawingMode === 'polygon' ? '#FF6B35' : '#fff',\n              cursor: 'pointer',\n              fontSize: '12px'\n            },\n            children: \"\\uD83D\\uDD3A Polygon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 846,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '11px',\n            color: '#ccc',\n            marginTop: '4px'\n          },\n          children: drawingMode === 'rectangle' ? '📦 Click and drag to create rectangular zones' : '🔺 Click points • Right-click to complete/undo • Enter to complete • Esc to cancel'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 11\n        }, this), ((_zoneTypes$selectedZo = zoneTypes[selectedZoneType]) === null || _zoneTypes$selectedZo === void 0 ? void 0 : _zoneTypes$selectedZo.preferredShape) && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '11px',\n            color: zoneTypes[selectedZoneType].preferredShape === 'polygon' ? '#FF6B35' : '#FFD23F',\n            marginTop: '2px',\n            fontStyle: 'italic'\n          },\n          children: [\"\\uD83D\\uDCA1 Recommended: \", zoneTypes[selectedZoneType].preferredShape, \" for \", zoneTypes[selectedZoneType].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 827,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '8px 12px',\n          background: isEnabled ? 'rgba(0,255,136,0.2)' : 'rgba(255,255,255,0.1)',\n          borderRadius: '6px',\n          marginBottom: '12px',\n          border: `2px solid ${isEnabled ? '#00FF88' : 'rgba(255,255,255,0.3)'}`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: isEnabled ? '#00FF88' : '#fff'\n          },\n          children: isEnabled ? drawingMode === 'polygon' ? `🔺 Polygon Mode: ACTIVE ${polygonPoints.length > 0 ? `(${polygonPoints.length} points)` : '- Click to start'}` : '📦 Rectangle Mode: ACTIVE - Click and drag to create zones' : '🔒 Drawing Mode: DISABLED'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '12px',\n            marginTop: '4px',\n            opacity: 0.8\n          },\n          children: [\"Debug: isEnabled=\", isEnabled.toString(), \", currentFrame=\", !!currentFrame ? 'available' : 'none', \", frameSize=\", frameWidth, \"x\", frameHeight]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 880,\n        columnNumber: 9\n      }, this), drawingMode === 'polygon' && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '8px 12px',\n          background: 'rgba(255,107,53,0.2)',\n          borderRadius: '6px',\n          marginBottom: '12px',\n          border: '2px solid #FF6B35'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: '#FF6B35',\n            fontWeight: 'bold',\n            marginBottom: '8px'\n          },\n          children: \"\\uD83D\\uDD3A Polygon Drawing Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 911,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '12px',\n            color: '#fff',\n            marginBottom: '8px'\n          },\n          children: [polygonPoints.length === 0 && 'Click to start drawing polygon', polygonPoints.length > 0 && polygonPoints.length < 3 && `${polygonPoints.length} points added. Need ${3 - polygonPoints.length} more.`, polygonPoints.length >= 3 && `${polygonPoints.length} points. Click near first point to close polygon.`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 914,\n          columnNumber: 13\n        }, this), polygonPoints.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '6px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (polygonPoints.length > 0) {\n                const newPoints = polygonPoints.slice(0, -1);\n                setPolygonPoints(newPoints);\n                if (newPoints.length === 0) {\n                  setIsDrawing(false);\n                  setPreviewPoint(null);\n                }\n                toast.info('Last point removed');\n              }\n            },\n            style: {\n              padding: '4px 8px',\n              background: '#FF9800',\n              color: '#fff',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              fontSize: '11px'\n            },\n            children: \"\\u21B6 Undo Point\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 923,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setPolygonPoints([]);\n              setIsDrawing(false);\n              setPreviewPoint(null);\n              toast.info('Polygon cleared');\n            },\n            style: {\n              padding: '4px 8px',\n              background: '#f44336',\n              color: '#fff',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              fontSize: '11px'\n            },\n            children: \"\\uD83D\\uDDD1\\uFE0F Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 947,\n            columnNumber: 17\n          }, this), polygonPoints.length >= 3 && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: completePolygon,\n            style: {\n              padding: '4px 8px',\n              background: '#4CAF50',\n              color: '#fff',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              fontSize: '11px'\n            },\n            children: \"\\u2705 Complete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 967,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 922,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '8px',\n          flexWrap: 'wrap',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: () => setShowZones(!showZones),\n          children: showZones ? '👁️ Hide Zones' : '👁️‍🗨️ Show Zones'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 989,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-warning\",\n          onClick: clearAllZones,\n          disabled: zones.length === 0,\n          children: \"\\uD83D\\uDDD1\\uFE0F Clear All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 996,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: exportZones,\n          disabled: zones.length === 0,\n          children: \"\\uD83D\\uDCE5 Export Zones\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1004,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-info\",\n          onClick: () => {\n            // Add a test zone to verify functionality\n            const testZone = {\n              id: `test_zone_${Date.now()}`,\n              type: selectedZoneType,\n              points: [{\n                x: 50,\n                y: 50\n              }, {\n                x: 200,\n                y: 150\n              }],\n              isComplete: true,\n              name: `Test ${zoneTypes[selectedZoneType].name}`,\n              requiresScooper: zoneTypes[selectedZoneType].requiresScooper\n            };\n            setZones([...zones, testZone]);\n            toast.success('Test zone added!');\n          },\n          children: \"\\uD83E\\uDDEA Add Test Zone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1012,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            marginLeft: '16px',\n            fontSize: '14px',\n            opacity: 0.8\n          },\n          children: [\"Zones: \", zones.length, \" | \", isEnabled ? 'Click and drag to create zones' : 'Enable drawing to create zones']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1034,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 988,\n        columnNumber: 9\n      }, this), isEnabled && zones.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '12px',\n          background: 'rgba(255,210,63,0.2)',\n          borderRadius: '6px',\n          marginTop: '8px',\n          border: '2px dashed #FFD23F'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: '#FFD23F',\n            fontWeight: 'bold',\n            marginBottom: '4px'\n          },\n          children: \"\\uD83D\\uDCDD How to Draw Zones:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1048,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '14px',\n            opacity: 0.9\n          },\n          children: [\"1. Select zone type above (e.g., \\\"\\uD83C\\uDF45 Sauce Area\\\")\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1052,\n            columnNumber: 64\n          }, this), \"2. Click and hold on the video to start drawing\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1053,\n            columnNumber: 62\n          }, this), \"3. Drag to create a rectangle\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1054,\n            columnNumber: 44\n          }, this), \"4. Release to complete the zone\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1051,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1041,\n        columnNumber: 11\n      }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '8px 12px',\n          background: 'rgba(0,212,255,0.3)',\n          borderRadius: '6px',\n          marginTop: '8px',\n          textAlign: 'center',\n          border: '2px solid #00D4FF'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: '#00D4FF',\n            fontWeight: 'bold'\n          },\n          children: \"\\uD83C\\uDFA8 Drawing in progress... Drag to set zone size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1061,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 793,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        display: 'inline-block',\n        width: '100%',\n        maxWidth: '100%',\n        background: '#000',\n        borderRadius: '8px',\n        overflow: 'hidden'\n      },\n      children: [currentFrame ? /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"roi-background-image\",\n        src: `data:image/jpeg;base64,${currentFrame}`,\n        alt: \"Video frame for zone configuration\",\n        style: {\n          width: '100%',\n          height: 'auto',\n          display: 'block',\n          borderRadius: '8px'\n        },\n        onLoad: e => {\n          console.log('🎯 ROI Manager: Video frame loaded');\n          const img = e.target;\n          const rect = img.getBoundingClientRect();\n          console.log('📐 Image dimensions:', {\n            natural: `${img.naturalWidth}x${img.naturalHeight}`,\n            display: `${rect.width}x${rect.height}`\n          });\n\n          // Update canvas size to match image\n          const canvas = canvasRef.current;\n          if (canvas) {\n            canvas.width = rect.width;\n            canvas.height = rect.height;\n            canvas.style.width = rect.width + 'px';\n            canvas.style.height = rect.height + 'px';\n            console.log('🎨 Canvas resized to match image:', `${rect.width}x${rect.height}`);\n            console.log('🔧 FRAME SIZE FIX: Using actual image size instead of props');\n          }\n\n          // Test polygon drawing immediately\n          setTimeout(() => {\n            drawZones();\n\n            // Force test polygon drawing\n            const canvas = canvasRef.current;\n            if (canvas && drawingMode === 'polygon') {\n              const ctx = canvas.getContext('2d');\n              console.log('🧪 FORCE TEST: Drawing test polygon on canvas');\n\n              // Draw a test polygon in the center\n              const centerX = canvas.width / 2;\n              const centerY = canvas.height / 2;\n              const testPoints = [{\n                x: centerX - 50,\n                y: centerY - 50\n              }, {\n                x: centerX + 50,\n                y: centerY - 50\n              }, {\n                x: centerX + 50,\n                y: centerY + 50\n              }, {\n                x: centerX - 50,\n                y: centerY + 50\n              }];\n              ctx.save();\n              ctx.strokeStyle = '#FF6B35';\n              ctx.fillStyle = 'rgba(255, 107, 53, 0.2)';\n              ctx.lineWidth = 3;\n              ctx.beginPath();\n              ctx.moveTo(testPoints[0].x, testPoints[0].y);\n              for (let i = 1; i < testPoints.length; i++) {\n                ctx.lineTo(testPoints[i].x, testPoints[i].y);\n              }\n              ctx.closePath();\n              ctx.fill();\n              ctx.stroke();\n\n              // Draw test points\n              testPoints.forEach((point, index) => {\n                ctx.beginPath();\n                ctx.arc(point.x, point.y, 6, 0, 2 * Math.PI);\n                ctx.fillStyle = '#FF6B35';\n                ctx.fill();\n                ctx.strokeStyle = '#fff';\n                ctx.lineWidth = 2;\n                ctx.stroke();\n\n                // Draw point number\n                ctx.fillStyle = '#fff';\n                ctx.font = '12px Arial';\n                ctx.textAlign = 'center';\n                ctx.fillText((index + 1).toString(), point.x, point.y + 4);\n              });\n              ctx.restore();\n              console.log('🧪 FORCE TEST: Test polygon drawn on canvas');\n            }\n          }, 100);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1089,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"roi-background-placeholder\",\n        style: {\n          width: '100%',\n          height: '360px',\n          background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          borderRadius: '8px',\n          border: '2px dashed rgba(255,255,255,0.3)',\n          color: '#ccc',\n          fontSize: '16px',\n          textAlign: 'center',\n          flexDirection: 'column',\n          gap: '12px',\n          position: 'relative'\n        },\n        onClick: e => {\n          // Allow polygon drawing on placeholder for testing\n          if (isEnabled && drawingMode === 'polygon') {\n            const rect = e.currentTarget.getBoundingClientRect();\n            const displayCoords = {\n              x: e.clientX - rect.left,\n              y: e.clientY - rect.top\n            };\n            const naturalCoords = {\n              x: displayCoords.x / rect.width * frameWidth,\n              y: displayCoords.y / rect.height * frameHeight\n            };\n            console.log('🔺 Placeholder click for polygon test:', {\n              displayCoords,\n              naturalCoords\n            });\n            handlePolygonClick(displayCoords, naturalCoords);\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '48px'\n          },\n          children: \"\\uD83C\\uDFA5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1212,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Start Video Processing First\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '12px',\n            opacity: 0.7\n          },\n          children: \"Upload and start processing a video to configure ROI zones\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1214,\n          columnNumber: 13\n        }, this), drawingMode === 'polygon' && isEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '11px',\n            color: '#FF6B35',\n            marginTop: '8px',\n            fontStyle: 'italic'\n          },\n          children: \"\\uD83D\\uDD3A Click here to test polygon drawing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1218,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1177,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          cursor: isEnabled ? 'crosshair' : 'default',\n          pointerEvents: isEnabled ? 'auto' : 'none',\n          zIndex: 20,\n          borderRadius: '8px'\n        },\n        onMouseDown: handleMouseDown,\n        onMouseMove: handleMouseMove,\n        onMouseUp: handleMouseUp,\n        onContextMenu: e => {\n          e.preventDefault();\n          // Right-click actions for polygon mode\n          if (drawingMode === 'polygon' && polygonPoints.length >= 3) {\n            completePolygon();\n            toast.success('🔺 Polygon completed with right-click!');\n          } else if (drawingMode === 'polygon' && polygonPoints.length > 0) {\n            // Remove last point\n            const newPoints = polygonPoints.slice(0, -1);\n            setPolygonPoints(newPoints);\n            if (newPoints.length === 0) {\n              setIsDrawing(false);\n              setPreviewPoint(null);\n            }\n            toast.info('🔺 Last point removed');\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1231,\n        columnNumber: 9\n      }, this), !currentFrame && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          height: '300px',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          background: 'rgba(255,255,255,0.1)',\n          color: 'rgba(255,255,255,0.6)'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '48px',\n              marginBottom: '16px'\n            },\n            children: \"\\uD83C\\uDFA5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1275,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Video frame will appear here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1276,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1274,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1265,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1078,\n      columnNumber: 7\n    }, this), isEnabled && zones.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '16px',\n        padding: '16px',\n        background: 'rgba(255,255,255,0.05)',\n        borderRadius: '8px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          margin: '0 0 12px 0'\n        },\n        children: [\"\\uD83D\\uDCCB Active Zones (\", zones.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1290,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxHeight: '200px',\n          overflowY: 'auto'\n        },\n        children: zones.map((zone, index) => {\n          const config = zoneTypes[zone.type];\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              padding: '8px 12px',\n              marginBottom: '8px',\n              background: (editingZone === null || editingZone === void 0 ? void 0 : editingZone.id) === zone.id ? 'rgba(255,255,255,0.2)' : 'rgba(255,255,255,0.1)',\n              borderRadius: '6px',\n              border: `2px solid ${config.color}`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [config.icon, \" \", zone.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1309,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1310,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                style: {\n                  opacity: 0.8\n                },\n                children: [config.description, \" | Scooper: \", zone.requiresScooper ? '🥄 Required' : '🚫 Not Required']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1311,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1308,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteZone(zone.id),\n              style: {\n                background: '#FF4757',\n                border: 'none',\n                borderRadius: '4px',\n                padding: '4px 8px',\n                color: 'white',\n                cursor: 'pointer',\n                fontSize: '12px'\n              },\n              children: \"\\uD83D\\uDDD1\\uFE0F Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1315,\n              columnNumber: 19\n            }, this)]\n          }, zone.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1295,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1291,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1284,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 790,\n    columnNumber: 5\n  }, this);\n} // Missing closing brace added\n; // Main component closing brace\n_s(ROIZoneManager, \"5ksk0DQ8mK1IZvzZJBrAOm4s0Z4=\");\n_c = ROIZoneManager;\nexport default ROIZoneManager;\nvar _c;\n$RefreshReg$(_c, \"ROIZoneManager\");","map":{"version":3,"names":["React","useState","useRef","useEffect","toast","jsxDEV","_jsxDEV","ROIZoneManager","currentFrame","onZonesUpdate","existingZones","isEnabled","frameWidth","frameHeight","_s","_zoneTypes$selectedZo","canvasRef","zones","setZones","isDrawing","setIsDrawing","currentZone","setCurrentZone","selectedZoneType","setSelectedZoneType","editingZone","setEditingZone","showZones","setShowZones","drawingMode","setDrawingMode","polygonPoints","setPolygonPoints","previewPoint","setPreviewPoint","zoneTypes","sauce_area","name","color","fillColor","requiresScooper","icon","description","preferredShape","cheese_area","meat_area","vegetable_area","prep_surface","cleaning_area","findZoneAtPoint","x","y","find","zone","points","length","p1","p2","inZone","Math","min","max","console","log","point","drawZones","zonesToDraw","canvas","current","ctx","getContext","backgroundImg","document","getElementById","displayWidth","displayHeight","naturalWidth","naturalHeight","rect","getBoundingClientRect","width","height","style","scaleX","scaleY","canvasSize","frameSize","naturalSize","displaySize","scale","toFixed","clearRect","forEach","index","zoneConfig","type","shape","drawPolygonZone","drawRectangleZone","drawPolygonPreview","strokeStyle","lineWidth","setLineDash","strokeRect","abs","isPreviewZone","isPreview","scaledPoints","map","save","fillStyle","beginPath","moveTo","i","lineTo","closePath","fill","stroke","arc","PI","centerX","reduce","sum","p","centerY","font","textAlign","fillText","restore","isFirstPoint","radius","toString","x1","y1","x2","y2","startX","startY","fillRect","labelX","labelY","reqText","handleKeyPress","event","key","preventDefault","completePolygon","success","info","window","addEventListener","removeEventListener","actualSize","natural","display","clientWidth","clientHeight","setTimeout","testCoords","handlePolygonClick","currentFrameType","currentFrameLength","substring","getCanvasCoordinates","displayCoords","clientX","left","clientY","top","naturalCoords","naturalScaleX","naturalScaleY","client","frame","handleMouseDown","clickedZone","handleRectangleStart","currentPoints","firstPoint","distance","sqrt","pow","newPoints","id","Date","now","isComplete","error","naturalPoints","newZone","newZones","handleMouseMove","updatedZone","start","handleMouseUp","displayEndCoords","naturalStartCoords","naturalEndCoords","end","deleteZone","zoneId","filter","clearAllZones","exportZones","exportData","exportedAt","toISOString","blob","Blob","JSON","stringify","url","URL","createObjectURL","a","createElement","href","download","click","revokeObjectURL","children","marginBottom","padding","background","borderRadius","margin","fileName","_jsxFileName","lineNumber","columnNumber","fontWeight","value","onChange","e","target","border","Object","entries","config","gap","onClick","cursor","fontSize","marginTop","fontStyle","opacity","slice","flexWrap","alignItems","className","disabled","testZone","marginLeft","position","maxWidth","overflow","src","alt","onLoad","img","testPoints","justifyContent","flexDirection","currentTarget","ref","pointerEvents","zIndex","onMouseDown","onMouseMove","onMouseUp","onContextMenu","maxHeight","overflowY","_c","$RefreshReg$"],"sources":["C:/Users/ayoub/OneDrive/Desktop/eagleAI/pizza_store_detection/services/frontend/src/components/ROIZoneManager.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\n\nconst ROIZoneManager = ({ \n  currentFrame, \n  onZonesUpdate, \n  existingZones = [], \n  isEnabled = true,\n  frameWidth = 640,\n  frameHeight = 480 \n}) => {\n  const canvasRef = useRef(null);\n  const [zones, setZones] = useState(existingZones);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentZone, setCurrentZone] = useState(null);\n  const [selectedZoneType, setSelectedZoneType] = useState('sauce_area');\n  const [editingZone, setEditingZone] = useState(null);\n  const [showZones, setShowZones] = useState(true);\n\n  // New polygon drawing states\n  const [drawingMode, setDrawingMode] = useState('polygon'); // Start with polygon for sauce areas\n  const [polygonPoints, setPolygonPoints] = useState([]);\n  const [previewPoint, setPreviewPoint] = useState(null);\n\n  // Zone types with professional configuration\n  const zoneTypes = {\n    sauce_area: {\n      name: 'Sauce Area',\n      color: '#FF6B35',\n      fillColor: 'rgba(255, 107, 53, 0.2)',\n      requiresScooper: true,\n      icon: '🍅',\n      description: 'Sauce dispensing and handling area',\n      preferredShape: 'polygon' // Sauce areas work better with polygons\n    },\n    cheese_area: {\n      name: 'Cheese Area',\n      color: '#FFD23F',\n      fillColor: 'rgba(255, 210, 63, 0.2)',\n      requiresScooper: true,\n      icon: '🧀',\n      description: 'Cheese container and handling area',\n      preferredShape: 'rectangle' // Cheese containers are usually rectangular\n    },\n    meat_area: {\n      name: 'Meat/Protein Area',\n      color: '#FF4757',\n      fillColor: 'rgba(255, 71, 87, 0.2)',\n      requiresScooper: true,\n      icon: '🥓',\n      description: 'Meat and protein ingredient area'\n    },\n    vegetable_area: {\n      name: 'Vegetable Area',\n      color: '#2ED573',\n      fillColor: 'rgba(46, 213, 115, 0.2)',\n      requiresScooper: true,\n      icon: '🥬',\n      description: 'Vegetable and fresh ingredient area'\n    },\n    prep_surface: {\n      name: 'Prep Surface',\n      color: '#5352ED',\n      fillColor: 'rgba(83, 82, 237, 0.2)',\n      requiresScooper: false,\n      icon: '🍕',\n      description: 'Pizza preparation surface (no scooper required)'\n    },\n    cleaning_area: {\n      name: 'Cleaning Area',\n      color: '#00D2D3',\n      fillColor: 'rgba(0, 210, 211, 0.2)',\n      requiresScooper: false,\n      icon: '🧽',\n      description: 'Cleaning and sanitization area'\n    }\n  };\n\n  // Function definitions (moved to top to avoid hoisting issues)\n  const findZoneAtPoint = (x, y) => {\n    // x, y are in natural coordinates, zones are stored in natural coordinates\n    return zones.find(zone => {\n      if (zone.points.length === 2) {\n        const [p1, p2] = zone.points;\n        const inZone = x >= Math.min(p1.x, p2.x) && x <= Math.max(p1.x, p2.x) &&\n                      y >= Math.min(p1.y, p2.y) && y <= Math.max(p1.y, p2.y);\n\n        console.log(`🔍 Checking zone ${zone.name}:`, {\n          point: { x, y },\n          zone: { p1, p2 },\n          inZone\n        });\n\n        return inZone;\n      }\n      return false;\n    });\n  };\n\n  const drawZones = (zonesToDraw = zones) => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      // Canvas might not be ready yet, skip drawing\n      return;\n    }\n\n    const ctx = canvas.getContext('2d');\n\n    // Get the background image to match its size\n    const backgroundImg = document.getElementById('roi-background-image');\n    let displayWidth, displayHeight, naturalWidth, naturalHeight;\n\n    if (backgroundImg) {\n      const rect = backgroundImg.getBoundingClientRect();\n      displayWidth = rect.width;\n      displayHeight = rect.height;\n      naturalWidth = backgroundImg.naturalWidth || frameWidth;\n      naturalHeight = backgroundImg.naturalHeight || frameHeight;\n\n      canvas.width = displayWidth;\n      canvas.height = displayHeight;\n      canvas.style.width = displayWidth + 'px';\n      canvas.style.height = displayHeight + 'px';\n    } else {\n      // Fallback to provided dimensions\n      displayWidth = frameWidth;\n      displayHeight = frameHeight;\n      naturalWidth = frameWidth;\n      naturalHeight = frameHeight;\n      canvas.width = displayWidth;\n      canvas.height = displayHeight;\n    }\n\n    // Calculate scaling factors from natural to display size\n    const scaleX = displayWidth / naturalWidth;\n    const scaleY = displayHeight / naturalHeight;\n\n    console.log('🎨 Drawing zones on canvas:', {\n      canvasSize: `${canvas.width}x${canvas.height}`,\n      frameSize: `${frameWidth}x${frameHeight}`,\n      naturalSize: `${naturalWidth}x${naturalHeight}`,\n      displaySize: `${displayWidth}x${displayHeight}`,\n      scale: `${scaleX.toFixed(3)}x${scaleY.toFixed(3)}`,\n      zones: zonesToDraw.length,\n      backgroundImg: !!backgroundImg\n    });\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    if (!showZones) return;\n\n    // Draw each zone with proper coordinate scaling\n    zonesToDraw.forEach((zone, index) => {\n      const zoneConfig = zoneTypes[zone.type];\n\n      if (zone.shape === 'polygon' && zone.points.length >= 3) {\n        drawPolygonZone(ctx, zone, zoneConfig, scaleX, scaleY);\n      } else if (zone.points.length >= 2) {\n        drawRectangleZone(ctx, zone, zoneConfig, scaleX, scaleY);\n      }\n    });\n\n    // Draw current polygon being drawn\n    if (drawingMode === 'polygon' && polygonPoints.length > 0) {\n      console.log('🎨 Drawing polygon preview with', polygonPoints.length, 'points');\n      drawPolygonPreview(ctx, polygonPoints, previewPoint, zoneTypes[selectedZoneType]);\n    }\n\n    // Draw current zone being drawn (rectangle mode)\n    if (drawingMode === 'rectangle' && currentZone && currentZone.points.length === 2) {\n      const zoneConfig = zoneTypes[currentZone.type];\n      const [p1, p2] = currentZone.points;\n\n      ctx.strokeStyle = zoneConfig.color;\n      ctx.lineWidth = 3;\n      ctx.setLineDash([10, 5]);\n      ctx.strokeRect(\n        Math.min(p1.x, p2.x),\n        Math.min(p1.y, p2.y),\n        Math.abs(p2.x - p1.x),\n        Math.abs(p2.y - p1.y)\n      );\n    }\n  };\n\n  const drawPolygonZone = (ctx, zone, zoneConfig, scaleX, scaleY) => {\n    const isPreviewZone = zone.isPreview === true;\n\n    // Scale points from natural to display coordinates (unless it's a preview)\n    const scaledPoints = zone.points.map(point => {\n      if (isPreviewZone) {\n        return point; // Already in display coordinates\n      } else {\n        return {\n          x: point.x * scaleX,\n          y: point.y * scaleY\n        };\n      }\n    });\n\n    // Draw polygon\n    ctx.save();\n    ctx.strokeStyle = zoneConfig.color;\n    ctx.fillStyle = zoneConfig.fillColor;\n    ctx.lineWidth = isPreviewZone ? 3 : 2;\n    ctx.setLineDash(isPreviewZone ? [5, 5] : []);\n\n    ctx.beginPath();\n    ctx.moveTo(scaledPoints[0].x, scaledPoints[0].y);\n\n    for (let i = 1; i < scaledPoints.length; i++) {\n      ctx.lineTo(scaledPoints[i].x, scaledPoints[i].y);\n    }\n\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n\n    // Draw points\n    scaledPoints.forEach((point, index) => {\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, 4, 0, 2 * Math.PI);\n      ctx.fillStyle = zoneConfig.color;\n      ctx.fill();\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    });\n\n    // Draw zone label\n    const centerX = scaledPoints.reduce((sum, p) => sum + p.x, 0) / scaledPoints.length;\n    const centerY = scaledPoints.reduce((sum, p) => sum + p.y, 0) / scaledPoints.length;\n\n    ctx.fillStyle = '#fff';\n    ctx.font = 'bold 12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(`${zoneConfig.icon} ${zone.name}`, centerX, centerY);\n\n    ctx.restore();\n  };\n\n  const drawPolygonPreview = (ctx, points, previewPoint, zoneConfig) => {\n    console.log('🔺 drawPolygonPreview called with', points.length, 'points', points);\n    if (points.length === 0) return;\n\n    ctx.save();\n    ctx.strokeStyle = zoneConfig.color;\n    ctx.lineWidth = 3;\n    ctx.setLineDash([5, 5]);\n\n    // Draw lines between points\n    ctx.beginPath();\n    ctx.moveTo(points[0].x, points[0].y);\n\n    for (let i = 1; i < points.length; i++) {\n      ctx.lineTo(points[i].x, points[i].y);\n    }\n\n    // Draw preview line to mouse\n    if (previewPoint) {\n      ctx.lineTo(previewPoint.x, previewPoint.y);\n    }\n\n    ctx.stroke();\n\n    // Draw points with special styling for first point\n    points.forEach((point, index) => {\n      const isFirstPoint = index === 0;\n      const radius = isFirstPoint && points.length > 2 ? 8 : 6;\n\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = isFirstPoint && points.length > 2 ? '#00FF88' : zoneConfig.color;\n      ctx.fill();\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = isFirstPoint && points.length > 2 ? 3 : 2;\n      ctx.stroke();\n\n      // Draw point number\n      ctx.fillStyle = '#fff';\n      ctx.font = isFirstPoint ? 'bold 11px Arial' : '10px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText((index + 1).toString(), point.x, point.y + 3);\n\n      // Add \"CLOSE\" text near first point when polygon can be closed\n      if (isFirstPoint && points.length > 2) {\n        ctx.fillStyle = '#00FF88';\n        ctx.font = 'bold 9px Arial';\n        ctx.fillText('CLOSE', point.x, point.y - 12);\n      }\n    });\n\n    ctx.restore();\n  };\n\n  const drawRectangleZone = (ctx, zone, zoneConfig, scaleX, scaleY) => {\n    const [p1, p2] = zone.points;\n\n    const isPreviewZone = zone.isPreview === true;\n\n    // Scale coordinates from natural to display (unless it's a preview)\n    let x1, y1, x2, y2;\n    if (isPreviewZone) {\n      x1 = p1.x;\n      y1 = p1.y;\n      x2 = p2.x;\n      y2 = p2.y;\n    } else {\n      x1 = p1.x * scaleX;\n      y1 = p1.y * scaleY;\n      x2 = p2.x * scaleX;\n      y2 = p2.y * scaleY;\n    }\n\n    const width = Math.abs(x2 - x1);\n    const height = Math.abs(y2 - y1);\n    const startX = Math.min(x1, x2);\n    const startY = Math.min(y1, y2);\n\n    // Draw rectangle\n    ctx.save();\n    ctx.fillStyle = zoneConfig.fillColor;\n    ctx.fillRect(startX, startY, width, height);\n\n    ctx.strokeStyle = zoneConfig.color;\n    ctx.lineWidth = isPreviewZone ? 3 : 2;\n    ctx.setLineDash(isPreviewZone ? [10, 5] : []);\n    ctx.strokeRect(startX, startY, width, height);\n\n    // Draw zone label\n    const labelX = startX + width / 2;\n    const labelY = startY + height / 2;\n\n    ctx.fillStyle = '#fff';\n    ctx.font = 'bold 14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(`${zoneConfig.icon} ${zone.name || zoneConfig.name}`, labelX, labelY);\n\n    // Draw requirement text\n    const reqText = zone.requiresScooper ? 'Scooper Required' : 'No Scooper Required';\n    ctx.font = '12px Arial';\n    ctx.fillStyle = zone.requiresScooper ? '#FF4757' : '#2ED573';\n    ctx.fillText(reqText, labelX, labelY + 18);\n\n    ctx.restore();\n  };\n\n  useEffect(() => {\n    if (onZonesUpdate) {\n      onZonesUpdate(zones);\n    }\n  }, [zones, onZonesUpdate]);\n\n  // Auto-switch drawing mode based on zone type preference\n  useEffect(() => {\n    const zoneConfig = zoneTypes[selectedZoneType];\n    if (zoneConfig && zoneConfig.preferredShape) {\n      setDrawingMode(zoneConfig.preferredShape);\n      console.log(`🎯 Auto-switched to ${zoneConfig.preferredShape} mode for ${zoneConfig.name}`);\n    }\n  }, [selectedZoneType]);\n\n  // Keyboard shortcuts for polygon drawing\n  useEffect(() => {\n    const handleKeyPress = (event) => {\n      if (!isEnabled || drawingMode !== 'polygon') return;\n\n      // Enter key to complete polygon\n      if (event.key === 'Enter' && polygonPoints.length >= 3) {\n        event.preventDefault();\n        completePolygon();\n        toast.success('🔺 Polygon completed with Enter key!');\n      }\n\n      // Escape key to cancel polygon drawing\n      if (event.key === 'Escape' && polygonPoints.length > 0) {\n        event.preventDefault();\n        setPolygonPoints([]);\n        setIsDrawing(false);\n        setPreviewPoint(null);\n        toast.info('🔺 Polygon drawing cancelled');\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isEnabled, drawingMode, polygonPoints.length]);\n\n  // Auto-test polygon drawing when frame is available\n  useEffect(() => {\n    if (currentFrame && drawingMode === 'polygon' && polygonPoints.length === 0) {\n      console.log('🧪 AUTO-TEST: Frame available, testing polygon drawing setup');\n      console.log('🧪 AUTO-TEST: Frame size from props:', `${frameWidth}x${frameHeight}`);\n\n      // Get actual frame size from background image\n      const backgroundImg = document.getElementById('roi-background-image');\n      if (backgroundImg) {\n        const actualSize = {\n          natural: `${backgroundImg.naturalWidth}x${backgroundImg.naturalHeight}`,\n          display: `${backgroundImg.clientWidth}x${backgroundImg.clientHeight}`\n        };\n        console.log('🧪 AUTO-TEST: Actual image size:', actualSize);\n\n        // Test canvas setup\n        const canvas = canvasRef.current;\n        if (canvas) {\n          console.log('🧪 AUTO-TEST: Canvas size:', `${canvas.width}x${canvas.height}`);\n          console.log('🧪 AUTO-TEST: Canvas style:', `${canvas.style.width}x${canvas.style.height}`);\n        } else {\n          console.log('🧪 AUTO-TEST: ❌ No canvas reference');\n        }\n\n        // Simulate a test click in the center\n        setTimeout(() => {\n          const testCoords = {\n            display: { x: backgroundImg.clientWidth / 2, y: backgroundImg.clientHeight / 2 },\n            natural: { x: backgroundImg.naturalWidth / 2, y: backgroundImg.naturalHeight / 2 }\n          };\n          console.log('🧪 AUTO-TEST: Simulating polygon click at center:', testCoords);\n          handlePolygonClick(testCoords.display, testCoords.natural);\n        }, 1000);\n      }\n    }\n  }, [currentFrame, drawingMode, polygonPoints.length]);\n\n  useEffect(() => {\n    console.log('🎯 ROI Zone Manager useEffect triggered:', {\n      currentFrame: !!currentFrame,\n      currentFrameType: typeof currentFrame,\n      currentFrameLength: currentFrame?.length || 0,\n      frameSize: `${frameWidth}x${frameHeight}`,\n      zones: zones.length,\n      showZones,\n      drawingMode,\n      polygonPoints: polygonPoints.length\n    });\n\n    if (currentFrame) {\n      console.log('✅ ROI Manager has frame data - length:', currentFrame.length);\n      console.log('🔍 Frame data preview:', currentFrame.substring(0, 50) + '...');\n    } else {\n      console.log('❌ ROI Manager - No frame data received');\n    }\n\n    drawZones();\n  }, [zones, currentFrame, showZones, frameWidth, frameHeight]);\n\n  const getCanvasCoordinates = (event) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return { x: 0, y: 0 };\n\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    // Get display coordinates\n    const displayCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n\n    // Convert to natural frame coordinates for storage\n    const backgroundImg = document.getElementById('roi-background-image');\n    let naturalCoords = displayCoords;\n\n    if (backgroundImg) {\n      const naturalWidth = backgroundImg.naturalWidth || frameWidth;\n      const naturalHeight = backgroundImg.naturalHeight || frameHeight;\n      const displayWidth = canvas.width;\n      const displayHeight = canvas.height;\n\n      const naturalScaleX = naturalWidth / displayWidth;\n      const naturalScaleY = naturalHeight / displayHeight;\n\n      naturalCoords = {\n        x: displayCoords.x * naturalScaleX,\n        y: displayCoords.y * naturalScaleY\n      };\n    }\n\n    console.log('🖱️ Mouse coordinates:', {\n      client: { x: event.clientX, y: event.clientY },\n      display: displayCoords,\n      natural: naturalCoords,\n      canvas: { width: canvas.width, height: canvas.height },\n      frame: { width: frameWidth, height: frameHeight }\n    });\n\n    return naturalCoords;\n  };\n\n  const handleMouseDown = (event) => {\n    console.log('🖱️ MOUSE DOWN DETECTED on canvas!', {\n      isEnabled,\n      drawingMode,\n      selectedZoneType,\n      canvasSize: canvasRef.current ? `${canvasRef.current.width}x${canvasRef.current.height}` : 'no canvas'\n    });\n\n    if (!isEnabled) {\n      console.log('🚫 Drawing disabled');\n      return;\n    }\n\n    console.log('🖱️ Mouse down event triggered');\n    event.preventDefault();\n\n    // Get both natural and display coordinates\n    const naturalCoords = getCanvasCoordinates(event); // This returns natural coordinates\n\n    // Also get display coordinates for drawing preview\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    const displayCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n\n    // Check if clicking on existing zone for editing (use natural coordinates)\n    const clickedZone = findZoneAtPoint(naturalCoords.x, naturalCoords.y);\n    if (clickedZone) {\n      console.log('✏️ Editing existing zone:', clickedZone.name);\n      setEditingZone(clickedZone);\n      return;\n    }\n\n    console.log('🖱️ Mouse down - Drawing mode:', drawingMode, 'Zone type:', selectedZoneType);\n\n    if (drawingMode === 'polygon') {\n      console.log('🔺 Entering polygon mode');\n      handlePolygonClick(displayCoords, naturalCoords);\n    } else {\n      console.log('📦 Entering rectangle mode');\n      handleRectangleStart(displayCoords, naturalCoords);\n    }\n  };\n\n  const handlePolygonClick = (displayCoords, naturalCoords) => {\n    console.log('🔺 Polygon click:', { displayCoords, naturalCoords, currentPoints: polygonPoints.length });\n    console.log('🎯 Current polygon points:', polygonPoints);\n\n    // Check if clicking near the first point to close polygon\n    if (polygonPoints.length > 2) {\n      const firstPoint = polygonPoints[0];\n      const distance = Math.sqrt(\n        Math.pow(displayCoords.x - firstPoint.x, 2) + Math.pow(displayCoords.y - firstPoint.y, 2)\n      );\n\n      console.log('🎯 Distance to first point:', distance);\n\n      if (distance < 15) {\n        // Close polygon\n        console.log('✅ Closing polygon with', polygonPoints.length + 1, 'points');\n        completePolygon();\n        return;\n      }\n    }\n\n    // Add new point to polygon\n    const newPoints = [...polygonPoints, displayCoords];\n    setPolygonPoints(newPoints);\n    setIsDrawing(true);\n\n    console.log('➕ Added polygon point:', newPoints.length, 'total points');\n\n    // Provide better user feedback based on polygon progress\n    if (newPoints.length === 1) {\n      toast.info('🔺 First point added! Click to add more points.');\n    } else if (newPoints.length === 2) {\n      toast.info('🔺 Second point added! Add one more point, then click near first point to close.');\n    } else {\n      toast.info(`🔺 Point ${newPoints.length} added. Click near first point to close or press Enter.`);\n    }\n  };\n\n  const handleRectangleStart = (displayCoords, naturalCoords) => {\n    // Start drawing new rectangle zone with display coordinates for preview\n    console.log('📦 Starting rectangle zone drawing:', {\n      display: displayCoords,\n      natural: naturalCoords\n    });\n    setIsDrawing(true);\n    setCurrentZone({\n      id: `zone_${Date.now()}`,\n      type: selectedZoneType,\n      points: [displayCoords], // Use display coordinates for preview\n      isComplete: false,\n      isPreview: true,\n      shape: 'rectangle'\n    });\n  };\n\n  const completePolygon = () => {\n    if (polygonPoints.length < 3) {\n      toast.error('Polygon must have at least 3 points');\n      return;\n    }\n\n    // Convert display coordinates to natural coordinates for storage\n    const naturalPoints = polygonPoints.map(point => {\n      const canvas = canvasRef.current;\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = frameWidth / canvas.width;\n      const scaleY = frameHeight / canvas.height;\n\n      return {\n        x: point.x * scaleX,\n        y: point.y * scaleY\n      };\n    });\n\n    const newZone = {\n      id: `zone_${Date.now()}`,\n      type: selectedZoneType,\n      shape: 'polygon',\n      points: naturalPoints,\n      isComplete: true,\n      isPreview: false,\n      name: `${zoneTypes[selectedZoneType].name} ${zones.length + 1}`,\n      requiresScooper: zoneTypes[selectedZoneType].requiresScooper\n    };\n\n    const newZones = [...zones, newZone];\n    setZones(newZones);\n    onZonesUpdate(newZones);\n\n    // Reset polygon drawing state\n    setPolygonPoints([]);\n    setIsDrawing(false);\n    setPreviewPoint(null);\n\n    toast.success(`${zoneTypes[selectedZoneType].name} polygon zone created!`);\n    drawZones(); // Redraw with the new zone\n  };\n\n  const handleMouseMove = (event) => {\n    if (!isEnabled) return;\n\n    event.preventDefault();\n\n    // Get display coordinates for preview\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    const displayCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n\n    if (drawingMode === 'polygon' && isDrawing && polygonPoints.length > 0) {\n      // Update preview point for polygon\n      setPreviewPoint(displayCoords);\n      // Redraw to show polygon preview with current mouse position\n      drawZones();\n    } else if (drawingMode === 'rectangle' && isDrawing && currentZone) {\n      // Update current zone with display coordinates for rectangle preview\n      if (currentZone.points.length === 1) {\n        const updatedZone = {\n          ...currentZone,\n          points: [currentZone.points[0], displayCoords],\n          isPreview: true // Mark as preview\n        };\n        setCurrentZone(updatedZone);\n        console.log('🖱️ Mouse move - updating preview:', {\n          start: currentZone.points[0],\n          current: displayCoords\n        });\n        drawZones([...zones, updatedZone]);\n      }\n    }\n  };\n\n  const handleMouseUp = (event) => {\n    if (!isDrawing || !currentZone) return;\n\n    console.log('🖱️ Mouse up event triggered');\n    event.preventDefault();\n\n    // Get display coordinates for the end point\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    const displayEndCoords = {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    };\n\n    // Convert both start and end points from display to natural coordinates for storage\n    const backgroundImg = document.getElementById('roi-background-image');\n    let naturalStartCoords = currentZone.points[0];\n    let naturalEndCoords = displayEndCoords;\n\n    if (backgroundImg) {\n      const naturalWidth = backgroundImg.naturalWidth || frameWidth;\n      const naturalHeight = backgroundImg.naturalHeight || frameHeight;\n      const displayWidth = canvas.width;\n      const displayHeight = canvas.height;\n\n      const naturalScaleX = naturalWidth / displayWidth;\n      const naturalScaleY = naturalHeight / displayHeight;\n\n      naturalStartCoords = {\n        x: currentZone.points[0].x * naturalScaleX,\n        y: currentZone.points[0].y * naturalScaleY\n      };\n\n      naturalEndCoords = {\n        x: displayEndCoords.x * naturalScaleX,\n        y: displayEndCoords.y * naturalScaleY\n      };\n    }\n\n    // Complete rectangle zone with natural coordinates\n    if (currentZone.points.length >= 1) {\n      const newZone = {\n        ...currentZone,\n        points: [naturalStartCoords, naturalEndCoords], // Store in natural coordinates\n        isComplete: true,\n        isPreview: false,\n        name: `${zoneTypes[selectedZoneType].name} ${zones.length + 1}`,\n        requiresScooper: zoneTypes[selectedZoneType].requiresScooper\n      };\n\n      console.log('✅ Zone created:', {\n        display: { start: currentZone.points[0], end: displayEndCoords },\n        natural: { start: naturalStartCoords, end: naturalEndCoords },\n        zone: newZone\n      });\n\n      const newZones = [...zones, newZone];\n      setZones(newZones);\n      onZonesUpdate(newZones);\n      toast.success(`${zoneTypes[selectedZoneType].name} zone created!`);\n    }\n\n    setIsDrawing(false);\n    setCurrentZone(null);\n    drawZones(); // Redraw with the new zone\n  };\n\n  const deleteZone = (zoneId) => {\n    setZones(zones.filter(zone => zone.id !== zoneId));\n    setEditingZone(null);\n    toast.info('Zone deleted');\n  };\n\n  const clearAllZones = () => {\n    setZones([]);\n    setEditingZone(null);\n    toast.info('All zones cleared');\n  };\n\n  const exportZones = () => {\n    const exportData = {\n      zones: zones.map(zone => ({\n        ...zone,\n        // Convert to relative coordinates (0-1)\n        points: zone.points.map(p => ({\n          x: p.x / frameWidth,\n          y: p.y / frameHeight\n        }))\n      })),\n      frameSize: { width: frameWidth, height: frameHeight },\n      exportedAt: new Date().toISOString()\n    };\n    \n    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `roi_zones_${Date.now()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n    \n    toast.success('Zones exported successfully!');\n  }; // exportZones function closing\n\n  return (\n    <div style={{ width: '100%' }}>\n      {/* Zone Controls - Only show in editing mode */}\n      {isEnabled && (\n        <div style={{\n          marginBottom: '16px',\n          padding: '16px',\n          background: 'rgba(255,255,255,0.1)',\n          borderRadius: '8px'\n        }}>\n        <h4 style={{ margin: '0 0 12px 0', color: '#fff' }}>🎯 ROI Zone Manager</h4>\n        \n        {/* Zone Type Selector */}\n        <div style={{ marginBottom: '12px' }}>\n          <label style={{ display: 'block', marginBottom: '6px', fontWeight: 'bold' }}>\n            Zone Type:\n          </label>\n          <select\n            value={selectedZoneType}\n            onChange={(e) => setSelectedZoneType(e.target.value)}\n            style={{\n              padding: '8px',\n              borderRadius: '6px',\n              border: '1px solid rgba(255,255,255,0.3)',\n              background: 'rgba(255,255,255,0.1)',\n              color: 'white',\n              width: '200px'\n            }}\n          >\n            {Object.entries(zoneTypes).map(([key, config]) => (\n              <option key={key} value={key} style={{ background: '#333', color: 'white' }}>\n                {config.icon} {config.name}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Drawing Mode Selector */}\n        <div style={{ marginBottom: '12px' }}>\n          <label style={{ display: 'block', marginBottom: '6px', fontWeight: 'bold' }}>\n            Drawing Mode:\n          </label>\n          <div style={{ display: 'flex', gap: '8px' }}>\n            <button\n              onClick={() => setDrawingMode('rectangle')}\n              style={{\n                padding: '8px 12px',\n                borderRadius: '6px',\n                border: drawingMode === 'rectangle' ? '2px solid #00FF88' : '1px solid rgba(255,255,255,0.3)',\n                background: drawingMode === 'rectangle' ? 'rgba(0,255,136,0.2)' : 'rgba(255,255,255,0.1)',\n                color: drawingMode === 'rectangle' ? '#00FF88' : '#fff',\n                cursor: 'pointer',\n                fontSize: '12px'\n              }}\n            >\n              📦 Rectangle\n            </button>\n            <button\n              onClick={() => setDrawingMode('polygon')}\n              style={{\n                padding: '8px 12px',\n                borderRadius: '6px',\n                border: drawingMode === 'polygon' ? '2px solid #FF6B35' : '1px solid rgba(255,255,255,0.3)',\n                background: drawingMode === 'polygon' ? 'rgba(255,107,53,0.2)' : 'rgba(255,255,255,0.1)',\n                color: drawingMode === 'polygon' ? '#FF6B35' : '#fff',\n                cursor: 'pointer',\n                fontSize: '12px'\n              }}\n            >\n              🔺 Polygon\n            </button>\n          </div>\n          <div style={{ fontSize: '11px', color: '#ccc', marginTop: '4px' }}>\n            {drawingMode === 'rectangle' ?\n              '📦 Click and drag to create rectangular zones' :\n              '🔺 Click points • Right-click to complete/undo • Enter to complete • Esc to cancel'\n            }\n          </div>\n          {zoneTypes[selectedZoneType]?.preferredShape && (\n            <div style={{\n              fontSize: '11px',\n              color: zoneTypes[selectedZoneType].preferredShape === 'polygon' ? '#FF6B35' : '#FFD23F',\n              marginTop: '2px',\n              fontStyle: 'italic'\n            }}>\n              💡 Recommended: {zoneTypes[selectedZoneType].preferredShape} for {zoneTypes[selectedZoneType].name}\n            </div>\n          )}\n        </div>\n\n        {/* Drawing Status */}\n        <div style={{\n          padding: '8px 12px',\n          background: isEnabled ? 'rgba(0,255,136,0.2)' : 'rgba(255,255,255,0.1)',\n          borderRadius: '6px',\n          marginBottom: '12px',\n          border: `2px solid ${isEnabled ? '#00FF88' : 'rgba(255,255,255,0.3)'}`\n        }}>\n          <span style={{ color: isEnabled ? '#00FF88' : '#fff' }}>\n            {isEnabled ?\n              (drawingMode === 'polygon' ?\n                `🔺 Polygon Mode: ACTIVE ${polygonPoints.length > 0 ? `(${polygonPoints.length} points)` : '- Click to start'}` :\n                '📦 Rectangle Mode: ACTIVE - Click and drag to create zones'\n              ) :\n              '🔒 Drawing Mode: DISABLED'\n            }\n          </span>\n          <div style={{ fontSize: '12px', marginTop: '4px', opacity: 0.8 }}>\n            Debug: isEnabled={isEnabled.toString()}, currentFrame={!!currentFrame ? 'available' : 'none'},\n            frameSize={frameWidth}x{frameHeight}\n          </div>\n        </div>\n\n        {/* Polygon Drawing Controls */}\n        {drawingMode === 'polygon' && (\n          <div style={{\n            padding: '8px 12px',\n            background: 'rgba(255,107,53,0.2)',\n            borderRadius: '6px',\n            marginBottom: '12px',\n            border: '2px solid #FF6B35'\n          }}>\n            <div style={{ color: '#FF6B35', fontWeight: 'bold', marginBottom: '8px' }}>\n              🔺 Polygon Drawing Status\n            </div>\n            <div style={{ fontSize: '12px', color: '#fff', marginBottom: '8px' }}>\n              {polygonPoints.length === 0 && 'Click to start drawing polygon'}\n              {polygonPoints.length > 0 && polygonPoints.length < 3 &&\n                `${polygonPoints.length} points added. Need ${3 - polygonPoints.length} more.`}\n              {polygonPoints.length >= 3 &&\n                `${polygonPoints.length} points. Click near first point to close polygon.`}\n            </div>\n            {polygonPoints.length > 0 && (\n              <div style={{ display: 'flex', gap: '6px' }}>\n                <button\n                  onClick={() => {\n                    if (polygonPoints.length > 0) {\n                      const newPoints = polygonPoints.slice(0, -1);\n                      setPolygonPoints(newPoints);\n                      if (newPoints.length === 0) {\n                        setIsDrawing(false);\n                        setPreviewPoint(null);\n                      }\n                      toast.info('Last point removed');\n                    }\n                  }}\n                  style={{\n                    padding: '4px 8px',\n                    background: '#FF9800',\n                    color: '#fff',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                    fontSize: '11px'\n                  }}\n                >\n                  ↶ Undo Point\n                </button>\n                <button\n                  onClick={() => {\n                    setPolygonPoints([]);\n                    setIsDrawing(false);\n                    setPreviewPoint(null);\n                    toast.info('Polygon cleared');\n                  }}\n                  style={{\n                    padding: '4px 8px',\n                    background: '#f44336',\n                    color: '#fff',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                    fontSize: '11px'\n                  }}\n                >\n                  🗑️ Clear\n                </button>\n                {polygonPoints.length >= 3 && (\n                  <button\n                    onClick={completePolygon}\n                    style={{\n                      padding: '4px 8px',\n                      background: '#4CAF50',\n                      color: '#fff',\n                      border: 'none',\n                      borderRadius: '4px',\n                      cursor: 'pointer',\n                      fontSize: '11px'\n                    }}\n                  >\n                    ✅ Complete\n                  </button>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Controls */}\n        <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap', alignItems: 'center' }}>\n          <button\n            className=\"btn btn-primary\"\n            onClick={() => setShowZones(!showZones)}\n          >\n            {showZones ? '👁️ Hide Zones' : '👁️‍🗨️ Show Zones'}\n          </button>\n          \n          <button\n            className=\"btn btn-warning\"\n            onClick={clearAllZones}\n            disabled={zones.length === 0}\n          >\n            🗑️ Clear All\n          </button>\n          \n          <button\n            className=\"btn btn-success\"\n            onClick={exportZones}\n            disabled={zones.length === 0}\n          >\n            📥 Export Zones\n          </button>\n\n          <button\n            className=\"btn btn-info\"\n            onClick={() => {\n              // Add a test zone to verify functionality\n              const testZone = {\n                id: `test_zone_${Date.now()}`,\n                type: selectedZoneType,\n                points: [\n                  { x: 50, y: 50 },\n                  { x: 200, y: 150 }\n                ],\n                isComplete: true,\n                name: `Test ${zoneTypes[selectedZoneType].name}`,\n                requiresScooper: zoneTypes[selectedZoneType].requiresScooper\n              };\n              setZones([...zones, testZone]);\n              toast.success('Test zone added!');\n            }}\n          >\n            🧪 Add Test Zone\n          </button>\n          \n          <span style={{ marginLeft: '16px', fontSize: '14px', opacity: 0.8 }}>\n            Zones: {zones.length} | {isEnabled ? 'Click and drag to create zones' : 'Enable drawing to create zones'}\n          </span>\n        </div>\n\n        {/* Drawing Instructions */}\n        {isEnabled && zones.length === 0 && (\n          <div style={{\n            padding: '12px',\n            background: 'rgba(255,210,63,0.2)',\n            borderRadius: '6px',\n            marginTop: '8px',\n            border: '2px dashed #FFD23F'\n          }}>\n            <div style={{ color: '#FFD23F', fontWeight: 'bold', marginBottom: '4px' }}>\n              📝 How to Draw Zones:\n            </div>\n            <div style={{ fontSize: '14px', opacity: 0.9 }}>\n              1. Select zone type above (e.g., \"🍅 Sauce Area\")<br />\n              2. Click and hold on the video to start drawing<br />\n              3. Drag to create a rectangle<br />\n              4. Release to complete the zone\n            </div>\n          </div>\n        )}\n\n        {isDrawing && (\n          <div style={{\n            padding: '8px 12px',\n            background: 'rgba(0,212,255,0.3)',\n            borderRadius: '6px',\n            marginTop: '8px',\n            textAlign: 'center',\n            border: '2px solid #00D4FF'\n          }}>\n            <span style={{ color: '#00D4FF', fontWeight: 'bold' }}>\n              🎨 Drawing in progress... Drag to set zone size\n            </span>\n          </div>\n        )}\n        </div>\n      )}\n\n      {/* Video with zone drawing overlay */}\n      <div style={{\n        position: 'relative',\n        display: 'inline-block',\n        width: '100%',\n        maxWidth: '100%',\n        background: '#000',\n        borderRadius: '8px',\n        overflow: 'hidden'\n      }}>\n        {/* Background video frame */}\n        {currentFrame ? (\n          <img\n            id=\"roi-background-image\"\n            src={`data:image/jpeg;base64,${currentFrame}`}\n            alt=\"Video frame for zone configuration\"\n            style={{\n              width: '100%',\n              height: 'auto',\n              display: 'block',\n              borderRadius: '8px'\n            }}\n            onLoad={(e) => {\n              console.log('🎯 ROI Manager: Video frame loaded');\n              const img = e.target;\n              const rect = img.getBoundingClientRect();\n              console.log('📐 Image dimensions:', {\n                natural: `${img.naturalWidth}x${img.naturalHeight}`,\n                display: `${rect.width}x${rect.height}`\n              });\n\n              // Update canvas size to match image\n              const canvas = canvasRef.current;\n              if (canvas) {\n                canvas.width = rect.width;\n                canvas.height = rect.height;\n                canvas.style.width = rect.width + 'px';\n                canvas.style.height = rect.height + 'px';\n                console.log('🎨 Canvas resized to match image:', `${rect.width}x${rect.height}`);\n                console.log('🔧 FRAME SIZE FIX: Using actual image size instead of props');\n              }\n\n              // Test polygon drawing immediately\n              setTimeout(() => {\n                drawZones();\n\n                // Force test polygon drawing\n                const canvas = canvasRef.current;\n                if (canvas && drawingMode === 'polygon') {\n                  const ctx = canvas.getContext('2d');\n                  console.log('🧪 FORCE TEST: Drawing test polygon on canvas');\n\n                  // Draw a test polygon in the center\n                  const centerX = canvas.width / 2;\n                  const centerY = canvas.height / 2;\n                  const testPoints = [\n                    { x: centerX - 50, y: centerY - 50 },\n                    { x: centerX + 50, y: centerY - 50 },\n                    { x: centerX + 50, y: centerY + 50 },\n                    { x: centerX - 50, y: centerY + 50 }\n                  ];\n\n                  ctx.save();\n                  ctx.strokeStyle = '#FF6B35';\n                  ctx.fillStyle = 'rgba(255, 107, 53, 0.2)';\n                  ctx.lineWidth = 3;\n\n                  ctx.beginPath();\n                  ctx.moveTo(testPoints[0].x, testPoints[0].y);\n                  for (let i = 1; i < testPoints.length; i++) {\n                    ctx.lineTo(testPoints[i].x, testPoints[i].y);\n                  }\n                  ctx.closePath();\n                  ctx.fill();\n                  ctx.stroke();\n\n                  // Draw test points\n                  testPoints.forEach((point, index) => {\n                    ctx.beginPath();\n                    ctx.arc(point.x, point.y, 6, 0, 2 * Math.PI);\n                    ctx.fillStyle = '#FF6B35';\n                    ctx.fill();\n                    ctx.strokeStyle = '#fff';\n                    ctx.lineWidth = 2;\n                    ctx.stroke();\n\n                    // Draw point number\n                    ctx.fillStyle = '#fff';\n                    ctx.font = '12px Arial';\n                    ctx.textAlign = 'center';\n                    ctx.fillText((index + 1).toString(), point.x, point.y + 4);\n                  });\n\n                  ctx.restore();\n                  console.log('🧪 FORCE TEST: Test polygon drawn on canvas');\n                }\n              }, 100);\n            }}\n          />\n        ) : (\n          <div\n            id=\"roi-background-placeholder\"\n            style={{\n              width: '100%',\n              height: '360px',\n              background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              borderRadius: '8px',\n              border: '2px dashed rgba(255,255,255,0.3)',\n              color: '#ccc',\n              fontSize: '16px',\n              textAlign: 'center',\n              flexDirection: 'column',\n              gap: '12px',\n              position: 'relative'\n            }}\n            onClick={(e) => {\n              // Allow polygon drawing on placeholder for testing\n              if (isEnabled && drawingMode === 'polygon') {\n                const rect = e.currentTarget.getBoundingClientRect();\n                const displayCoords = {\n                  x: e.clientX - rect.left,\n                  y: e.clientY - rect.top\n                };\n                const naturalCoords = {\n                  x: (displayCoords.x / rect.width) * frameWidth,\n                  y: (displayCoords.y / rect.height) * frameHeight\n                };\n                console.log('🔺 Placeholder click for polygon test:', { displayCoords, naturalCoords });\n                handlePolygonClick(displayCoords, naturalCoords);\n              }\n            }}\n          >\n            <div style={{ fontSize: '48px' }}>🎥</div>\n            <div>Start Video Processing First</div>\n            <div style={{ fontSize: '12px', opacity: 0.7 }}>\n              Upload and start processing a video to configure ROI zones\n            </div>\n            {drawingMode === 'polygon' && isEnabled && (\n              <div style={{\n                fontSize: '11px',\n                color: '#FF6B35',\n                marginTop: '8px',\n                fontStyle: 'italic'\n              }}>\n                🔺 Click here to test polygon drawing\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Zone drawing canvas overlay */}\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            cursor: isEnabled ? 'crosshair' : 'default',\n            pointerEvents: isEnabled ? 'auto' : 'none',\n            zIndex: 20,\n            borderRadius: '8px'\n          }}\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onContextMenu={(e) => {\n            e.preventDefault();\n            // Right-click actions for polygon mode\n            if (drawingMode === 'polygon' && polygonPoints.length >= 3) {\n              completePolygon();\n              toast.success('🔺 Polygon completed with right-click!');\n            } else if (drawingMode === 'polygon' && polygonPoints.length > 0) {\n              // Remove last point\n              const newPoints = polygonPoints.slice(0, -1);\n              setPolygonPoints(newPoints);\n              if (newPoints.length === 0) {\n                setIsDrawing(false);\n                setPreviewPoint(null);\n              }\n              toast.info('🔺 Last point removed');\n            }\n          }}\n        />\n\n        {!currentFrame && (\n          <div style={{\n            width: '100%',\n            height: '300px',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            background: 'rgba(255,255,255,0.1)',\n            color: 'rgba(255,255,255,0.6)'\n          }}>\n            <div style={{ textAlign: 'center' }}>\n              <div style={{ fontSize: '48px', marginBottom: '16px' }}>🎥</div>\n              <p>Video frame will appear here</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Zone List - Only show in editing mode */}\n      {isEnabled && zones.length > 0 && (\n        <div style={{\n          marginTop: '16px',\n          padding: '16px',\n          background: 'rgba(255,255,255,0.05)',\n          borderRadius: '8px'\n        }}>\n          <h4 style={{ margin: '0 0 12px 0' }}>📋 Active Zones ({zones.length})</h4>\n          <div style={{ maxHeight: '200px', overflowY: 'auto' }}>\n            {zones.map((zone, index) => {\n              const config = zoneTypes[zone.type];\n              return (\n                <div\n                  key={zone.id}\n                  style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    padding: '8px 12px',\n                    marginBottom: '8px',\n                    background: editingZone?.id === zone.id ? 'rgba(255,255,255,0.2)' : 'rgba(255,255,255,0.1)',\n                    borderRadius: '6px',\n                    border: `2px solid ${config.color}`\n                  }}\n                >\n                  <div>\n                    <strong>{config.icon} {zone.name}</strong>\n                    <br />\n                    <small style={{ opacity: 0.8 }}>\n                      {config.description} | Scooper: {zone.requiresScooper ? '🥄 Required' : '🚫 Not Required'}\n                    </small>\n                  </div>\n                  <button\n                    onClick={() => deleteZone(zone.id)}\n                    style={{\n                      background: '#FF4757',\n                      border: 'none',\n                      borderRadius: '4px',\n                      padding: '4px 8px',\n                      color: 'white',\n                      cursor: 'pointer',\n                      fontSize: '12px'\n                    }}\n                  >\n                    🗑️ Delete\n                  </button>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n} // Missing closing brace added\n; // Main component closing brace\n\nexport default ROIZoneManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}