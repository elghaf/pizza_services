{"ast":null,"code":"/**\n * Violation Rendering Utilities\n * Handles drawing violation overlays and visual indicators on canvas\n */\n\nimport { violationTypes } from '../ViolationTypes';\n\n/**\n * Draw violation overlay on canvas\n * @param {HTMLCanvasElement} canvas - Canvas element to draw on\n * @param {Array} violations - Array of violations to render\n * @param {number} frameWidth - Natural frame width\n * @param {number} frameHeight - Natural frame height\n */\nexport const drawViolationOverlay = (canvas, violations, frameWidth, frameHeight) => {\n  if (!canvas || violations.length === 0) return;\n  const ctx = canvas.getContext('2d');\n\n  // Get the video element to match its display size\n  const videoElement = document.querySelector('img[alt=\"Current frame\"]');\n  if (videoElement) {\n    const rect = videoElement.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n    canvas.style.width = rect.width + 'px';\n    canvas.style.height = rect.height + 'px';\n  } else {\n    canvas.width = frameWidth;\n    canvas.height = frameHeight;\n  }\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  // Calculate scaling from natural to display coordinates\n  const naturalWidth = frameWidth;\n  const naturalHeight = frameHeight;\n  const displayWidth = canvas.width;\n  const displayHeight = canvas.height;\n  const scaleX = displayWidth / naturalWidth;\n  const scaleY = displayHeight / naturalHeight;\n  console.log('ðŸš¨ Drawing violations:', {\n    violations: violations.length,\n    naturalSize: `${naturalWidth}x${naturalHeight}`,\n    displaySize: `${displayWidth}x${displayHeight}`,\n    scale: `${scaleX.toFixed(3)}x${scaleY.toFixed(3)}`\n  });\n\n  // Draw violation indicators\n  violations.forEach((violation, index) => {\n    drawViolationIndicator(ctx, violation, index, scaleX, scaleY);\n  });\n};\n\n/**\n * Draw a single violation indicator\n * @param {CanvasRenderingContext2D} ctx - Canvas context\n * @param {object} violation - Violation object\n * @param {number} index - Violation index\n * @param {number} scaleX - X scaling factor\n * @param {number} scaleY - Y scaling factor\n */\nexport const drawViolationIndicator = (ctx, violation, index, scaleX, scaleY) => {\n  const config = violationTypes[violation.type];\n  const position = violation.details.position;\n  if (!position || !config) return;\n\n  // Scale position from natural to display coordinates\n  const displayX = position.x * scaleX;\n  const displayY = position.y * scaleY;\n\n  // Pulsing violation indicator\n  const pulseScale = 1 + 0.3 * Math.sin(Date.now() / 200);\n  const baseRadius = getSeverityRadius(violation.severity);\n  const radius = baseRadius * pulseScale;\n\n  // Draw violation indicator with professional styling\n  drawViolationCircle(ctx, displayX, displayY, radius, config, violation);\n\n  // Draw violation label\n  drawViolationLabel(ctx, displayX, displayY, radius, violation, config);\n  console.log(`ðŸš¨ Drew violation at:`, {\n    natural: `(${position.x.toFixed(1)}, ${position.y.toFixed(1)})`,\n    display: `(${displayX.toFixed(1)}, ${displayY.toFixed(1)})`,\n    type: violation.type\n  });\n};\n\n/**\n * Draw violation circle with glow effect\n * @param {CanvasRenderingContext2D} ctx - Canvas context\n * @param {number} x - X coordinate\n * @param {number} y - Y coordinate\n * @param {number} radius - Circle radius\n * @param {object} config - Violation type configuration\n * @param {object} violation - Violation object\n */\nexport const drawViolationCircle = (ctx, x, y, radius, config, violation) => {\n  // Outer glow effect\n  const glowRadius = radius + 15;\n  const gradient = ctx.createRadialGradient(x, y, radius, x, y, glowRadius);\n  gradient.addColorStop(0, config.color + '60'); // 38% opacity\n  gradient.addColorStop(0.7, config.color + '30'); // 19% opacity\n  gradient.addColorStop(1, config.color + '00'); // 0% opacity\n\n  ctx.beginPath();\n  ctx.arc(x, y, glowRadius, 0, 2 * Math.PI);\n  ctx.fillStyle = gradient;\n  ctx.fill();\n\n  // Main circle with severity-based styling\n  ctx.beginPath();\n  ctx.arc(x, y, radius, 0, 2 * Math.PI);\n\n  // Fill with semi-transparent color\n  ctx.fillStyle = config.color + 'AA'; // 67% opacity\n  ctx.fill();\n\n  // Border with full color\n  ctx.strokeStyle = config.color;\n  ctx.lineWidth = getSeverityLineWidth(violation.severity);\n  ctx.stroke();\n\n  // Inner highlight for depth\n  ctx.beginPath();\n  ctx.arc(x, y, radius * 0.7, 0, 2 * Math.PI);\n  ctx.fillStyle = '#FFFFFF30'; // 19% white overlay\n  ctx.fill();\n\n  // Icon in center\n  ctx.fillStyle = '#FFFFFF';\n  ctx.font = `bold ${Math.max(16, radius * 0.6)}px Arial`;\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillText(config.icon, x, y);\n};\n\n/**\n * Draw violation label with background\n * @param {CanvasRenderingContext2D} ctx - Canvas context\n * @param {number} x - X coordinate\n * @param {number} y - Y coordinate\n * @param {number} radius - Circle radius\n * @param {object} violation - Violation object\n * @param {object} config - Violation type configuration\n */\nexport const drawViolationLabel = (ctx, x, y, radius, violation, config) => {\n  const labelText = violation.type.replace(/_/g, ' ');\n  const confidenceText = `${(violation.confidence * 100).toFixed(0)}%`;\n  const fontSize = Math.max(10, radius * 0.4);\n  ctx.font = `bold ${fontSize}px Arial`;\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'top';\n\n  // Measure text for background\n  const labelMetrics = ctx.measureText(labelText);\n  const confidenceMetrics = ctx.measureText(confidenceText);\n  const maxWidth = Math.max(labelMetrics.width, confidenceMetrics.width);\n  const labelY = y - radius - 15;\n  const padding = 6;\n  const lineHeight = fontSize + 2;\n  const backgroundHeight = lineHeight * 2 + padding;\n\n  // Draw background with rounded corners effect\n  ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n  ctx.fillRect(x - maxWidth / 2 - padding, labelY - padding, maxWidth + padding * 2, backgroundHeight);\n\n  // Draw border\n  ctx.strokeStyle = config.color;\n  ctx.lineWidth = 2;\n  ctx.strokeRect(x - maxWidth / 2 - padding, labelY - padding, maxWidth + padding * 2, backgroundHeight);\n\n  // Draw violation type text\n  ctx.fillStyle = config.color;\n  ctx.fillText(labelText, x, labelY);\n\n  // Draw confidence text\n  ctx.fillStyle = '#FFFFFF';\n  ctx.font = `${fontSize * 0.8}px Arial`;\n  ctx.fillText(confidenceText, x, labelY + lineHeight);\n};\n\n/**\n * Get radius based on violation severity\n * @param {string} severity - Violation severity\n * @returns {number} Circle radius\n */\nexport const getSeverityRadius = severity => {\n  const radii = {\n    'high': 35,\n    'medium': 28,\n    'low': 22\n  };\n  return radii[severity] || radii['medium'];\n};\n\n/**\n * Get line width based on violation severity\n * @param {string} severity - Violation severity\n * @returns {number} Line width\n */\nexport const getSeverityLineWidth = severity => {\n  const widths = {\n    'high': 4,\n    'medium': 3,\n    'low': 2\n  };\n  return widths[severity] || widths['medium'];\n};\n\n/**\n * Draw violation heatmap overlay\n * @param {HTMLCanvasElement} canvas - Canvas element\n * @param {Array} violationHistory - Historical violations\n * @param {number} frameWidth - Frame width\n * @param {number} frameHeight - Frame height\n * @param {number} timeWindow - Time window in hours (default: 24)\n */\nexport const drawViolationHeatmap = (canvas, violationHistory, frameWidth, frameHeight, timeWindow = 24) => {\n  if (!canvas || violationHistory.length === 0) return;\n  const ctx = canvas.getContext('2d');\n  const now = Date.now();\n  const timeLimit = now - timeWindow * 60 * 60 * 1000;\n\n  // Filter recent violations\n  const recentViolations = violationHistory.filter(v => new Date(v.timestamp).getTime() >= timeLimit && v.details.position);\n  if (recentViolations.length === 0) return;\n\n  // Create heatmap grid\n  const gridSize = 20;\n  const cols = Math.ceil(frameWidth / gridSize);\n  const rows = Math.ceil(frameHeight / gridSize);\n  const heatGrid = Array(rows).fill().map(() => Array(cols).fill(0));\n\n  // Populate grid with violation counts\n  recentViolations.forEach(violation => {\n    const pos = violation.details.position;\n    const gridX = Math.floor(pos.x / gridSize);\n    const gridY = Math.floor(pos.y / gridSize);\n    if (gridX >= 0 && gridX < cols && gridY >= 0 && gridY < rows) {\n      heatGrid[gridY][gridX]++;\n    }\n  });\n\n  // Find max count for normalization\n  const maxCount = Math.max(...heatGrid.flat());\n  if (maxCount === 0) return;\n\n  // Draw heatmap\n  const scaleX = canvas.width / frameWidth;\n  const scaleY = canvas.height / frameHeight;\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      const count = heatGrid[row][col];\n      if (count > 0) {\n        const intensity = count / maxCount;\n        const alpha = Math.min(intensity * 0.6, 0.6); // Max 60% opacity\n\n        ctx.fillStyle = `rgba(255, 51, 51, ${alpha})`;\n        ctx.fillRect(col * gridSize * scaleX, row * gridSize * scaleY, gridSize * scaleX, gridSize * scaleY);\n      }\n    }\n  }\n};\n\n/**\n * Clear violation canvas\n * @param {HTMLCanvasElement} canvas - Canvas to clear\n */\nexport const clearViolationCanvas = canvas => {\n  if (!canvas) return;\n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n};\n\n/**\n * Update canvas size to match video element\n * @param {HTMLCanvasElement} canvas - Canvas element\n * @param {number} frameWidth - Frame width\n * @param {number} frameHeight - Frame height\n */\nexport const updateViolationCanvasSize = (canvas, frameWidth, frameHeight) => {\n  if (!canvas) return;\n  const videoElement = document.querySelector('img[alt=\"Current frame\"]');\n  if (videoElement) {\n    const rect = videoElement.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n    canvas.style.width = rect.width + 'px';\n    canvas.style.height = rect.height + 'px';\n  } else {\n    canvas.width = frameWidth;\n    canvas.height = frameHeight;\n  }\n};","map":{"version":3,"names":["violationTypes","drawViolationOverlay","canvas","violations","frameWidth","frameHeight","length","ctx","getContext","videoElement","document","querySelector","rect","getBoundingClientRect","width","height","style","clearRect","naturalWidth","naturalHeight","displayWidth","displayHeight","scaleX","scaleY","console","log","naturalSize","displaySize","scale","toFixed","forEach","violation","index","drawViolationIndicator","config","type","position","details","displayX","x","displayY","y","pulseScale","Math","sin","Date","now","baseRadius","getSeverityRadius","severity","radius","drawViolationCircle","drawViolationLabel","natural","display","glowRadius","gradient","createRadialGradient","addColorStop","color","beginPath","arc","PI","fillStyle","fill","strokeStyle","lineWidth","getSeverityLineWidth","stroke","font","max","textAlign","textBaseline","fillText","icon","labelText","replace","confidenceText","confidence","fontSize","labelMetrics","measureText","confidenceMetrics","maxWidth","labelY","padding","lineHeight","backgroundHeight","fillRect","strokeRect","radii","widths","drawViolationHeatmap","violationHistory","timeWindow","timeLimit","recentViolations","filter","v","timestamp","getTime","gridSize","cols","ceil","rows","heatGrid","Array","map","pos","gridX","floor","gridY","maxCount","flat","row","col","count","intensity","alpha","min","clearViolationCanvas","updateViolationCanvasSize"],"sources":["C:/Users/ayoub/OneDrive/Desktop/eagleAI/pizza_store_detection/services/frontend/src/components/ViolationDetector/utils/ViolationRendering.js"],"sourcesContent":["/**\n * Violation Rendering Utilities\n * Handles drawing violation overlays and visual indicators on canvas\n */\n\nimport { violationTypes } from '../ViolationTypes';\n\n/**\n * Draw violation overlay on canvas\n * @param {HTMLCanvasElement} canvas - Canvas element to draw on\n * @param {Array} violations - Array of violations to render\n * @param {number} frameWidth - Natural frame width\n * @param {number} frameHeight - Natural frame height\n */\nexport const drawViolationOverlay = (canvas, violations, frameWidth, frameHeight) => {\n  if (!canvas || violations.length === 0) return;\n\n  const ctx = canvas.getContext('2d');\n\n  // Get the video element to match its display size\n  const videoElement = document.querySelector('img[alt=\"Current frame\"]');\n  if (videoElement) {\n    const rect = videoElement.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n    canvas.style.width = rect.width + 'px';\n    canvas.style.height = rect.height + 'px';\n  } else {\n    canvas.width = frameWidth;\n    canvas.height = frameHeight;\n  }\n\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  // Calculate scaling from natural to display coordinates\n  const naturalWidth = frameWidth;\n  const naturalHeight = frameHeight;\n  const displayWidth = canvas.width;\n  const displayHeight = canvas.height;\n  const scaleX = displayWidth / naturalWidth;\n  const scaleY = displayHeight / naturalHeight;\n\n  console.log('ðŸš¨ Drawing violations:', {\n    violations: violations.length,\n    naturalSize: `${naturalWidth}x${naturalHeight}`,\n    displaySize: `${displayWidth}x${displayHeight}`,\n    scale: `${scaleX.toFixed(3)}x${scaleY.toFixed(3)}`\n  });\n\n  // Draw violation indicators\n  violations.forEach((violation, index) => {\n    drawViolationIndicator(ctx, violation, index, scaleX, scaleY);\n  });\n};\n\n/**\n * Draw a single violation indicator\n * @param {CanvasRenderingContext2D} ctx - Canvas context\n * @param {object} violation - Violation object\n * @param {number} index - Violation index\n * @param {number} scaleX - X scaling factor\n * @param {number} scaleY - Y scaling factor\n */\nexport const drawViolationIndicator = (ctx, violation, index, scaleX, scaleY) => {\n  const config = violationTypes[violation.type];\n  const position = violation.details.position;\n\n  if (!position || !config) return;\n\n  // Scale position from natural to display coordinates\n  const displayX = position.x * scaleX;\n  const displayY = position.y * scaleY;\n\n  // Pulsing violation indicator\n  const pulseScale = 1 + 0.3 * Math.sin(Date.now() / 200);\n  const baseRadius = getSeverityRadius(violation.severity);\n  const radius = baseRadius * pulseScale;\n  \n  // Draw violation indicator with professional styling\n  drawViolationCircle(ctx, displayX, displayY, radius, config, violation);\n  \n  // Draw violation label\n  drawViolationLabel(ctx, displayX, displayY, radius, violation, config);\n\n  console.log(`ðŸš¨ Drew violation at:`, {\n    natural: `(${position.x.toFixed(1)}, ${position.y.toFixed(1)})`,\n    display: `(${displayX.toFixed(1)}, ${displayY.toFixed(1)})`,\n    type: violation.type\n  });\n};\n\n/**\n * Draw violation circle with glow effect\n * @param {CanvasRenderingContext2D} ctx - Canvas context\n * @param {number} x - X coordinate\n * @param {number} y - Y coordinate\n * @param {number} radius - Circle radius\n * @param {object} config - Violation type configuration\n * @param {object} violation - Violation object\n */\nexport const drawViolationCircle = (ctx, x, y, radius, config, violation) => {\n  // Outer glow effect\n  const glowRadius = radius + 15;\n  const gradient = ctx.createRadialGradient(x, y, radius, x, y, glowRadius);\n  gradient.addColorStop(0, config.color + '60'); // 38% opacity\n  gradient.addColorStop(0.7, config.color + '30'); // 19% opacity\n  gradient.addColorStop(1, config.color + '00'); // 0% opacity\n\n  ctx.beginPath();\n  ctx.arc(x, y, glowRadius, 0, 2 * Math.PI);\n  ctx.fillStyle = gradient;\n  ctx.fill();\n\n  // Main circle with severity-based styling\n  ctx.beginPath();\n  ctx.arc(x, y, radius, 0, 2 * Math.PI);\n  \n  // Fill with semi-transparent color\n  ctx.fillStyle = config.color + 'AA'; // 67% opacity\n  ctx.fill();\n  \n  // Border with full color\n  ctx.strokeStyle = config.color;\n  ctx.lineWidth = getSeverityLineWidth(violation.severity);\n  ctx.stroke();\n\n  // Inner highlight for depth\n  ctx.beginPath();\n  ctx.arc(x, y, radius * 0.7, 0, 2 * Math.PI);\n  ctx.fillStyle = '#FFFFFF30'; // 19% white overlay\n  ctx.fill();\n\n  // Icon in center\n  ctx.fillStyle = '#FFFFFF';\n  ctx.font = `bold ${Math.max(16, radius * 0.6)}px Arial`;\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillText(config.icon, x, y);\n};\n\n/**\n * Draw violation label with background\n * @param {CanvasRenderingContext2D} ctx - Canvas context\n * @param {number} x - X coordinate\n * @param {number} y - Y coordinate\n * @param {number} radius - Circle radius\n * @param {object} violation - Violation object\n * @param {object} config - Violation type configuration\n */\nexport const drawViolationLabel = (ctx, x, y, radius, violation, config) => {\n  const labelText = violation.type.replace(/_/g, ' ');\n  const confidenceText = `${(violation.confidence * 100).toFixed(0)}%`;\n  \n  const fontSize = Math.max(10, radius * 0.4);\n  ctx.font = `bold ${fontSize}px Arial`;\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'top';\n\n  // Measure text for background\n  const labelMetrics = ctx.measureText(labelText);\n  const confidenceMetrics = ctx.measureText(confidenceText);\n  const maxWidth = Math.max(labelMetrics.width, confidenceMetrics.width);\n  \n  const labelY = y - radius - 15;\n  const padding = 6;\n  const lineHeight = fontSize + 2;\n  const backgroundHeight = (lineHeight * 2) + padding;\n\n  // Draw background with rounded corners effect\n  ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n  ctx.fillRect(\n    x - (maxWidth / 2) - padding,\n    labelY - padding,\n    maxWidth + (padding * 2),\n    backgroundHeight\n  );\n\n  // Draw border\n  ctx.strokeStyle = config.color;\n  ctx.lineWidth = 2;\n  ctx.strokeRect(\n    x - (maxWidth / 2) - padding,\n    labelY - padding,\n    maxWidth + (padding * 2),\n    backgroundHeight\n  );\n\n  // Draw violation type text\n  ctx.fillStyle = config.color;\n  ctx.fillText(labelText, x, labelY);\n\n  // Draw confidence text\n  ctx.fillStyle = '#FFFFFF';\n  ctx.font = `${fontSize * 0.8}px Arial`;\n  ctx.fillText(confidenceText, x, labelY + lineHeight);\n};\n\n/**\n * Get radius based on violation severity\n * @param {string} severity - Violation severity\n * @returns {number} Circle radius\n */\nexport const getSeverityRadius = (severity) => {\n  const radii = {\n    'high': 35,\n    'medium': 28,\n    'low': 22\n  };\n  return radii[severity] || radii['medium'];\n};\n\n/**\n * Get line width based on violation severity\n * @param {string} severity - Violation severity\n * @returns {number} Line width\n */\nexport const getSeverityLineWidth = (severity) => {\n  const widths = {\n    'high': 4,\n    'medium': 3,\n    'low': 2\n  };\n  return widths[severity] || widths['medium'];\n};\n\n/**\n * Draw violation heatmap overlay\n * @param {HTMLCanvasElement} canvas - Canvas element\n * @param {Array} violationHistory - Historical violations\n * @param {number} frameWidth - Frame width\n * @param {number} frameHeight - Frame height\n * @param {number} timeWindow - Time window in hours (default: 24)\n */\nexport const drawViolationHeatmap = (canvas, violationHistory, frameWidth, frameHeight, timeWindow = 24) => {\n  if (!canvas || violationHistory.length === 0) return;\n\n  const ctx = canvas.getContext('2d');\n  const now = Date.now();\n  const timeLimit = now - (timeWindow * 60 * 60 * 1000);\n\n  // Filter recent violations\n  const recentViolations = violationHistory.filter(v => \n    new Date(v.timestamp).getTime() >= timeLimit && v.details.position\n  );\n\n  if (recentViolations.length === 0) return;\n\n  // Create heatmap grid\n  const gridSize = 20;\n  const cols = Math.ceil(frameWidth / gridSize);\n  const rows = Math.ceil(frameHeight / gridSize);\n  const heatGrid = Array(rows).fill().map(() => Array(cols).fill(0));\n\n  // Populate grid with violation counts\n  recentViolations.forEach(violation => {\n    const pos = violation.details.position;\n    const gridX = Math.floor(pos.x / gridSize);\n    const gridY = Math.floor(pos.y / gridSize);\n    \n    if (gridX >= 0 && gridX < cols && gridY >= 0 && gridY < rows) {\n      heatGrid[gridY][gridX]++;\n    }\n  });\n\n  // Find max count for normalization\n  const maxCount = Math.max(...heatGrid.flat());\n  if (maxCount === 0) return;\n\n  // Draw heatmap\n  const scaleX = canvas.width / frameWidth;\n  const scaleY = canvas.height / frameHeight;\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      const count = heatGrid[row][col];\n      if (count > 0) {\n        const intensity = count / maxCount;\n        const alpha = Math.min(intensity * 0.6, 0.6); // Max 60% opacity\n        \n        ctx.fillStyle = `rgba(255, 51, 51, ${alpha})`;\n        ctx.fillRect(\n          col * gridSize * scaleX,\n          row * gridSize * scaleY,\n          gridSize * scaleX,\n          gridSize * scaleY\n        );\n      }\n    }\n  }\n};\n\n/**\n * Clear violation canvas\n * @param {HTMLCanvasElement} canvas - Canvas to clear\n */\nexport const clearViolationCanvas = (canvas) => {\n  if (!canvas) return;\n  \n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n};\n\n/**\n * Update canvas size to match video element\n * @param {HTMLCanvasElement} canvas - Canvas element\n * @param {number} frameWidth - Frame width\n * @param {number} frameHeight - Frame height\n */\nexport const updateViolationCanvasSize = (canvas, frameWidth, frameHeight) => {\n  if (!canvas) return;\n\n  const videoElement = document.querySelector('img[alt=\"Current frame\"]');\n  if (videoElement) {\n    const rect = videoElement.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n    canvas.style.width = rect.width + 'px';\n    canvas.style.height = rect.height + 'px';\n  } else {\n    canvas.width = frameWidth;\n    canvas.height = frameHeight;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,cAAc,QAAQ,mBAAmB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAACC,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEC,WAAW,KAAK;EACnF,IAAI,CAACH,MAAM,IAAIC,UAAU,CAACG,MAAM,KAAK,CAAC,EAAE;EAExC,MAAMC,GAAG,GAAGL,MAAM,CAACM,UAAU,CAAC,IAAI,CAAC;;EAEnC;EACA,MAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,0BAA0B,CAAC;EACvE,IAAIF,YAAY,EAAE;IAChB,MAAMG,IAAI,GAAGH,YAAY,CAACI,qBAAqB,CAAC,CAAC;IACjDX,MAAM,CAACY,KAAK,GAAGF,IAAI,CAACE,KAAK;IACzBZ,MAAM,CAACa,MAAM,GAAGH,IAAI,CAACG,MAAM;IAC3Bb,MAAM,CAACc,KAAK,CAACF,KAAK,GAAGF,IAAI,CAACE,KAAK,GAAG,IAAI;IACtCZ,MAAM,CAACc,KAAK,CAACD,MAAM,GAAGH,IAAI,CAACG,MAAM,GAAG,IAAI;EAC1C,CAAC,MAAM;IACLb,MAAM,CAACY,KAAK,GAAGV,UAAU;IACzBF,MAAM,CAACa,MAAM,GAAGV,WAAW;EAC7B;EAEAE,GAAG,CAACU,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEf,MAAM,CAACY,KAAK,EAAEZ,MAAM,CAACa,MAAM,CAAC;;EAEhD;EACA,MAAMG,YAAY,GAAGd,UAAU;EAC/B,MAAMe,aAAa,GAAGd,WAAW;EACjC,MAAMe,YAAY,GAAGlB,MAAM,CAACY,KAAK;EACjC,MAAMO,aAAa,GAAGnB,MAAM,CAACa,MAAM;EACnC,MAAMO,MAAM,GAAGF,YAAY,GAAGF,YAAY;EAC1C,MAAMK,MAAM,GAAGF,aAAa,GAAGF,aAAa;EAE5CK,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE;IACpCtB,UAAU,EAAEA,UAAU,CAACG,MAAM;IAC7BoB,WAAW,EAAE,GAAGR,YAAY,IAAIC,aAAa,EAAE;IAC/CQ,WAAW,EAAE,GAAGP,YAAY,IAAIC,aAAa,EAAE;IAC/CO,KAAK,EAAE,GAAGN,MAAM,CAACO,OAAO,CAAC,CAAC,CAAC,IAAIN,MAAM,CAACM,OAAO,CAAC,CAAC,CAAC;EAClD,CAAC,CAAC;;EAEF;EACA1B,UAAU,CAAC2B,OAAO,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;IACvCC,sBAAsB,CAAC1B,GAAG,EAAEwB,SAAS,EAAEC,KAAK,EAAEV,MAAM,EAAEC,MAAM,CAAC;EAC/D,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,sBAAsB,GAAGA,CAAC1B,GAAG,EAAEwB,SAAS,EAAEC,KAAK,EAAEV,MAAM,EAAEC,MAAM,KAAK;EAC/E,MAAMW,MAAM,GAAGlC,cAAc,CAAC+B,SAAS,CAACI,IAAI,CAAC;EAC7C,MAAMC,QAAQ,GAAGL,SAAS,CAACM,OAAO,CAACD,QAAQ;EAE3C,IAAI,CAACA,QAAQ,IAAI,CAACF,MAAM,EAAE;;EAE1B;EACA,MAAMI,QAAQ,GAAGF,QAAQ,CAACG,CAAC,GAAGjB,MAAM;EACpC,MAAMkB,QAAQ,GAAGJ,QAAQ,CAACK,CAAC,GAAGlB,MAAM;;EAEpC;EACA,MAAMmB,UAAU,GAAG,CAAC,GAAG,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;EACvD,MAAMC,UAAU,GAAGC,iBAAiB,CAACjB,SAAS,CAACkB,QAAQ,CAAC;EACxD,MAAMC,MAAM,GAAGH,UAAU,GAAGL,UAAU;;EAEtC;EACAS,mBAAmB,CAAC5C,GAAG,EAAE+B,QAAQ,EAAEE,QAAQ,EAAEU,MAAM,EAAEhB,MAAM,EAAEH,SAAS,CAAC;;EAEvE;EACAqB,kBAAkB,CAAC7C,GAAG,EAAE+B,QAAQ,EAAEE,QAAQ,EAAEU,MAAM,EAAEnB,SAAS,EAAEG,MAAM,CAAC;EAEtEV,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;IACnC4B,OAAO,EAAE,IAAIjB,QAAQ,CAACG,CAAC,CAACV,OAAO,CAAC,CAAC,CAAC,KAAKO,QAAQ,CAACK,CAAC,CAACZ,OAAO,CAAC,CAAC,CAAC,GAAG;IAC/DyB,OAAO,EAAE,IAAIhB,QAAQ,CAACT,OAAO,CAAC,CAAC,CAAC,KAAKW,QAAQ,CAACX,OAAO,CAAC,CAAC,CAAC,GAAG;IAC3DM,IAAI,EAAEJ,SAAS,CAACI;EAClB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgB,mBAAmB,GAAGA,CAAC5C,GAAG,EAAEgC,CAAC,EAAEE,CAAC,EAAES,MAAM,EAAEhB,MAAM,EAAEH,SAAS,KAAK;EAC3E;EACA,MAAMwB,UAAU,GAAGL,MAAM,GAAG,EAAE;EAC9B,MAAMM,QAAQ,GAAGjD,GAAG,CAACkD,oBAAoB,CAAClB,CAAC,EAAEE,CAAC,EAAES,MAAM,EAAEX,CAAC,EAAEE,CAAC,EAAEc,UAAU,CAAC;EACzEC,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAExB,MAAM,CAACyB,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;EAC/CH,QAAQ,CAACE,YAAY,CAAC,GAAG,EAAExB,MAAM,CAACyB,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;EACjDH,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAExB,MAAM,CAACyB,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;;EAE/CpD,GAAG,CAACqD,SAAS,CAAC,CAAC;EACfrD,GAAG,CAACsD,GAAG,CAACtB,CAAC,EAAEE,CAAC,EAAEc,UAAU,EAAE,CAAC,EAAE,CAAC,GAAGZ,IAAI,CAACmB,EAAE,CAAC;EACzCvD,GAAG,CAACwD,SAAS,GAAGP,QAAQ;EACxBjD,GAAG,CAACyD,IAAI,CAAC,CAAC;;EAEV;EACAzD,GAAG,CAACqD,SAAS,CAAC,CAAC;EACfrD,GAAG,CAACsD,GAAG,CAACtB,CAAC,EAAEE,CAAC,EAAES,MAAM,EAAE,CAAC,EAAE,CAAC,GAAGP,IAAI,CAACmB,EAAE,CAAC;;EAErC;EACAvD,GAAG,CAACwD,SAAS,GAAG7B,MAAM,CAACyB,KAAK,GAAG,IAAI,CAAC,CAAC;EACrCpD,GAAG,CAACyD,IAAI,CAAC,CAAC;;EAEV;EACAzD,GAAG,CAAC0D,WAAW,GAAG/B,MAAM,CAACyB,KAAK;EAC9BpD,GAAG,CAAC2D,SAAS,GAAGC,oBAAoB,CAACpC,SAAS,CAACkB,QAAQ,CAAC;EACxD1C,GAAG,CAAC6D,MAAM,CAAC,CAAC;;EAEZ;EACA7D,GAAG,CAACqD,SAAS,CAAC,CAAC;EACfrD,GAAG,CAACsD,GAAG,CAACtB,CAAC,EAAEE,CAAC,EAAES,MAAM,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,GAAGP,IAAI,CAACmB,EAAE,CAAC;EAC3CvD,GAAG,CAACwD,SAAS,GAAG,WAAW,CAAC,CAAC;EAC7BxD,GAAG,CAACyD,IAAI,CAAC,CAAC;;EAEV;EACAzD,GAAG,CAACwD,SAAS,GAAG,SAAS;EACzBxD,GAAG,CAAC8D,IAAI,GAAG,QAAQ1B,IAAI,CAAC2B,GAAG,CAAC,EAAE,EAAEpB,MAAM,GAAG,GAAG,CAAC,UAAU;EACvD3C,GAAG,CAACgE,SAAS,GAAG,QAAQ;EACxBhE,GAAG,CAACiE,YAAY,GAAG,QAAQ;EAC3BjE,GAAG,CAACkE,QAAQ,CAACvC,MAAM,CAACwC,IAAI,EAAEnC,CAAC,EAAEE,CAAC,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMW,kBAAkB,GAAGA,CAAC7C,GAAG,EAAEgC,CAAC,EAAEE,CAAC,EAAES,MAAM,EAAEnB,SAAS,EAAEG,MAAM,KAAK;EAC1E,MAAMyC,SAAS,GAAG5C,SAAS,CAACI,IAAI,CAACyC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EACnD,MAAMC,cAAc,GAAG,GAAG,CAAC9C,SAAS,CAAC+C,UAAU,GAAG,GAAG,EAAEjD,OAAO,CAAC,CAAC,CAAC,GAAG;EAEpE,MAAMkD,QAAQ,GAAGpC,IAAI,CAAC2B,GAAG,CAAC,EAAE,EAAEpB,MAAM,GAAG,GAAG,CAAC;EAC3C3C,GAAG,CAAC8D,IAAI,GAAG,QAAQU,QAAQ,UAAU;EACrCxE,GAAG,CAACgE,SAAS,GAAG,QAAQ;EACxBhE,GAAG,CAACiE,YAAY,GAAG,KAAK;;EAExB;EACA,MAAMQ,YAAY,GAAGzE,GAAG,CAAC0E,WAAW,CAACN,SAAS,CAAC;EAC/C,MAAMO,iBAAiB,GAAG3E,GAAG,CAAC0E,WAAW,CAACJ,cAAc,CAAC;EACzD,MAAMM,QAAQ,GAAGxC,IAAI,CAAC2B,GAAG,CAACU,YAAY,CAAClE,KAAK,EAAEoE,iBAAiB,CAACpE,KAAK,CAAC;EAEtE,MAAMsE,MAAM,GAAG3C,CAAC,GAAGS,MAAM,GAAG,EAAE;EAC9B,MAAMmC,OAAO,GAAG,CAAC;EACjB,MAAMC,UAAU,GAAGP,QAAQ,GAAG,CAAC;EAC/B,MAAMQ,gBAAgB,GAAID,UAAU,GAAG,CAAC,GAAID,OAAO;;EAEnD;EACA9E,GAAG,CAACwD,SAAS,GAAG,oBAAoB;EACpCxD,GAAG,CAACiF,QAAQ,CACVjD,CAAC,GAAI4C,QAAQ,GAAG,CAAE,GAAGE,OAAO,EAC5BD,MAAM,GAAGC,OAAO,EAChBF,QAAQ,GAAIE,OAAO,GAAG,CAAE,EACxBE,gBACF,CAAC;;EAED;EACAhF,GAAG,CAAC0D,WAAW,GAAG/B,MAAM,CAACyB,KAAK;EAC9BpD,GAAG,CAAC2D,SAAS,GAAG,CAAC;EACjB3D,GAAG,CAACkF,UAAU,CACZlD,CAAC,GAAI4C,QAAQ,GAAG,CAAE,GAAGE,OAAO,EAC5BD,MAAM,GAAGC,OAAO,EAChBF,QAAQ,GAAIE,OAAO,GAAG,CAAE,EACxBE,gBACF,CAAC;;EAED;EACAhF,GAAG,CAACwD,SAAS,GAAG7B,MAAM,CAACyB,KAAK;EAC5BpD,GAAG,CAACkE,QAAQ,CAACE,SAAS,EAAEpC,CAAC,EAAE6C,MAAM,CAAC;;EAElC;EACA7E,GAAG,CAACwD,SAAS,GAAG,SAAS;EACzBxD,GAAG,CAAC8D,IAAI,GAAG,GAAGU,QAAQ,GAAG,GAAG,UAAU;EACtCxE,GAAG,CAACkE,QAAQ,CAACI,cAAc,EAAEtC,CAAC,EAAE6C,MAAM,GAAGE,UAAU,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMtC,iBAAiB,GAAIC,QAAQ,IAAK;EAC7C,MAAMyC,KAAK,GAAG;IACZ,MAAM,EAAE,EAAE;IACV,QAAQ,EAAE,EAAE;IACZ,KAAK,EAAE;EACT,CAAC;EACD,OAAOA,KAAK,CAACzC,QAAQ,CAAC,IAAIyC,KAAK,CAAC,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMvB,oBAAoB,GAAIlB,QAAQ,IAAK;EAChD,MAAM0C,MAAM,GAAG;IACb,MAAM,EAAE,CAAC;IACT,QAAQ,EAAE,CAAC;IACX,KAAK,EAAE;EACT,CAAC;EACD,OAAOA,MAAM,CAAC1C,QAAQ,CAAC,IAAI0C,MAAM,CAAC,QAAQ,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAAC1F,MAAM,EAAE2F,gBAAgB,EAAEzF,UAAU,EAAEC,WAAW,EAAEyF,UAAU,GAAG,EAAE,KAAK;EAC1G,IAAI,CAAC5F,MAAM,IAAI2F,gBAAgB,CAACvF,MAAM,KAAK,CAAC,EAAE;EAE9C,MAAMC,GAAG,GAAGL,MAAM,CAACM,UAAU,CAAC,IAAI,CAAC;EACnC,MAAMsC,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;EACtB,MAAMiD,SAAS,GAAGjD,GAAG,GAAIgD,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,IAAK;;EAErD;EACA,MAAME,gBAAgB,GAAGH,gBAAgB,CAACI,MAAM,CAACC,CAAC,IAChD,IAAIrD,IAAI,CAACqD,CAAC,CAACC,SAAS,CAAC,CAACC,OAAO,CAAC,CAAC,IAAIL,SAAS,IAAIG,CAAC,CAAC7D,OAAO,CAACD,QAC5D,CAAC;EAED,IAAI4D,gBAAgB,CAAC1F,MAAM,KAAK,CAAC,EAAE;;EAEnC;EACA,MAAM+F,QAAQ,GAAG,EAAE;EACnB,MAAMC,IAAI,GAAG3D,IAAI,CAAC4D,IAAI,CAACnG,UAAU,GAAGiG,QAAQ,CAAC;EAC7C,MAAMG,IAAI,GAAG7D,IAAI,CAAC4D,IAAI,CAAClG,WAAW,GAAGgG,QAAQ,CAAC;EAC9C,MAAMI,QAAQ,GAAGC,KAAK,CAACF,IAAI,CAAC,CAACxC,IAAI,CAAC,CAAC,CAAC2C,GAAG,CAAC,MAAMD,KAAK,CAACJ,IAAI,CAAC,CAACtC,IAAI,CAAC,CAAC,CAAC,CAAC;;EAElE;EACAgC,gBAAgB,CAAClE,OAAO,CAACC,SAAS,IAAI;IACpC,MAAM6E,GAAG,GAAG7E,SAAS,CAACM,OAAO,CAACD,QAAQ;IACtC,MAAMyE,KAAK,GAAGlE,IAAI,CAACmE,KAAK,CAACF,GAAG,CAACrE,CAAC,GAAG8D,QAAQ,CAAC;IAC1C,MAAMU,KAAK,GAAGpE,IAAI,CAACmE,KAAK,CAACF,GAAG,CAACnE,CAAC,GAAG4D,QAAQ,CAAC;IAE1C,IAAIQ,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAGP,IAAI,IAAIS,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAGP,IAAI,EAAE;MAC5DC,QAAQ,CAACM,KAAK,CAAC,CAACF,KAAK,CAAC,EAAE;IAC1B;EACF,CAAC,CAAC;;EAEF;EACA,MAAMG,QAAQ,GAAGrE,IAAI,CAAC2B,GAAG,CAAC,GAAGmC,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC;EAC7C,IAAID,QAAQ,KAAK,CAAC,EAAE;;EAEpB;EACA,MAAM1F,MAAM,GAAGpB,MAAM,CAACY,KAAK,GAAGV,UAAU;EACxC,MAAMmB,MAAM,GAAGrB,MAAM,CAACa,MAAM,GAAGV,WAAW;EAE1C,KAAK,IAAI6G,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGV,IAAI,EAAEU,GAAG,EAAE,EAAE;IACnC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGb,IAAI,EAAEa,GAAG,EAAE,EAAE;MACnC,MAAMC,KAAK,GAAGX,QAAQ,CAACS,GAAG,CAAC,CAACC,GAAG,CAAC;MAChC,IAAIC,KAAK,GAAG,CAAC,EAAE;QACb,MAAMC,SAAS,GAAGD,KAAK,GAAGJ,QAAQ;QAClC,MAAMM,KAAK,GAAG3E,IAAI,CAAC4E,GAAG,CAACF,SAAS,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;;QAE9C9G,GAAG,CAACwD,SAAS,GAAG,qBAAqBuD,KAAK,GAAG;QAC7C/G,GAAG,CAACiF,QAAQ,CACV2B,GAAG,GAAGd,QAAQ,GAAG/E,MAAM,EACvB4F,GAAG,GAAGb,QAAQ,GAAG9E,MAAM,EACvB8E,QAAQ,GAAG/E,MAAM,EACjB+E,QAAQ,GAAG9E,MACb,CAAC;MACH;IACF;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMiG,oBAAoB,GAAItH,MAAM,IAAK;EAC9C,IAAI,CAACA,MAAM,EAAE;EAEb,MAAMK,GAAG,GAAGL,MAAM,CAACM,UAAU,CAAC,IAAI,CAAC;EACnCD,GAAG,CAACU,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEf,MAAM,CAACY,KAAK,EAAEZ,MAAM,CAACa,MAAM,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM0G,yBAAyB,GAAGA,CAACvH,MAAM,EAAEE,UAAU,EAAEC,WAAW,KAAK;EAC5E,IAAI,CAACH,MAAM,EAAE;EAEb,MAAMO,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,0BAA0B,CAAC;EACvE,IAAIF,YAAY,EAAE;IAChB,MAAMG,IAAI,GAAGH,YAAY,CAACI,qBAAqB,CAAC,CAAC;IACjDX,MAAM,CAACY,KAAK,GAAGF,IAAI,CAACE,KAAK;IACzBZ,MAAM,CAACa,MAAM,GAAGH,IAAI,CAACG,MAAM;IAC3Bb,MAAM,CAACc,KAAK,CAACF,KAAK,GAAGF,IAAI,CAACE,KAAK,GAAG,IAAI;IACtCZ,MAAM,CAACc,KAAK,CAACD,MAAM,GAAGH,IAAI,CAACG,MAAM,GAAG,IAAI;EAC1C,CAAC,MAAM;IACLb,MAAM,CAACY,KAAK,GAAGV,UAAU;IACzBF,MAAM,CAACa,MAAM,GAAGV,WAAW;EAC7B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}