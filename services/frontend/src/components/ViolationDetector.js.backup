import React, { useState, useEffect, useRef } from 'react';
import { toast } from 'react-toastify';

const ViolationDetector = ({
  detections = [],
  zones = [],
  frameWidth = 640,
  frameHeight = 480,
  onViolationDetected,
  hideControls = false,
  showControlsOnly = false
}) => {
  const [violations, setViolations] = useState([]);
  const [violationHistory, setViolationHistory] = useState([]);
  const [settings, setSettings] = useState({
    enabled: true,
    sensitivity: 0.7, // Confidence threshold for violations
    temporalWindow: 3, // Seconds to track violations
    movementThreshold: 20, // Pixels of movement to consider "handling"
  });
  
  const violationCanvasRef = useRef(null);
  const handTrackingRef = useRef(new Map()); // Track hand positions over time

  // Violation types with professional configuration
  const violationTypes = {
    HAND_IN_INGREDIENT_NO_SCOOPER: {
      severity: 'high',
      color: '#FF3333',
      icon: '🚨',
      title: 'Hand Contact Without Scooper',
      description: 'Hand detected in ingredient area without scooper present'
    },
    CROSS_CONTAMINATION: {
      severity: 'high', 
      color: '#FF6B35',
      icon: '⚠️',
      title: 'Cross Contamination Risk',
      description: 'Hand moved between different ingredient areas without cleaning'
    },
    IMPROPER_TOOL_USE: {
      severity: 'medium',
      color: '#FFD23F',
      icon: '🥄',
      title: 'Improper Tool Usage',
      description: 'Scooper used incorrectly or in wrong area'
    },
    EXTENDED_CONTACT: {
      severity: 'medium',
      color: '#FF8C42',
      icon: '⏱️',
      title: 'Extended Hand Contact',
      description: 'Hand in ingredient area for extended period'
    }
  };

  useEffect(() => {
    console.log('🚨 ViolationDetector useEffect:', {
      enabled: settings.enabled,
      detections: detections.length,
      zones: zones.length,
      frameSize: `${frameWidth}x${frameHeight}`
    });

    if (settings.enabled && detections.length > 0 && zones.length > 0) {
      console.log('🔍 Starting violation analysis...');
      analyzeViolations();
    } else {
      console.log('⏸️ Violation analysis skipped:', {
        enabled: settings.enabled,
        hasDetections: detections.length > 0,
        hasZones: zones.length > 0
      });
    }
  }, [detections, zones, settings.enabled]);

  useEffect(() => {
    drawViolationOverlay();
  }, [violations, frameWidth, frameHeight]);

  const analyzeViolations = () => {
    const currentTime = Date.now();
    const newViolations = [];

    // Get current hands and scoopers
    const hands = detections.filter(d => d.class_name === 'hand');
    const scoopers = detections.filter(d => d.class_name === 'scooper');
    const persons = detections.filter(d => d.class_name === 'person');

    console.log('🔍 Analyzing violations:', {
      hands: hands.length,
      scoopers: scoopers.length,
      persons: persons.length,
      zones: zones.length
    });

    // Analyze each hand
    hands.forEach((hand, handIndex) => {
      const handId = `hand_${handIndex}`;
      const handCenter = {
        x: (hand.bbox.x1 + hand.bbox.x2) / 2,
        y: (hand.bbox.y1 + hand.bbox.y2) / 2
      };

      // Update hand tracking
      if (!handTrackingRef.current.has(handId)) {
        handTrackingRef.current.set(handId, {
          positions: [],
          lastZone: null,
          firstDetected: currentTime
        });
      }

      const handTracking = handTrackingRef.current.get(handId);
      handTracking.positions.push({
        ...handCenter,
        timestamp: currentTime,
        confidence: hand.confidence
      });

      // Keep only recent positions (temporal window)
      const windowMs = settings.temporalWindow * 1000;
      handTracking.positions = handTracking.positions.filter(
        pos => currentTime - pos.timestamp < windowMs
      );

      // Check which zone the hand is in
      const currentZone = findZoneContainingPoint(handCenter.x, handCenter.y);
      
      if (currentZone && currentZone.requiresScooper) {
        // Check for scooper presence near this hand
        const nearbyScoopers = scoopers.filter(scooper => {
          const scooperCenter = {
            x: (scooper.bbox.x1 + scooper.bbox.x2) / 2,
            y: (scooper.bbox.y1 + scooper.bbox.y2) / 2
          };
          const distance = Math.sqrt(
            Math.pow(handCenter.x - scooperCenter.x, 2) + 
            Math.pow(handCenter.y - scooperCenter.y, 2)
          );
          return distance < 100; // Within 100 pixels
        });

        // Check for movement (indicates handling, not just cleaning)
        const isHandling = checkHandMovement(handTracking.positions);

        // VIOLATION: Hand in ingredient area without scooper
        if (nearbyScoopers.length === 0 && isHandling) {
          const violation = createViolation(
            'HAND_IN_INGREDIENT_NO_SCOOPER',
            {
              handId,
              hand,
              zone: currentZone,
              confidence: hand.confidence,
              position: handCenter,
              duration: (currentTime - handTracking.firstDetected) / 1000
            }
          );
          newViolations.push(violation);
        }

        // VIOLATION: Cross contamination check
        if (handTracking.lastZone && 
            handTracking.lastZone.id !== currentZone.id && 
            handTracking.lastZone.requiresScooper) {
          const violation = createViolation(
            'CROSS_CONTAMINATION',
            {
              handId,
              hand,
              fromZone: handTracking.lastZone,
              toZone: currentZone,
              confidence: hand.confidence * 0.8, // Slightly lower confidence
              position: handCenter
            }
          );
          newViolations.push(violation);
        }

        // VIOLATION: Extended contact
        const contactDuration = (currentTime - handTracking.firstDetected) / 1000;
        if (contactDuration > 5 && nearbyScoopers.length === 0) { // 5 seconds
          const violation = createViolation(
            'EXTENDED_CONTACT',
            {
              handId,
              hand,
              zone: currentZone,
              confidence: Math.min(hand.confidence + 0.1, 1.0),
              position: handCenter,
              duration: contactDuration
            }
          );
          newViolations.push(violation);
        }

        handTracking.lastZone = currentZone;
      }
    });

    // Clean up old hand tracking data
    const activeHandIds = hands.map((_, index) => `hand_${index}`);
    for (const [handId, tracking] of handTrackingRef.current.entries()) {
      if (!activeHandIds.includes(handId) && 
          currentTime - tracking.positions[tracking.positions.length - 1]?.timestamp > 2000) {
        handTrackingRef.current.delete(handId);
      }
    }

    // Update violations
    if (newViolations.length > 0) {
      setViolations(newViolations);
      setViolationHistory(prev => [...prev, ...newViolations].slice(-50)); // Keep last 50
      
      // Notify parent component and show toasts
      newViolations.forEach(violation => {
        if (onViolationDetected) {
          onViolationDetected(violation);
        }
        
        const config = violationTypes[violation.type];
        toast.error(`${config.icon} ${config.title}`, {
          position: "top-center",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
        });
      });
    } else {
      setViolations([]);
    }
  };

  // Point-in-polygon algorithm for polygon zone detection
  const isPointInPolygon = (point, polygon) => {
    const x = point.x;
    const y = point.y;
    let inside = false;

    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
      const xi = polygon[i].x;
      const yi = polygon[i].y;
      const xj = polygon[j].x;
      const yj = polygon[j].y;

      if (((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) {
        inside = !inside;
      }
    }

    return inside;
  };

  const findZoneContainingPoint = (x, y) => {
    // x, y are detection coordinates (natural frame coordinates)
    // zones are stored in natural frame coordinates
    const foundZone = zones.find(zone => {
      if (zone.shape === 'polygon' && zone.points && zone.points.length >= 3) {
        // Handle polygon zones
        const inZone = isPointInPolygon({ x, y }, zone.points);

        if (inZone) {
          console.log(`🔺 Point (${x.toFixed(1)}, ${y.toFixed(1)}) is in polygon zone ${zone.name}:`, {
            point: { x, y },
            polygonPoints: zone.points.length,
            zoneName: zone.name
          });
        }

        return inZone;
      } else if (zone.points && zone.points.length === 2) {
        // Handle rectangle zones (legacy format)
        const [p1, p2] = zone.points;
        const inZone = x >= Math.min(p1.x, p2.x) && x <= Math.max(p1.x, p2.x) &&
                      y >= Math.min(p1.y, p2.y) && y <= Math.max(p1.y, p2.y);

        if (inZone) {
          console.log(`📦 Point (${x.toFixed(1)}, ${y.toFixed(1)}) is in rectangle zone ${zone.name}:`, {
            point: { x, y },
            zone: { p1, p2 },
            zoneName: zone.name
          });
        }

        return inZone;
      }
      return false;
    });

    return foundZone;
  };

  const checkHandMovement = (positions) => {
    if (positions.length < 2) return false;
    
    let totalMovement = 0;
    for (let i = 1; i < positions.length; i++) {
      const distance = Math.sqrt(
        Math.pow(positions[i].x - positions[i-1].x, 2) + 
        Math.pow(positions[i].y - positions[i-1].y, 2)
      );
      totalMovement += distance;
    }
    
    return totalMovement > settings.movementThreshold;
  };

  const createViolation = (type, data) => {
    return {
      id: `violation_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type,
      timestamp: new Date().toISOString(),
      severity: violationTypes[type].severity,
      confidence: data.confidence,
      description: violationTypes[type].description,
      details: data,
      resolved: false
    };
  };

  const drawViolationOverlay = () => {
    const canvas = violationCanvasRef.current;
    if (!canvas || violations.length === 0) return;

    const ctx = canvas.getContext('2d');

    // Get the video element to match its display size
    const videoElement = document.querySelector('img[alt="Current frame"]');
    if (videoElement) {
      const rect = videoElement.getBoundingClientRect();
      canvas.width = rect.width;
      canvas.height = rect.height;
      canvas.style.width = rect.width + 'px';
      canvas.style.height = rect.height + 'px';
    } else {
      canvas.width = frameWidth;
      canvas.height = frameHeight;
    }

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Calculate scaling from natural to display coordinates
    const naturalWidth = frameWidth;
    const naturalHeight = frameHeight;
    const displayWidth = canvas.width;
    const displayHeight = canvas.height;
    const scaleX = displayWidth / naturalWidth;
    const scaleY = displayHeight / naturalHeight;

    console.log('🚨 Drawing violations:', {
      violations: violations.length,
      naturalSize: `${naturalWidth}x${naturalHeight}`,
      displaySize: `${displayWidth}x${displayHeight}`,
      scale: `${scaleX.toFixed(3)}x${scaleY.toFixed(3)}`
    });

    // Draw violation indicators
    violations.forEach((violation, index) => {
      const config = violationTypes[violation.type];
      const position = violation.details.position;

      if (position) {
        // Scale position from natural to display coordinates
        const displayX = position.x * scaleX;
        const displayY = position.y * scaleY;

        // Pulsing violation indicator
        const pulseScale = 1 + 0.3 * Math.sin(Date.now() / 200);
        const radius = 30 * pulseScale;
        
        // Outer glow
        ctx.beginPath();
        ctx.arc(displayX, displayY, radius + 10, 0, 2 * Math.PI);
        ctx.fillStyle = config.color + '40'; // 25% opacity
        ctx.fill();

        // Main circle
        ctx.beginPath();
        ctx.arc(displayX, displayY, radius, 0, 2 * Math.PI);
        ctx.fillStyle = config.color + 'AA'; // 67% opacity
        ctx.fill();
        ctx.strokeStyle = config.color;
        ctx.lineWidth = 3;
        ctx.stroke();

        // Icon
        ctx.fillStyle = '#FFFFFF';
        ctx.font = 'bold 20px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(config.icon, displayX, displayY + 7);

        // Violation type label
        ctx.fillStyle = config.color;
        ctx.font = 'bold 12px Arial';
        ctx.fillText(violation.type.replace(/_/g, ' '), displayX, displayY - radius - 10);

        console.log(`🚨 Drew violation at:`, {
          natural: `(${position.x.toFixed(1)}, ${position.y.toFixed(1)})`,
          display: `(${displayX.toFixed(1)}, ${displayY.toFixed(1)})`,
          type: violation.type
        });
      }
    });
  };

  const getViolationStats = () => {
    const now = new Date();
    const last24h = violationHistory.filter(v => {
      const violationTime = new Date(v.timestamp);
      const hoursDiff = (now - violationTime) / (1000 * 60 * 60);
      return hoursDiff < 24;
    });
    
    const byType = {};
    last24h.forEach(v => {
      byType[v.type] = (byType[v.type] || 0) + 1;
    });

    return {
      total: violationHistory.length,
      last24h: last24h.length,
      current: violations.length,
      byType
    };
  };

  const stats = getViolationStats();

  // If only showing controls, return just the settings panel
  if (showControlsOnly) {
    return (
      <div style={{ width: '100%' }}>
        
        {/* Violation Detection Settings */}
        <div style={{
          background: 'rgba(255, 255, 255, 0.05)',
          padding: '12px',
          borderRadius: '8px',
          marginBottom: '16px',
          border: '1px solid rgba(255, 255, 255, 0.1)'
        }}>
          <h4 style={{
            margin: '0 0 12px 0',
            color: '#FFD700',
            fontSize: '14px',
            display: 'flex',
            alignItems: 'center',
            gap: '8px'
          }}>
            🚨 Violation Detection Settings
          </h4>

          <div style={{ display: 'flex', gap: '20px', marginBottom: '12px', flexWrap: 'wrap', alignItems: 'center' }}>
            <label style={{
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              cursor: 'pointer',
              padding: '4px 8px',
              borderRadius: '4px',
              background: settings.enabled ? 'rgba(34, 197, 94, 0.2)' : 'rgba(239, 68, 68, 0.2)'
            }}>
              <input
                type="checkbox"
                checked={settings.enabled}
                onChange={(e) => setSettings({...settings, enabled: e.target.checked})}
              />
              <span style={{ fontWeight: '500' }}>
                {settings.enabled ? '✅ Detection Active' : '❌ Detection Disabled'}
              </span>
            </label>

            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
              <span style={{ fontWeight: '500', minWidth: '80px' }}>Sensitivity:</span>
              <input
                type="range"
                min="0.1"
                max="1.0"
                step="0.1"
                value={settings.sensitivity}
                onChange={(e) => setSettings({...settings, sensitivity: parseFloat(e.target.value)})}
                style={{ width: '120px' }}
                disabled={!settings.enabled}
              />
              <span style={{
                minWidth: '30px',
                fontWeight: 'bold',
                color: settings.sensitivity >= 0.8 ? '#ef4444' : settings.sensitivity >= 0.5 ? '#f59e0b' : '#10b981'
              }}>
                {settings.sensitivity}
              </span>
            </div>
          </div>

          <div style={{
            fontSize: '12px',
            color: '#94a3b8',
            lineHeight: '1.4',
            background: 'rgba(0, 0, 0, 0.2)',
            padding: '8px',
            borderRadius: '4px'
          }}>
            <strong>How it works:</strong><br/>
            • <strong>Low (0.1-0.4):</strong> Detects obvious violations only<br/>
            • <strong>Medium (0.5-0.7):</strong> Balanced detection (recommended)<br/>
            • <strong>High (0.8-1.0):</strong> Detects potential violations aggressively<br/>
            <em>Higher sensitivity may increase false positives</em>
          </div>
        </div>

        {/* Statistics */}
        <div style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', 
          gap: '12px',
          marginBottom: '12px'
        }}>
          <div style={{ textAlign: 'center', padding: '8px', background: 'rgba(255,255,255,0.1)', borderRadius: '6px' }}>
            <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#FF3333' }}>{stats.current}</div>
            <div style={{ fontSize: '12px', opacity: 0.8 }}>Active Violations</div>
          </div>
          <div style={{ textAlign: 'center', padding: '8px', background: 'rgba(255,255,255,0.1)', borderRadius: '6px' }}>
            <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#FFD23F' }}>{stats.last24h}</div>
            <div style={{ fontSize: '12px', opacity: 0.8 }}>Last 24 Hours</div>
          </div>
          <div style={{ textAlign: 'center', padding: '8px', background: 'rgba(255,255,255,0.1)', borderRadius: '6px' }}>
            <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#2ED573' }}>{stats.total}</div>
            <div style={{ fontSize: '12px', opacity: 0.8 }}>Total Detected</div>
          </div>
        </div>

        {/* Current Violations */}
        {violations.length > 0 && (
          <div style={{ 
            padding: '12px', 
            background: 'rgba(255, 51, 51, 0.2)', 
            borderRadius: '6px',
            border: '2px solid #FF3333'
          }}>
            <h5 style={{ margin: '0 0 8px 0', color: '#FF3333' }}>🚨 Active Violations</h5>
            {violations.map((violation, index) => {
              const config = violationTypes[violation.type];
              return (
                <div key={violation.id} style={{ 
                  marginBottom: '8px', 
                  padding: '8px', 
                  background: 'rgba(255,255,255,0.1)', 
                  borderRadius: '4px' 
                }}>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <strong style={{ color: config.color }}>
                      {config.icon} {config.title}
                    </strong>
                    <span style={{ 
                      background: config.color, 
                      color: 'white', 
                      padding: '2px 6px', 
                      borderRadius: '4px', 
                      fontSize: '12px' 
                    }}>
                      {violation.severity.toUpperCase()}
                    </span>
                  </div>
                  <div style={{ fontSize: '14px', opacity: 0.9, marginTop: '4px' }}>
                    {config.description}
                  </div>
                  <div style={{ fontSize: '12px', opacity: 0.7, marginTop: '4px' }}>
                    Confidence: {(violation.confidence * 100).toFixed(1)}% |
                    Time: {new Date(violation.timestamp).toLocaleTimeString()}
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    );
  }

  // Main component with canvas overlay and optional controls
  return (
    <div style={{ width: '100%', position: 'relative' }}>
      {/* Violation Canvas Overlay - Only show if not hiding controls */}
      {!hideControls && (
        <canvas
          ref={violationCanvasRef}
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            pointerEvents: 'none',
            zIndex: 30,
            borderRadius: '8px'
          }}
        />
      )}

      {/* Violation Controls - Only show if not hiding controls */}
      {!hideControls && (
        <div style={{
          marginTop: '16px',
          padding: '16px',
          background: 'rgba(255,255,255,0.1)',
          borderRadius: '8px'
        }}>
          <h4 style={{ margin: '0 0 12px 0', color: '#fff' }}>🚨 Violation Detection</h4>

          {/* Include the same settings content here */}
          <div style={{
            background: 'rgba(255, 255, 255, 0.05)',
            padding: '12px',
            borderRadius: '8px',
            marginBottom: '16px',
            border: '1px solid rgba(255, 255, 255, 0.1)'
          }}>
            <h4 style={{
              margin: '0 0 12px 0',
              color: '#FFD700',
              fontSize: '14px',
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}>
              🚨 Violation Detection Settings
            </h4>

            <div style={{ display: 'flex', gap: '20px', marginBottom: '12px', flexWrap: 'wrap', alignItems: 'center' }}>
              <label style={{
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                cursor: 'pointer',
                padding: '4px 8px',
                borderRadius: '4px',
                background: settings.enabled ? 'rgba(34, 197, 94, 0.2)' : 'rgba(239, 68, 68, 0.2)'
              }}>
                <input
                  type="checkbox"
                  checked={settings.enabled}
                  onChange={(e) => setSettings({...settings, enabled: e.target.checked})}
                />
                <span style={{ fontWeight: '500' }}>
                  {settings.enabled ? '✅ Detection Active' : '❌ Detection Disabled'}
                </span>
              </label>

              <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                <span style={{ fontWeight: '500', minWidth: '80px' }}>Sensitivity:</span>
                <input
                  type="range"
                  min="0.1"
                  max="1.0"
                  step="0.1"
                  value={settings.sensitivity}
                  onChange={(e) => setSettings({...settings, sensitivity: parseFloat(e.target.value)})}
                  style={{ width: '120px' }}
                  disabled={!settings.enabled}
                />
                <span style={{
                  minWidth: '30px',
                  fontWeight: 'bold',
                  color: settings.sensitivity >= 0.8 ? '#ef4444' : settings.sensitivity >= 0.5 ? '#f59e0b' : '#10b981'
                }}>
                  {settings.sensitivity}
                </span>
              </div>
            </div>

            <div style={{
              fontSize: '12px',
              color: '#94a3b8',
              lineHeight: '1.4',
              background: 'rgba(0, 0, 0, 0.2)',
              padding: '8px',
              borderRadius: '4px'
            }}>
              <strong>How it works:</strong><br/>
              • <strong>Low (0.1-0.4):</strong> Detects obvious violations only<br/>
              • <strong>Medium (0.5-0.7):</strong> Balanced detection (recommended)<br/>
              • <strong>High (0.8-1.0):</strong> Detects potential violations aggressively<br/>
              <em>Higher sensitivity may increase false positives</em>
            </div>
          </div>

          {/* Statistics */}
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',
            gap: '12px',
            marginBottom: '12px'
          }}>
            <div style={{ textAlign: 'center', padding: '8px', background: 'rgba(255,255,255,0.1)', borderRadius: '6px' }}>
              <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#FF3333' }}>{stats.current}</div>
              <div style={{ fontSize: '12px', opacity: 0.8 }}>Active Violations</div>
            </div>
            <div style={{ textAlign: 'center', padding: '8px', background: 'rgba(255,255,255,0.1)', borderRadius: '6px' }}>
              <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#FFD23F' }}>{stats.last24h}</div>
              <div style={{ fontSize: '12px', opacity: 0.8 }}>Last 24 Hours</div>
            </div>
            <div style={{ textAlign: 'center', padding: '8px', background: 'rgba(255,255,255,0.1)', borderRadius: '6px' }}>
              <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#2ED573' }}>{stats.total}</div>
              <div style={{ fontSize: '12px', opacity: 0.8 }}>Total Detected</div>
            </div>
          </div>

          {/* Current Violations */}
          {violations.length > 0 && (
            <div style={{
              padding: '12px',
              background: 'rgba(255, 51, 51, 0.2)',
              borderRadius: '6px',
              border: '2px solid #FF3333'
            }}>
              <h5 style={{ margin: '0 0 8px 0', color: '#FF3333' }}>🚨 Active Violations</h5>
              {violations.map((violation, index) => {
                const config = violationTypes[violation.type];
                return (
                  <div key={violation.id} style={{
                    marginBottom: '8px',
                    padding: '8px',
                    background: 'rgba(255,255,255,0.1)',
                    borderRadius: '4px'
                  }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                      <strong style={{ color: config.color }}>
                        {config.icon} {config.title}
                      </strong>
                      <span style={{
                        background: config.color,
                        color: 'white',
                        padding: '2px 6px',
                        borderRadius: '4px',
                        fontSize: '12px'
                      }}>
                        {violation.severity.toUpperCase()}
                      </span>
                    </div>
                    <div style={{ fontSize: '14px', opacity: 0.9, marginTop: '4px' }}>
                      {config.description}
                    </div>
                    <div style={{ fontSize: '12px', opacity: 0.7, marginTop: '4px' }}>
                      Confidence: {(violation.confidence * 100).toFixed(1)}% |
                      Time: {new Date(violation.timestamp).toLocaleTimeString()}
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ViolationDetector;
